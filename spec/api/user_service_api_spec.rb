=begin
#merged spec

#merged spec

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'spec_helper'
require 'json'

# Unit tests for ZitadelClient::UserServiceApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'UserServiceApi' do
  before do
    # run before each test
    @api_instance = ZitadelClient::UserServiceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UserServiceApi' do
    it 'should create an instance of UserServiceApi' do
      expect(@api_instance).to be_instance_of(ZitadelClient::UserServiceApi)
    end
  end

  # unit tests for user_service_add_human_user
  # Create a new human user
  # Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2AddHumanUserResponse]
  describe 'user_service_add_human_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_add_idp_link
  # Add link to an identity provider to an user
  # Add link to an identity provider to an user..
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2AddIDPLinkResponse]
  describe 'user_service_add_idp_link test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_add_otp_email
  # Add OTP Email for a user
  # Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor..
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2AddOTPEmailResponse]
  describe 'user_service_add_otp_email test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_add_otpsms
  # Add OTP SMS for a user
  # Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor..
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2AddOTPSMSResponse]
  describe 'user_service_add_otpsms test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_create_invite_code
  # Create an invite code for a user
  # Create an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization&#39;s available methods.
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2CreateInviteCodeResponse]
  describe 'user_service_create_invite_code test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_create_passkey_registration_link
  # Create a passkey registration link for a user
  # Create a passkey registration link which includes a code and either return it or send it to the user..
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2CreatePasskeyRegistrationLinkResponse]
  describe 'user_service_create_passkey_registration_link test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_deactivate_user
  # Deactivate user
  # The state of the user will be changed to &#39;deactivated&#39;. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state &#39;deactivated&#39;. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data..
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2DeactivateUserResponse]
  describe 'user_service_deactivate_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_delete_user
  # Delete user
  # The state of the user will be changed to &#39;deleted&#39;. The user will not be able to log in anymore. Endpoints requesting this user will return an error &#39;User not found..
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2DeleteUserResponse]
  describe 'user_service_delete_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_get_user_by_id
  # User by ID
  # Returns the full user object (human or machine) including the profile, email, etc..
  # @param user_id User ID of the user you like to get.
  # @param [Hash] opts the optional parameters
  # @return [V2GetUserByIDResponse]
  describe 'user_service_get_user_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_human_mfa_init_skipped
  # MFA Init Skipped
  # Update the last time the user has skipped MFA initialization. The server timestamp is used.
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2HumanMFAInitSkippedResponse]
  describe 'user_service_human_mfa_init_skipped test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_list_authentication_factors
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :auth_factors Specify the Auth Factors you are interested in
  # @option opts [Array<String>] :states Specify the state of the Auth Factors
  # @return [V2ListAuthenticationFactorsResponse]
  describe 'user_service_list_authentication_factors test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_list_authentication_method_types
  # List all possible authentication methods of a user
  # List all possible authentication methods of a user like password, passwordless, (T)OTP and more..
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :domain_query_include_without_domain List also auth method types without domain information like passkey and U2F added through V1 APIs / Login UI.
  # @option opts [String] :domain_query_domain List only auth methods with specific domain.
  # @return [V2ListAuthenticationMethodTypesResponse]
  describe 'user_service_list_authentication_method_types test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_list_idp_links
  # List links to an identity provider of an user
  # List links to an identity provider of an user.
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2ListIDPLinksResponse]
  describe 'user_service_list_idp_links test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_list_passkeys
  # List passkeys of an user
  # List passkeys of an user
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2ListPasskeysResponse]
  describe 'user_service_list_passkeys test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_list_users
  # Search Users
  # Search for users. By default, we will return all users of your instance that you have permission to read. Make sure to include a limit and sorting for pagination.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2ListUsersResponse]
  describe 'user_service_list_users test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_lock_user
  # Lock user
  # The state of the user will be changed to &#39;locked&#39;. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state &#39;locked&#39;. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2LockUserResponse]
  describe 'user_service_lock_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_password_reset
  # Request a code to reset a password
  # Request a code to reset a password..
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2PasswordResetResponse]
  describe 'user_service_password_reset test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_reactivate_user
  # Reactivate user
  # Reactivate a user with the state &#39;deactivated&#39;. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state &#39;deactivated&#39;..
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2ReactivateUserResponse]
  describe 'user_service_reactivate_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_register_passkey
  # Start the registration of passkey for a user
  # Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey..
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2RegisterPasskeyResponse]
  describe 'user_service_register_passkey test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_register_totp
  # Start the registration of a TOTP generator for a user
  # Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device..
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2RegisterTOTPResponse]
  describe 'user_service_register_totp test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_register_u2_f
  # Start the registration of a u2f token for a user
  # Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token..
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2RegisterU2FResponse]
  describe 'user_service_register_u2_f test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_remove_idp_link
  # Remove link of an identity provider to an user
  # Remove link of an identity provider to an user.
  # @param user_id 
  # @param idp_id 
  # @param linked_user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2RemoveIDPLinkResponse]
  describe 'user_service_remove_idp_link test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_remove_otp_email
  # Remove One-Time Password (OTP) Email from a user
  # Remove the configured One-Time Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2RemoveOTPEmailResponse]
  describe 'user_service_remove_otp_email test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_remove_otpsms
  # Remove One-Time Password (OTP) SMS from a user
  # Remove the configured One-Time Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2RemoveOTPSMSResponse]
  describe 'user_service_remove_otpsms test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_remove_passkey
  # Remove passkey from a user
  # Remove passkey from a user.
  # @param user_id 
  # @param passkey_id 
  # @param [Hash] opts the optional parameters
  # @return [V2RemovePasskeyResponse]
  describe 'user_service_remove_passkey test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_remove_phone
  # Delete the user phone
  # Delete the phone number of a user.
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2RemovePhoneResponse]
  describe 'user_service_remove_phone test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_remove_totp
  # Remove TOTP generator from a user
  # Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second factor afterward.
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2RemoveTOTPResponse]
  describe 'user_service_remove_totp test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_remove_u2_f
  # Remove u2f token from a user
  # Remove u2f token from a user
  # @param user_id 
  # @param u2f_id 
  # @param [Hash] opts the optional parameters
  # @return [V2RemoveU2FResponse]
  describe 'user_service_remove_u2_f test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_resend_email_code
  # Resend code to verify user email
  # Resend code to verify user email.
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2ResendEmailCodeResponse]
  describe 'user_service_resend_email_code test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_resend_invite_code
  # Resend an invite code for a user
  # Resend an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization&#39;s available methods. A resend is only possible if a code has been created previously and sent to the user. If there is no code or it was directly returned, an error will be returned.
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2ResendInviteCodeResponse]
  describe 'user_service_resend_invite_code test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_resend_phone_code
  # Resend code to verify user phone
  # Resend code to verify user phone.
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2ResendPhoneCodeResponse]
  describe 'user_service_resend_phone_code test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_retrieve_identity_provider_intent
  # Retrieve the information returned by the identity provider
  # Retrieve the information returned by the identity provider for registration or updating an existing user with new information..
  # @param idp_intent_id ID of the idp intent, previously returned on the success response of the IDP callback
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2RetrieveIdentityProviderIntentResponse]
  describe 'user_service_retrieve_identity_provider_intent test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_send_email_code
  # Send code to verify user email
  # Send code to verify user email.
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2SendEmailCodeResponse]
  describe 'user_service_send_email_code test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_set_email
  # Change the user email
  # Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email..
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2SetEmailResponse]
  describe 'user_service_set_email test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_set_password
  # Change password
  # Change the password of a user with either a verification code or the current password..
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2SetPasswordResponse]
  describe 'user_service_set_password test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_set_phone
  # Set the user phone
  # Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms..
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2SetPhoneResponse]
  describe 'user_service_set_phone test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_start_identity_provider_intent
  # Start flow with an identity provider
  # Start a flow with an identity provider, for external login, registration or linking..
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2StartIdentityProviderIntentResponse]
  describe 'user_service_start_identity_provider_intent test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_unlock_user
  # Unlock user
  # The state of the user will be changed to &#39;locked&#39;. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state &#39;locked&#39;. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [V2UnlockUserResponse]
  describe 'user_service_unlock_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_update_human_user
  # Update User
  # Update all information from a user..
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2UpdateHumanUserResponse]
  describe 'user_service_update_human_user test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_verify_email
  # Verify the email
  # Verify the email with the generated code.
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2VerifyEmailResponse]
  describe 'user_service_verify_email test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_verify_invite_code
  # Verify an invite code for a user
  # Verify the invite code of a user previously issued. This will set their email to a verified state and allow the user to set up their first authentication method (password, passkeys, IdP) depending on the organization&#39;s available methods.
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2VerifyInviteCodeResponse]
  describe 'user_service_verify_invite_code test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_verify_passkey_registration
  # Verify a passkey for a user
  # Verify the passkey registration with the public key credential..
  # @param user_id 
  # @param passkey_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2VerifyPasskeyRegistrationResponse]
  describe 'user_service_verify_passkey_registration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_verify_phone
  # Verify the phone
  # Verify the phone with the generated code..
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2VerifyPhoneResponse]
  describe 'user_service_verify_phone test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_verify_totp_registration
  # Verify a TOTP generator for a user
  # Verify the TOTP registration with a generated code..
  # @param user_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2VerifyTOTPRegistrationResponse]
  describe 'user_service_verify_totp_registration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for user_service_verify_u2_f_registration
  # Verify a u2f token for a user
  # Verify the u2f token registration with the public key credential..
  # @param user_id 
  # @param u2f_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V2VerifyU2FRegistrationResponse]
  describe 'user_service_verify_u2_f_registration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
