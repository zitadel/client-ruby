=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module Zitadel::Client::Api
  class BetaAuthorizationServiceApi
  attr_accessor :api_client

  def initialize(api_client = ApiClient.default)
  @api_client = api_client
  end
      # ActivateAuthorization
      # Activate Authorization   ActivateAuthorization activates an existing but inactive authorization.   In case the authorization is already active, the request will return a successful response as  the desired state is already achieved.  You can check the change date in the response to verify if the authorization was activated by the request.   Required permissions:    - \&quot;user.grant.write\&quot;
          # @param beta_authorization_service_activate_authorization_request [BetaAuthorizationServiceActivateAuthorizationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaAuthorizationServiceActivateAuthorizationResponse]
    def activate_authorization(beta_authorization_service_activate_authorization_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaAuthorizationServiceApi.activate_authorization ...' # MODIFIED
    end
          # verify the required parameter 'beta_authorization_service_activate_authorization_request' is set
          if @api_client.config.client_side_validation && beta_authorization_service_activate_authorization_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_authorization_service_activate_authorization_request' when calling Api::BetaAuthorizationServiceApi.activate_authorization" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.authorization.v2beta.AuthorizationService/ActivateAuthorization'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_authorization_service_activate_authorization_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaAuthorizationServiceActivateAuthorizationResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaAuthorizationServiceApi.activate_authorization", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaAuthorizationServiceApi#activate_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # CreateAuthorization
      # Create Authorization   CreateAuthorization creates a new authorization for a user in an owned or granted project.   Required permissions:    - \&quot;user.grant.write\&quot;
          # @param beta_authorization_service_create_authorization_request [BetaAuthorizationServiceCreateAuthorizationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaAuthorizationServiceCreateAuthorizationResponse]
    def create_authorization(beta_authorization_service_create_authorization_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaAuthorizationServiceApi.create_authorization ...' # MODIFIED
    end
          # verify the required parameter 'beta_authorization_service_create_authorization_request' is set
          if @api_client.config.client_side_validation && beta_authorization_service_create_authorization_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_authorization_service_create_authorization_request' when calling Api::BetaAuthorizationServiceApi.create_authorization" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.authorization.v2beta.AuthorizationService/CreateAuthorization'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_authorization_service_create_authorization_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaAuthorizationServiceCreateAuthorizationResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaAuthorizationServiceApi.create_authorization", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaAuthorizationServiceApi#create_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # DeactivateAuthorization
      # Deactivate Authorization   DeactivateAuthorization deactivates an existing and active authorization.   In case the authorization is already inactive, the request will return a successful response as  the desired state is already achieved.  You can check the change date in the response to verify if the authorization was deactivated by the request.   Required permissions:    - \&quot;user.grant.write\&quot;
          # @param beta_authorization_service_deactivate_authorization_request [BetaAuthorizationServiceDeactivateAuthorizationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaAuthorizationServiceDeactivateAuthorizationResponse]
    def deactivate_authorization(beta_authorization_service_deactivate_authorization_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaAuthorizationServiceApi.deactivate_authorization ...' # MODIFIED
    end
          # verify the required parameter 'beta_authorization_service_deactivate_authorization_request' is set
          if @api_client.config.client_side_validation && beta_authorization_service_deactivate_authorization_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_authorization_service_deactivate_authorization_request' when calling Api::BetaAuthorizationServiceApi.deactivate_authorization" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.authorization.v2beta.AuthorizationService/DeactivateAuthorization'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_authorization_service_deactivate_authorization_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaAuthorizationServiceDeactivateAuthorizationResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaAuthorizationServiceApi.deactivate_authorization", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaAuthorizationServiceApi#deactivate_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # DeleteAuthorization
      # Delete Authorization   DeleteAuthorization deletes the authorization.   In case the authorization is not found, the request will return a successful response as  the desired state is already achieved.  You can check the deletion date in the response to verify if the authorization was deleted by the request.   Required permissions:    - \&quot;user.grant.delete\&quot;
          # @param beta_authorization_service_delete_authorization_request [BetaAuthorizationServiceDeleteAuthorizationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaAuthorizationServiceDeleteAuthorizationResponse]
    def delete_authorization(beta_authorization_service_delete_authorization_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaAuthorizationServiceApi.delete_authorization ...' # MODIFIED
    end
          # verify the required parameter 'beta_authorization_service_delete_authorization_request' is set
          if @api_client.config.client_side_validation && beta_authorization_service_delete_authorization_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_authorization_service_delete_authorization_request' when calling Api::BetaAuthorizationServiceApi.delete_authorization" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.authorization.v2beta.AuthorizationService/DeleteAuthorization'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_authorization_service_delete_authorization_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaAuthorizationServiceDeleteAuthorizationResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaAuthorizationServiceApi.delete_authorization", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaAuthorizationServiceApi#delete_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # ListAuthorizations
      # List Authorizations   ListAuthorizations returns all authorizations matching the request and necessary permissions.   Required permissions:    - \&quot;user.grant.read\&quot;    - no permissions required for listing own authorizations
          # @param beta_authorization_service_list_authorizations_request [BetaAuthorizationServiceListAuthorizationsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaAuthorizationServiceListAuthorizationsResponse]
    def list_authorizations(beta_authorization_service_list_authorizations_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaAuthorizationServiceApi.list_authorizations ...' # MODIFIED
    end
          # verify the required parameter 'beta_authorization_service_list_authorizations_request' is set
          if @api_client.config.client_side_validation && beta_authorization_service_list_authorizations_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_authorization_service_list_authorizations_request' when calling Api::BetaAuthorizationServiceApi.list_authorizations" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.authorization.v2beta.AuthorizationService/ListAuthorizations'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_authorization_service_list_authorizations_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaAuthorizationServiceListAuthorizationsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaAuthorizationServiceApi.list_authorizations", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaAuthorizationServiceApi#list_authorizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # UpdateAuthorization
      # Update Authorization   UpdateAuthorization updates the authorization.   Note that any role keys previously granted to the user and not present in the request will be revoked.   Required permissions:    - \&quot;user.grant.write\&quot;
          # @param beta_authorization_service_update_authorization_request [BetaAuthorizationServiceUpdateAuthorizationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaAuthorizationServiceUpdateAuthorizationResponse]
    def update_authorization(beta_authorization_service_update_authorization_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaAuthorizationServiceApi.update_authorization ...' # MODIFIED
    end
          # verify the required parameter 'beta_authorization_service_update_authorization_request' is set
          if @api_client.config.client_side_validation && beta_authorization_service_update_authorization_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_authorization_service_update_authorization_request' when calling Api::BetaAuthorizationServiceApi.update_authorization" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.authorization.v2beta.AuthorizationService/UpdateAuthorization'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_authorization_service_update_authorization_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaAuthorizationServiceUpdateAuthorizationResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaAuthorizationServiceApi.update_authorization", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaAuthorizationServiceApi#update_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end
  end
end
