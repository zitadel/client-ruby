=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Zitadel::Client
module Api # Added Api module
  class OIDCServiceApi
  attr_accessor :api_client

  def initialize(api_client = ApiClient.default)
  @api_client = api_client
  end
      # Authorize or deny device authorization
      # Authorize or deny the device authorization request based on the provided device authorization id.
          # @param device_authorization_id [String] The device authorization id returned when submitting the user code.
          # @param oidc_service_authorize_or_deny_device_authorization_request [OIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest]
      # @param [Hash] opts the optional parameters
    # @return [Object]
    def o_idc_service_authorize_or_deny_device_authorization(device_authorization_id, oidc_service_authorize_or_deny_device_authorization_request, opts = {})
    data, _status_code, _headers = o_idc_service_authorize_or_deny_device_authorization_with_http_info(device_authorization_id, oidc_service_authorize_or_deny_device_authorization_request, opts)
    data
    end

      # Authorize or deny device authorization
      # Authorize or deny the device authorization request based on the provided device authorization id.
          # @param device_authorization_id [String] The device authorization id returned when submitting the user code.
          # @param oidc_service_authorize_or_deny_device_authorization_request [OIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest]
      # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def o_idc_service_authorize_or_deny_device_authorization_with_http_info(device_authorization_id, oidc_service_authorize_or_deny_device_authorization_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::OIDCServiceApi.o_idc_service_authorize_or_deny_device_authorization ...' # MODIFIED
    end
          # verify the required parameter 'device_authorization_id' is set
          if @api_client.config.client_side_validation && device_authorization_id.nil?
          fail ArgumentError, "Missing the required parameter 'device_authorization_id' when calling Api::OIDCServiceApi.o_idc_service_authorize_or_deny_device_authorization" # MODIFIED
          end
          # verify the required parameter 'oidc_service_authorize_or_deny_device_authorization_request' is set
          if @api_client.config.client_side_validation && oidc_service_authorize_or_deny_device_authorization_request.nil?
          fail ArgumentError, "Missing the required parameter 'oidc_service_authorize_or_deny_device_authorization_request' when calling Api::OIDCServiceApi.o_idc_service_authorize_or_deny_device_authorization" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/oidc/device_authorization/{deviceAuthorizationId}'.sub('{' + 'deviceAuthorizationId' + '}', CGI.escape(device_authorization_id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(oidc_service_authorize_or_deny_device_authorization_request)

    # return_type
    return_type = opts[:debug_return_type] || 'Object'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::OIDCServiceApi.o_idc_service_authorize_or_deny_device_authorization", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::OIDCServiceApi#o_idc_service_authorize_or_deny_device_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # Finalize an Auth Request and get the callback URL.
      # Finalize an Auth Request and get the callback URL for success or failure. The user must be redirected to the URL in order to inform the application about the success or failure. On success, the URL contains details for the application to obtain the tokens. This method can only be called once for an Auth request.
          # @param auth_request_id [String] ID of the Auth Request.
          # @param oidc_service_create_callback_request [OIDCServiceCreateCallbackRequest]
      # @param [Hash] opts the optional parameters
    # @return [OIDCServiceCreateCallbackResponse]
    def o_idc_service_create_callback(auth_request_id, oidc_service_create_callback_request, opts = {})
    data, _status_code, _headers = o_idc_service_create_callback_with_http_info(auth_request_id, oidc_service_create_callback_request, opts)
    data
    end

      # Finalize an Auth Request and get the callback URL.
      # Finalize an Auth Request and get the callback URL for success or failure. The user must be redirected to the URL in order to inform the application about the success or failure. On success, the URL contains details for the application to obtain the tokens. This method can only be called once for an Auth request.
          # @param auth_request_id [String] ID of the Auth Request.
          # @param oidc_service_create_callback_request [OIDCServiceCreateCallbackRequest]
      # @param [Hash] opts the optional parameters
    # @return [Array<(OIDCServiceCreateCallbackResponse, Integer, Hash)>] OIDCServiceCreateCallbackResponse data, response status code and response headers
    def o_idc_service_create_callback_with_http_info(auth_request_id, oidc_service_create_callback_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::OIDCServiceApi.o_idc_service_create_callback ...' # MODIFIED
    end
          # verify the required parameter 'auth_request_id' is set
          if @api_client.config.client_side_validation && auth_request_id.nil?
          fail ArgumentError, "Missing the required parameter 'auth_request_id' when calling Api::OIDCServiceApi.o_idc_service_create_callback" # MODIFIED
          end
          # verify the required parameter 'oidc_service_create_callback_request' is set
          if @api_client.config.client_side_validation && oidc_service_create_callback_request.nil?
          fail ArgumentError, "Missing the required parameter 'oidc_service_create_callback_request' when calling Api::OIDCServiceApi.o_idc_service_create_callback" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/oidc/auth_requests/{authRequestId}'.sub('{' + 'authRequestId' + '}', CGI.escape(auth_request_id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(oidc_service_create_callback_request)

    # return_type
    return_type = opts[:debug_return_type] || 'OIDCServiceCreateCallbackResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::OIDCServiceApi.o_idc_service_create_callback", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::OIDCServiceApi#o_idc_service_create_callback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # Get OIDC Auth Request details
      # Get OIDC Auth Request details by ID, obtained from the redirect URL. Returns details that are parsed from the application's Auth Request.
          # @param auth_request_id [String] ID of the Auth Request, as obtained from the redirect URL.
      # @param [Hash] opts the optional parameters
    # @return [OIDCServiceGetAuthRequestResponse]
    def o_idc_service_get_auth_request(auth_request_id, opts = {})
    data, _status_code, _headers = o_idc_service_get_auth_request_with_http_info(auth_request_id, opts)
    data
    end

      # Get OIDC Auth Request details
      # Get OIDC Auth Request details by ID, obtained from the redirect URL. Returns details that are parsed from the application&#39;s Auth Request.
          # @param auth_request_id [String] ID of the Auth Request, as obtained from the redirect URL.
      # @param [Hash] opts the optional parameters
    # @return [Array<(OIDCServiceGetAuthRequestResponse, Integer, Hash)>] OIDCServiceGetAuthRequestResponse data, response status code and response headers
    def o_idc_service_get_auth_request_with_http_info(auth_request_id, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::OIDCServiceApi.o_idc_service_get_auth_request ...' # MODIFIED
    end
          # verify the required parameter 'auth_request_id' is set
          if @api_client.config.client_side_validation && auth_request_id.nil?
          fail ArgumentError, "Missing the required parameter 'auth_request_id' when calling Api::OIDCServiceApi.o_idc_service_get_auth_request" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/oidc/auth_requests/{authRequestId}'.sub('{' + 'authRequestId' + '}', CGI.escape(auth_request_id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'OIDCServiceGetAuthRequestResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::OIDCServiceApi.o_idc_service_get_auth_request", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::OIDCServiceApi#o_idc_service_get_auth_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # Get device authorization request
      # Get the device authorization based on the provided \"user code\". This will return the device authorization request, which contains the device authorization id that is required to authorize the request once the user signed in or to deny it.
          # @param user_code [String] The user_code returned by the device authorization request and provided to the user by the device.
      # @param [Hash] opts the optional parameters
    # @return [OIDCServiceGetDeviceAuthorizationRequestResponse]
    def o_idc_service_get_device_authorization_request(user_code, opts = {})
    data, _status_code, _headers = o_idc_service_get_device_authorization_request_with_http_info(user_code, opts)
    data
    end

      # Get device authorization request
      # Get the device authorization based on the provided \&quot;user code\&quot;. This will return the device authorization request, which contains the device authorization id that is required to authorize the request once the user signed in or to deny it.
          # @param user_code [String] The user_code returned by the device authorization request and provided to the user by the device.
      # @param [Hash] opts the optional parameters
    # @return [Array<(OIDCServiceGetDeviceAuthorizationRequestResponse, Integer, Hash)>] OIDCServiceGetDeviceAuthorizationRequestResponse data, response status code and response headers
    def o_idc_service_get_device_authorization_request_with_http_info(user_code, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::OIDCServiceApi.o_idc_service_get_device_authorization_request ...' # MODIFIED
    end
          # verify the required parameter 'user_code' is set
          if @api_client.config.client_side_validation && user_code.nil?
          fail ArgumentError, "Missing the required parameter 'user_code' when calling Api::OIDCServiceApi.o_idc_service_get_device_authorization_request" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/oidc/device_authorization/{userCode}'.sub('{' + 'userCode' + '}', CGI.escape(user_code.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'OIDCServiceGetDeviceAuthorizationRequestResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::OIDCServiceApi.o_idc_service_get_device_authorization_request", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::OIDCServiceApi#o_idc_service_get_device_authorization_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end
  end
end # End of Api module
end
