=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module Zitadel::Client::Api
  class BetaSessionServiceApi
  attr_accessor :api_client

  def initialize(api_client = ApiClient.default)
  @api_client = api_client
  end
      # CreateSession
      # Create a new session
          # @param beta_session_service_create_session_request [BetaSessionServiceCreateSessionRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaSessionServiceCreateSessionResponse]
    def create_session(beta_session_service_create_session_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaSessionServiceApi.create_session ...' # MODIFIED
    end
          # verify the required parameter 'beta_session_service_create_session_request' is set
          if @api_client.config.client_side_validation && beta_session_service_create_session_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_session_service_create_session_request' when calling Api::BetaSessionServiceApi.create_session" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.session.v2beta.SessionService/CreateSession'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_session_service_create_session_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaSessionServiceCreateSessionResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaSessionServiceApi.create_session", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaSessionServiceApi#create_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # DeleteSession
      # Terminate a session
          # @param beta_session_service_delete_session_request [BetaSessionServiceDeleteSessionRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaSessionServiceDeleteSessionResponse]
    def delete_session(beta_session_service_delete_session_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaSessionServiceApi.delete_session ...' # MODIFIED
    end
          # verify the required parameter 'beta_session_service_delete_session_request' is set
          if @api_client.config.client_side_validation && beta_session_service_delete_session_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_session_service_delete_session_request' when calling Api::BetaSessionServiceApi.delete_session" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.session.v2beta.SessionService/DeleteSession'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_session_service_delete_session_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaSessionServiceDeleteSessionResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaSessionServiceApi.delete_session", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaSessionServiceApi#delete_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # GetSession
      # GetSession a session
          # @param beta_session_service_get_session_request [BetaSessionServiceGetSessionRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaSessionServiceGetSessionResponse]
    def get_session(beta_session_service_get_session_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaSessionServiceApi.get_session ...' # MODIFIED
    end
          # verify the required parameter 'beta_session_service_get_session_request' is set
          if @api_client.config.client_side_validation && beta_session_service_get_session_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_session_service_get_session_request' when calling Api::BetaSessionServiceApi.get_session" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.session.v2beta.SessionService/GetSession'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_session_service_get_session_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaSessionServiceGetSessionResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaSessionServiceApi.get_session", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaSessionServiceApi#get_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # ListSessions
      # Search sessions
          # @param beta_session_service_list_sessions_request [BetaSessionServiceListSessionsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaSessionServiceListSessionsResponse]
    def list_sessions(beta_session_service_list_sessions_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaSessionServiceApi.list_sessions ...' # MODIFIED
    end
          # verify the required parameter 'beta_session_service_list_sessions_request' is set
          if @api_client.config.client_side_validation && beta_session_service_list_sessions_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_session_service_list_sessions_request' when calling Api::BetaSessionServiceApi.list_sessions" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.session.v2beta.SessionService/ListSessions'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_session_service_list_sessions_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaSessionServiceListSessionsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaSessionServiceApi.list_sessions", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaSessionServiceApi#list_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # SetSession
      # Update a session
          # @param beta_session_service_set_session_request [BetaSessionServiceSetSessionRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaSessionServiceSetSessionResponse]
    def set_session(beta_session_service_set_session_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaSessionServiceApi.set_session ...' # MODIFIED
    end
          # verify the required parameter 'beta_session_service_set_session_request' is set
          if @api_client.config.client_side_validation && beta_session_service_set_session_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_session_service_set_session_request' when calling Api::BetaSessionServiceApi.set_session" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.session.v2beta.SessionService/SetSession'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_session_service_set_session_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaSessionServiceSetSessionResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaSessionServiceApi.set_session", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaSessionServiceApi#set_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end
  end
end
