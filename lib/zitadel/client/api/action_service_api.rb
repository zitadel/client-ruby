=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Zitadel::Client::Api
  class ActionServiceApi
  attr_accessor :api_client

  def initialize(api_client = ApiClient.default)
  @api_client = api_client
  end
      # Create Target
      # Create a new target to your endpoint, which can be used in executions.  Required permission:   - `action.target.write`  Required feature flag:   - `actions`
          # @param action_service_create_target_request [ActionServiceCreateTargetRequest] 
      # @param [Hash] opts the optional parameters
    # @return [ActionServiceBetaCreateTargetResponse]
    def action_service_create_target(action_service_create_target_request, opts = {})
    data, _status_code, _headers = action_service_create_target_with_http_info(action_service_create_target_request, opts)
    data
    end

      # Create Target
      # Create a new target to your endpoint, which can be used in executions.  Required permission:   - &#x60;action.target.write&#x60;  Required feature flag:   - &#x60;actions&#x60;
          # @param action_service_create_target_request [ActionServiceCreateTargetRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(ActionServiceBetaCreateTargetResponse, Integer, Hash)>] ActionServiceBetaCreateTargetResponse data, response status code and response headers
    def action_service_create_target_with_http_info(action_service_create_target_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::ActionServiceApi.action_service_create_target ...' # MODIFIED
    end
          # verify the required parameter 'action_service_create_target_request' is set
          if @api_client.config.client_side_validation && action_service_create_target_request.nil?
          fail ArgumentError, "Missing the required parameter 'action_service_create_target_request' when calling Api::ActionServiceApi.action_service_create_target" # MODIFIED
          end
    # resource path
    local_var_path = '/v2beta/actions/targets'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(action_service_create_target_request)

    # return_type
    return_type = opts[:debug_return_type] || 'ActionServiceBetaCreateTargetResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::ActionServiceApi.action_service_create_target", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::ActionServiceApi#action_service_create_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # Delete Target
      # Delete an existing target. This will remove it from any configured execution as well. In case the target is not found, the request will return a successful response as the desired state is already achieved.  Required permission:   - `action.target.delete`  Required feature flag:   - `actions`
          # @param id [String] 
      # @param [Hash] opts the optional parameters
    # @return [ActionServiceBetaDeleteTargetResponse]
    def action_service_delete_target(id, opts = {})
    data, _status_code, _headers = action_service_delete_target_with_http_info(id, opts)
    data
    end

      # Delete Target
      # Delete an existing target. This will remove it from any configured execution as well. In case the target is not found, the request will return a successful response as the desired state is already achieved.  Required permission:   - &#x60;action.target.delete&#x60;  Required feature flag:   - &#x60;actions&#x60;
          # @param id [String] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(ActionServiceBetaDeleteTargetResponse, Integer, Hash)>] ActionServiceBetaDeleteTargetResponse data, response status code and response headers
    def action_service_delete_target_with_http_info(id, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::ActionServiceApi.action_service_delete_target ...' # MODIFIED
    end
          # verify the required parameter 'id' is set
          if @api_client.config.client_side_validation && id.nil?
          fail ArgumentError, "Missing the required parameter 'id' when calling Api::ActionServiceApi.action_service_delete_target" # MODIFIED
          end
    # resource path
    local_var_path = '/v2beta/actions/targets/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'ActionServiceBetaDeleteTargetResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::ActionServiceApi.action_service_delete_target", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::ActionServiceApi#action_service_delete_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # Get Target
      # Returns the target identified by the requested ID.  Required permission:   - `action.target.read`  Required feature flag:   - `actions`
          # @param id [String] 
      # @param [Hash] opts the optional parameters
    # @return [ActionServiceBetaGetTargetResponse]
    def action_service_get_target(id, opts = {})
    data, _status_code, _headers = action_service_get_target_with_http_info(id, opts)
    data
    end

      # Get Target
      # Returns the target identified by the requested ID.  Required permission:   - &#x60;action.target.read&#x60;  Required feature flag:   - &#x60;actions&#x60;
          # @param id [String] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(ActionServiceBetaGetTargetResponse, Integer, Hash)>] ActionServiceBetaGetTargetResponse data, response status code and response headers
    def action_service_get_target_with_http_info(id, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::ActionServiceApi.action_service_get_target ...' # MODIFIED
    end
          # verify the required parameter 'id' is set
          if @api_client.config.client_side_validation && id.nil?
          fail ArgumentError, "Missing the required parameter 'id' when calling Api::ActionServiceApi.action_service_get_target" # MODIFIED
          end
    # resource path
    local_var_path = '/v2beta/actions/targets/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'ActionServiceBetaGetTargetResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::ActionServiceApi.action_service_get_target", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::ActionServiceApi#action_service_get_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # List Execution Functions
      # List all available functions which can be used as condition for executions.
      # @param [Hash] opts the optional parameters
    # @return [ActionServiceBetaListExecutionFunctionsResponse]
    def action_service_list_execution_functions(opts = {})
    data, _status_code, _headers = action_service_list_execution_functions_with_http_info(opts)
    data
    end

      # List Execution Functions
      # List all available functions which can be used as condition for executions.
      # @param [Hash] opts the optional parameters
    # @return [Array<(ActionServiceBetaListExecutionFunctionsResponse, Integer, Hash)>] ActionServiceBetaListExecutionFunctionsResponse data, response status code and response headers
    def action_service_list_execution_functions_with_http_info(opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::ActionServiceApi.action_service_list_execution_functions ...' # MODIFIED
    end
    # resource path
    local_var_path = '/v2beta/actions/executions/functions'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'ActionServiceBetaListExecutionFunctionsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::ActionServiceApi.action_service_list_execution_functions", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::ActionServiceApi#action_service_list_execution_functions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # List Execution Methods
      # List all available methods which can be used as condition for executions.
      # @param [Hash] opts the optional parameters
    # @return [ActionServiceBetaListExecutionMethodsResponse]
    def action_service_list_execution_methods(opts = {})
    data, _status_code, _headers = action_service_list_execution_methods_with_http_info(opts)
    data
    end

      # List Execution Methods
      # List all available methods which can be used as condition for executions.
      # @param [Hash] opts the optional parameters
    # @return [Array<(ActionServiceBetaListExecutionMethodsResponse, Integer, Hash)>] ActionServiceBetaListExecutionMethodsResponse data, response status code and response headers
    def action_service_list_execution_methods_with_http_info(opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::ActionServiceApi.action_service_list_execution_methods ...' # MODIFIED
    end
    # resource path
    local_var_path = '/v2beta/actions/executions/methods'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'ActionServiceBetaListExecutionMethodsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::ActionServiceApi.action_service_list_execution_methods", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::ActionServiceApi#action_service_list_execution_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # List Execution Services
      # List all available services which can be used as condition for executions.
      # @param [Hash] opts the optional parameters
    # @return [ActionServiceBetaListExecutionServicesResponse]
    def action_service_list_execution_services(opts = {})
    data, _status_code, _headers = action_service_list_execution_services_with_http_info(opts)
    data
    end

      # List Execution Services
      # List all available services which can be used as condition for executions.
      # @param [Hash] opts the optional parameters
    # @return [Array<(ActionServiceBetaListExecutionServicesResponse, Integer, Hash)>] ActionServiceBetaListExecutionServicesResponse data, response status code and response headers
    def action_service_list_execution_services_with_http_info(opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::ActionServiceApi.action_service_list_execution_services ...' # MODIFIED
    end
    # resource path
    local_var_path = '/v2beta/actions/executions/services'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'ActionServiceBetaListExecutionServicesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::ActionServiceApi.action_service_list_execution_services", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::ActionServiceApi#action_service_list_execution_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # List Executions
      # List all matching executions. By default all executions of the instance are returned that have at least one execution target. Make sure to include a limit and sorting for pagination.  Required permission:   - `action.execution.read`  Required feature flag:   - `actions`
      # @param [Hash] opts the optional parameters
        # @option opts [String] :pagination_offset Starting point for retrieval, in combination of offset used to query a set list of objects.
        # @option opts [Integer] :pagination_limit limit is the maximum amount of objects returned. The default is set to 100 with a maximum of 1000 in the runtime configuration. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken.
        # @option opts [Boolean] :pagination_asc Asc is the sorting order. If true the list is sorted ascending, if false the list is sorted descending. The default is descending.
        # @option opts [String] :sorting_column The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (default to 'EXECUTION_FIELD_NAME_UNSPECIFIED')
    # @return [ActionServiceBetaListExecutionsResponse]
    def action_service_list_executions(opts = {})
    data, _status_code, _headers = action_service_list_executions_with_http_info(opts)
    data
    end

      # List Executions
      # List all matching executions. By default all executions of the instance are returned that have at least one execution target. Make sure to include a limit and sorting for pagination.  Required permission:   - &#x60;action.execution.read&#x60;  Required feature flag:   - &#x60;actions&#x60;
      # @param [Hash] opts the optional parameters
        # @option opts [String] :pagination_offset Starting point for retrieval, in combination of offset used to query a set list of objects.
        # @option opts [Integer] :pagination_limit limit is the maximum amount of objects returned. The default is set to 100 with a maximum of 1000 in the runtime configuration. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken.
        # @option opts [Boolean] :pagination_asc Asc is the sorting order. If true the list is sorted ascending, if false the list is sorted descending. The default is descending.
        # @option opts [String] :sorting_column The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (default to 'EXECUTION_FIELD_NAME_UNSPECIFIED')
    # @return [Array<(ActionServiceBetaListExecutionsResponse, Integer, Hash)>] ActionServiceBetaListExecutionsResponse data, response status code and response headers
    def action_service_list_executions_with_http_info(opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::ActionServiceApi.action_service_list_executions ...' # MODIFIED
    end
            allowable_values = ["EXECUTION_FIELD_NAME_UNSPECIFIED", "EXECUTION_FIELD_NAME_ID", "EXECUTION_FIELD_NAME_CREATED_DATE", "EXECUTION_FIELD_NAME_CHANGED_DATE"]
            if @api_client.config.client_side_validation && opts[:'sorting_column'] && !allowable_values.include?(opts[:'sorting_column'])
            fail ArgumentError, "invalid value for \"sorting_column\", must be one of #{allowable_values}"
            end
    # resource path
    local_var_path = '/v2beta/actions/executions/_search'

    # query parameters
    query_params = opts[:query_params] || {}
        query_params[:'pagination.offset'] = opts[:'pagination_offset'] if !opts[:'pagination_offset'].nil?
        query_params[:'pagination.limit'] = opts[:'pagination_limit'] if !opts[:'pagination_limit'].nil?
        query_params[:'pagination.asc'] = opts[:'pagination_asc'] if !opts[:'pagination_asc'].nil?
        query_params[:'sortingColumn'] = opts[:'sorting_column'] if !opts[:'sorting_column'].nil?

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'ActionServiceBetaListExecutionsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::ActionServiceApi.action_service_list_executions", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::ActionServiceApi#action_service_list_executions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # List targets
      # List all matching targets. By default all targets of the instance are returned. Make sure to include a limit and sorting for pagination.  Required permission:   - `action.target.read`  Required feature flag:   - `actions`
          # @param action_service_list_targets_request [ActionServiceListTargetsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [ActionServiceBetaListTargetsResponse]
    def action_service_list_targets(action_service_list_targets_request, opts = {})
    data, _status_code, _headers = action_service_list_targets_with_http_info(action_service_list_targets_request, opts)
    data
    end

      # List targets
      # List all matching targets. By default all targets of the instance are returned. Make sure to include a limit and sorting for pagination.  Required permission:   - &#x60;action.target.read&#x60;  Required feature flag:   - &#x60;actions&#x60;
          # @param action_service_list_targets_request [ActionServiceListTargetsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(ActionServiceBetaListTargetsResponse, Integer, Hash)>] ActionServiceBetaListTargetsResponse data, response status code and response headers
    def action_service_list_targets_with_http_info(action_service_list_targets_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::ActionServiceApi.action_service_list_targets ...' # MODIFIED
    end
          # verify the required parameter 'action_service_list_targets_request' is set
          if @api_client.config.client_side_validation && action_service_list_targets_request.nil?
          fail ArgumentError, "Missing the required parameter 'action_service_list_targets_request' when calling Api::ActionServiceApi.action_service_list_targets" # MODIFIED
          end
    # resource path
    local_var_path = '/v2beta/actions/targets/_search'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(action_service_list_targets_request)

    # return_type
    return_type = opts[:debug_return_type] || 'ActionServiceBetaListTargetsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::ActionServiceApi.action_service_list_targets", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::ActionServiceApi#action_service_list_targets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # Set Execution
      # Sets an execution to call a target or include the targets of another execution. Setting an empty list of targets will remove all targets from the execution, making it a noop.  Required permission:   - `action.execution.write`  Required feature flag:   - `actions`
          # @param action_service_set_execution_request [ActionServiceSetExecutionRequest] 
      # @param [Hash] opts the optional parameters
    # @return [ActionServiceBetaSetExecutionResponse]
    def action_service_set_execution(action_service_set_execution_request, opts = {})
    data, _status_code, _headers = action_service_set_execution_with_http_info(action_service_set_execution_request, opts)
    data
    end

      # Set Execution
      # Sets an execution to call a target or include the targets of another execution. Setting an empty list of targets will remove all targets from the execution, making it a noop.  Required permission:   - &#x60;action.execution.write&#x60;  Required feature flag:   - &#x60;actions&#x60;
          # @param action_service_set_execution_request [ActionServiceSetExecutionRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(ActionServiceBetaSetExecutionResponse, Integer, Hash)>] ActionServiceBetaSetExecutionResponse data, response status code and response headers
    def action_service_set_execution_with_http_info(action_service_set_execution_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::ActionServiceApi.action_service_set_execution ...' # MODIFIED
    end
          # verify the required parameter 'action_service_set_execution_request' is set
          if @api_client.config.client_side_validation && action_service_set_execution_request.nil?
          fail ArgumentError, "Missing the required parameter 'action_service_set_execution_request' when calling Api::ActionServiceApi.action_service_set_execution" # MODIFIED
          end
    # resource path
    local_var_path = '/v2beta/actions/executions'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(action_service_set_execution_request)

    # return_type
    return_type = opts[:debug_return_type] || 'ActionServiceBetaSetExecutionResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::ActionServiceApi.action_service_set_execution", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::ActionServiceApi#action_service_set_execution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # Update Target
      # Update an existing target. To generate a new signing key set the optional expirationSigningKey.  Required permission:   - `action.target.write`  Required feature flag:   - `actions`
          # @param id [String] 
          # @param action_service_update_target_request [ActionServiceUpdateTargetRequest] 
      # @param [Hash] opts the optional parameters
    # @return [ActionServiceBetaUpdateTargetResponse]
    def action_service_update_target(id, action_service_update_target_request, opts = {})
    data, _status_code, _headers = action_service_update_target_with_http_info(id, action_service_update_target_request, opts)
    data
    end

      # Update Target
      # Update an existing target. To generate a new signing key set the optional expirationSigningKey.  Required permission:   - &#x60;action.target.write&#x60;  Required feature flag:   - &#x60;actions&#x60;
          # @param id [String] 
          # @param action_service_update_target_request [ActionServiceUpdateTargetRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(ActionServiceBetaUpdateTargetResponse, Integer, Hash)>] ActionServiceBetaUpdateTargetResponse data, response status code and response headers
    def action_service_update_target_with_http_info(id, action_service_update_target_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::ActionServiceApi.action_service_update_target ...' # MODIFIED
    end
          # verify the required parameter 'id' is set
          if @api_client.config.client_side_validation && id.nil?
          fail ArgumentError, "Missing the required parameter 'id' when calling Api::ActionServiceApi.action_service_update_target" # MODIFIED
          end
          # verify the required parameter 'action_service_update_target_request' is set
          if @api_client.config.client_side_validation && action_service_update_target_request.nil?
          fail ArgumentError, "Missing the required parameter 'action_service_update_target_request' when calling Api::ActionServiceApi.action_service_update_target" # MODIFIED
          end
    # resource path
    local_var_path = '/v2beta/actions/targets/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(action_service_update_target_request)

    # return_type
    return_type = opts[:debug_return_type] || 'ActionServiceBetaUpdateTargetResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::ActionServiceApi.action_service_update_target", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::ActionServiceApi#action_service_update_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end
  end
end
