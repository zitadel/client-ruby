=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module Zitadel::Client::Api
  class BetaInternalPermissionServiceApi
  attr_accessor :api_client

  def initialize(api_client = ApiClient.default)
  @api_client = api_client
  end
      # CreateAdministrator
      # CreateAdministrator grants a administrator role to a user for a specific resource.   Note that the roles are specific to the resource type.  This means that if you want to grant a user the administrator role for an organization and a project,  you need to create two administrator roles.   Required permissions depend on the resource type:    - \&quot;iam.member.write\&quot; for instance administrators    - \&quot;org.member.write\&quot; for organization administrators    - \&quot;project.member.write\&quot; for project administrators    - \&quot;project.grant.member.write\&quot; for project grant administrators
          # @param beta_internal_permission_service_create_administrator_request [BetaInternalPermissionServiceCreateAdministratorRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaInternalPermissionServiceCreateAdministratorResponse]
    def create_administrator(beta_internal_permission_service_create_administrator_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaInternalPermissionServiceApi.create_administrator ...' # MODIFIED
    end
          # verify the required parameter 'beta_internal_permission_service_create_administrator_request' is set
          if @api_client.config.client_side_validation && beta_internal_permission_service_create_administrator_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_internal_permission_service_create_administrator_request' when calling Api::BetaInternalPermissionServiceApi.create_administrator" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.internal_permission.v2beta.InternalPermissionService/CreateAdministrator'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_internal_permission_service_create_administrator_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaInternalPermissionServiceCreateAdministratorResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaInternalPermissionServiceApi.create_administrator", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaInternalPermissionServiceApi#create_administrator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # DeleteAdministrator
      # DeleteAdministrator revokes a administrator role from a user.   In case the administrator role is not found, the request will return a successful response as  the desired state is already achieved.  You can check the deletion date in the response to verify if the administrator role was deleted during the request.   Required permissions depend on the resource type:    - \&quot;iam.member.delete\&quot; for instance administrators    - \&quot;org.member.delete\&quot; for organization administrators    - \&quot;project.member.delete\&quot; for project administrators    - \&quot;project.grant.member.delete\&quot; for project grant administrators
          # @param beta_internal_permission_service_delete_administrator_request [BetaInternalPermissionServiceDeleteAdministratorRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaInternalPermissionServiceDeleteAdministratorResponse]
    def delete_administrator(beta_internal_permission_service_delete_administrator_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaInternalPermissionServiceApi.delete_administrator ...' # MODIFIED
    end
          # verify the required parameter 'beta_internal_permission_service_delete_administrator_request' is set
          if @api_client.config.client_side_validation && beta_internal_permission_service_delete_administrator_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_internal_permission_service_delete_administrator_request' when calling Api::BetaInternalPermissionServiceApi.delete_administrator" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.internal_permission.v2beta.InternalPermissionService/DeleteAdministrator'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_internal_permission_service_delete_administrator_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaInternalPermissionServiceDeleteAdministratorResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaInternalPermissionServiceApi.delete_administrator", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaInternalPermissionServiceApi#delete_administrator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # ListAdministrators
      # ListAdministrators returns all administrators and its roles matching the request and necessary permissions.   Required permissions depend on the resource type:    - \&quot;iam.member.read\&quot; for instance administrators    - \&quot;org.member.read\&quot; for organization administrators    - \&quot;project.member.read\&quot; for project administrators    - \&quot;project.grant.member.read\&quot; for project grant administrators    - no permissions required for listing own administrator roles
          # @param beta_internal_permission_service_list_administrators_request [BetaInternalPermissionServiceListAdministratorsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaInternalPermissionServiceListAdministratorsResponse]
    def list_administrators(beta_internal_permission_service_list_administrators_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaInternalPermissionServiceApi.list_administrators ...' # MODIFIED
    end
          # verify the required parameter 'beta_internal_permission_service_list_administrators_request' is set
          if @api_client.config.client_side_validation && beta_internal_permission_service_list_administrators_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_internal_permission_service_list_administrators_request' when calling Api::BetaInternalPermissionServiceApi.list_administrators" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.internal_permission.v2beta.InternalPermissionService/ListAdministrators'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_internal_permission_service_list_administrators_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaInternalPermissionServiceListAdministratorsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaInternalPermissionServiceApi.list_administrators", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaInternalPermissionServiceApi#list_administrators\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # UpdateAdministrator
      # UpdateAdministrator updates the specific administrator role.   Note that any role previously granted to the user and not present in the request will be revoked.   Required permissions depend on the resource type:    - \&quot;iam.member.write\&quot; for instance administrators    - \&quot;org.member.write\&quot; for organization administrators    - \&quot;project.member.write\&quot; for project administrators    - \&quot;project.grant.member.write\&quot; for project grant administrators
          # @param beta_internal_permission_service_update_administrator_request [BetaInternalPermissionServiceUpdateAdministratorRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaInternalPermissionServiceUpdateAdministratorResponse]
    def update_administrator(beta_internal_permission_service_update_administrator_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaInternalPermissionServiceApi.update_administrator ...' # MODIFIED
    end
          # verify the required parameter 'beta_internal_permission_service_update_administrator_request' is set
          if @api_client.config.client_side_validation && beta_internal_permission_service_update_administrator_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_internal_permission_service_update_administrator_request' when calling Api::BetaInternalPermissionServiceApi.update_administrator" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.internal_permission.v2beta.InternalPermissionService/UpdateAdministrator'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_internal_permission_service_update_administrator_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaInternalPermissionServiceUpdateAdministratorResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaInternalPermissionServiceApi.update_administrator", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaInternalPermissionServiceApi#update_administrator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end
  end
end
