=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Zitadel::Client::Api
  class BetaUserServiceApi
  attr_accessor :api_client

  def initialize(api_client = ApiClient.default)
  @api_client = api_client
  end
      # AddHumanUser
      # Create a new human user   Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.   Deprecated: please move to the corresponding endpoint under user service v2 (GA)
          # @param beta_user_service_add_human_user_request [BetaUserServiceAddHumanUserRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceAddHumanUserResponse]
    def add_human_user(beta_user_service_add_human_user_request, opts = {})
    data, _status_code, _headers = add_human_user_with_http_info(beta_user_service_add_human_user_request, opts)
    data
    end

      # AddHumanUser
      # Create a new human user   Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.   Deprecated: please move to the corresponding endpoint under user service v2 (GA)
          # @param beta_user_service_add_human_user_request [BetaUserServiceAddHumanUserRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceAddHumanUserResponse, Integer, Hash)>] BetaUserServiceAddHumanUserResponse data, response status code and response headers
    def add_human_user_with_http_info(beta_user_service_add_human_user_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.add_human_user ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_add_human_user_request' is set
          if @api_client.config.client_side_validation && beta_user_service_add_human_user_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_add_human_user_request' when calling Api::BetaUserServiceApi.add_human_user" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/AddHumanUser'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_add_human_user_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceAddHumanUserResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.add_human_user", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#add_human_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # AddIDPLink
      # Add link to an identity provider to an user   Add link to an identity provider to an user.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_add_idp_link_request [BetaUserServiceAddIDPLinkRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceAddIDPLinkResponse]
    def add_idp_link(beta_user_service_add_idp_link_request, opts = {})
    data, _status_code, _headers = add_idp_link_with_http_info(beta_user_service_add_idp_link_request, opts)
    data
    end

      # AddIDPLink
      # Add link to an identity provider to an user   Add link to an identity provider to an user.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_add_idp_link_request [BetaUserServiceAddIDPLinkRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceAddIDPLinkResponse, Integer, Hash)>] BetaUserServiceAddIDPLinkResponse data, response status code and response headers
    def add_idp_link_with_http_info(beta_user_service_add_idp_link_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.add_idp_link ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_add_idp_link_request' is set
          if @api_client.config.client_side_validation && beta_user_service_add_idp_link_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_add_idp_link_request' when calling Api::BetaUserServiceApi.add_idp_link" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/AddIDPLink'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_add_idp_link_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceAddIDPLinkResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.add_idp_link", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#add_idp_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # AddOTPEmail
      # Add OTP Email for a user   Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_add_otp_email_request [BetaUserServiceAddOTPEmailRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceAddOTPEmailResponse]
    def add_otp_email(beta_user_service_add_otp_email_request, opts = {})
    data, _status_code, _headers = add_otp_email_with_http_info(beta_user_service_add_otp_email_request, opts)
    data
    end

      # AddOTPEmail
      # Add OTP Email for a user   Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_add_otp_email_request [BetaUserServiceAddOTPEmailRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceAddOTPEmailResponse, Integer, Hash)>] BetaUserServiceAddOTPEmailResponse data, response status code and response headers
    def add_otp_email_with_http_info(beta_user_service_add_otp_email_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.add_otp_email ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_add_otp_email_request' is set
          if @api_client.config.client_side_validation && beta_user_service_add_otp_email_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_add_otp_email_request' when calling Api::BetaUserServiceApi.add_otp_email" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/AddOTPEmail'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_add_otp_email_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceAddOTPEmailResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.add_otp_email", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#add_otp_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # AddOTPSMS
      # Add OTP SMS for a user   Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_add_otpsms_request [BetaUserServiceAddOTPSMSRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceAddOTPSMSResponse]
    def add_otpsms(beta_user_service_add_otpsms_request, opts = {})
    data, _status_code, _headers = add_otpsms_with_http_info(beta_user_service_add_otpsms_request, opts)
    data
    end

      # AddOTPSMS
      # Add OTP SMS for a user   Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_add_otpsms_request [BetaUserServiceAddOTPSMSRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceAddOTPSMSResponse, Integer, Hash)>] BetaUserServiceAddOTPSMSResponse data, response status code and response headers
    def add_otpsms_with_http_info(beta_user_service_add_otpsms_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.add_otpsms ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_add_otpsms_request' is set
          if @api_client.config.client_side_validation && beta_user_service_add_otpsms_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_add_otpsms_request' when calling Api::BetaUserServiceApi.add_otpsms" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/AddOTPSMS'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_add_otpsms_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceAddOTPSMSResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.add_otpsms", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#add_otpsms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # CreatePasskeyRegistrationLink
      # Create a passkey registration link for a user   Create a passkey registration link which includes a code and either return it or send it to the user.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_create_passkey_registration_link_request [BetaUserServiceCreatePasskeyRegistrationLinkRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceCreatePasskeyRegistrationLinkResponse]
    def create_passkey_registration_link(beta_user_service_create_passkey_registration_link_request, opts = {})
    data, _status_code, _headers = create_passkey_registration_link_with_http_info(beta_user_service_create_passkey_registration_link_request, opts)
    data
    end

      # CreatePasskeyRegistrationLink
      # Create a passkey registration link for a user   Create a passkey registration link which includes a code and either return it or send it to the user.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_create_passkey_registration_link_request [BetaUserServiceCreatePasskeyRegistrationLinkRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceCreatePasskeyRegistrationLinkResponse, Integer, Hash)>] BetaUserServiceCreatePasskeyRegistrationLinkResponse data, response status code and response headers
    def create_passkey_registration_link_with_http_info(beta_user_service_create_passkey_registration_link_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.create_passkey_registration_link ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_create_passkey_registration_link_request' is set
          if @api_client.config.client_side_validation && beta_user_service_create_passkey_registration_link_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_create_passkey_registration_link_request' when calling Api::BetaUserServiceApi.create_passkey_registration_link" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/CreatePasskeyRegistrationLink'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_create_passkey_registration_link_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceCreatePasskeyRegistrationLinkResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.create_passkey_registration_link", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#create_passkey_registration_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # DeactivateUser
      # Deactivate user   The state of the user will be changed to 'deactivated'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'deactivated'. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_deactivate_user_request [BetaUserServiceDeactivateUserRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceDeactivateUserResponse]
    def deactivate_user(beta_user_service_deactivate_user_request, opts = {})
    data, _status_code, _headers = deactivate_user_with_http_info(beta_user_service_deactivate_user_request, opts)
    data
    end

      # DeactivateUser
      # Deactivate user   The state of the user will be changed to &#39;deactivated&#39;. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state &#39;deactivated&#39;. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_deactivate_user_request [BetaUserServiceDeactivateUserRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceDeactivateUserResponse, Integer, Hash)>] BetaUserServiceDeactivateUserResponse data, response status code and response headers
    def deactivate_user_with_http_info(beta_user_service_deactivate_user_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.deactivate_user ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_deactivate_user_request' is set
          if @api_client.config.client_side_validation && beta_user_service_deactivate_user_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_deactivate_user_request' when calling Api::BetaUserServiceApi.deactivate_user" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/DeactivateUser'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_deactivate_user_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceDeactivateUserResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.deactivate_user", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#deactivate_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # DeleteUser
      # Delete user   The state of the user will be changed to 'deleted'. The user will not be able to log in anymore. Endpoints requesting this user will return an error 'User not found.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_delete_user_request [BetaUserServiceDeleteUserRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceDeleteUserResponse]
    def delete_user(beta_user_service_delete_user_request, opts = {})
    data, _status_code, _headers = delete_user_with_http_info(beta_user_service_delete_user_request, opts)
    data
    end

      # DeleteUser
      # Delete user   The state of the user will be changed to &#39;deleted&#39;. The user will not be able to log in anymore. Endpoints requesting this user will return an error &#39;User not found.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_delete_user_request [BetaUserServiceDeleteUserRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceDeleteUserResponse, Integer, Hash)>] BetaUserServiceDeleteUserResponse data, response status code and response headers
    def delete_user_with_http_info(beta_user_service_delete_user_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.delete_user ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_delete_user_request' is set
          if @api_client.config.client_side_validation && beta_user_service_delete_user_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_delete_user_request' when calling Api::BetaUserServiceApi.delete_user" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/DeleteUser'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_delete_user_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceDeleteUserResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.delete_user", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # GetUserByID
      # User by ID   Returns the full user object (human or machine) including the profile, email, etc.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_get_user_by_id_request [BetaUserServiceGetUserByIDRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceGetUserByIDResponse]
    def get_user_by_id(beta_user_service_get_user_by_id_request, opts = {})
    data, _status_code, _headers = get_user_by_id_with_http_info(beta_user_service_get_user_by_id_request, opts)
    data
    end

      # GetUserByID
      # User by ID   Returns the full user object (human or machine) including the profile, email, etc.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_get_user_by_id_request [BetaUserServiceGetUserByIDRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceGetUserByIDResponse, Integer, Hash)>] BetaUserServiceGetUserByIDResponse data, response status code and response headers
    def get_user_by_id_with_http_info(beta_user_service_get_user_by_id_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.get_user_by_id ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_get_user_by_id_request' is set
          if @api_client.config.client_side_validation && beta_user_service_get_user_by_id_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_get_user_by_id_request' when calling Api::BetaUserServiceApi.get_user_by_id" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/GetUserByID'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_get_user_by_id_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceGetUserByIDResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.get_user_by_id", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#get_user_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # ListAuthenticationMethodTypes
      # List all possible authentication methods of a user   List all possible authentication methods of a user like password, passwordless, (T)OTP and more.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_list_authentication_method_types_request [BetaUserServiceListAuthenticationMethodTypesRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceListAuthenticationMethodTypesResponse]
    def list_authentication_method_types(beta_user_service_list_authentication_method_types_request, opts = {})
    data, _status_code, _headers = list_authentication_method_types_with_http_info(beta_user_service_list_authentication_method_types_request, opts)
    data
    end

      # ListAuthenticationMethodTypes
      # List all possible authentication methods of a user   List all possible authentication methods of a user like password, passwordless, (T)OTP and more.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_list_authentication_method_types_request [BetaUserServiceListAuthenticationMethodTypesRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceListAuthenticationMethodTypesResponse, Integer, Hash)>] BetaUserServiceListAuthenticationMethodTypesResponse data, response status code and response headers
    def list_authentication_method_types_with_http_info(beta_user_service_list_authentication_method_types_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.list_authentication_method_types ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_list_authentication_method_types_request' is set
          if @api_client.config.client_side_validation && beta_user_service_list_authentication_method_types_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_list_authentication_method_types_request' when calling Api::BetaUserServiceApi.list_authentication_method_types" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/ListAuthenticationMethodTypes'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_list_authentication_method_types_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceListAuthenticationMethodTypesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.list_authentication_method_types", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#list_authentication_method_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # ListUsers
      # Search Users   Search for users. By default, we will return all users of your instance that you have permission to read. Make sure to include a limit and sorting for pagination.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_list_users_request [BetaUserServiceListUsersRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceListUsersResponse]
    def list_users(beta_user_service_list_users_request, opts = {})
    data, _status_code, _headers = list_users_with_http_info(beta_user_service_list_users_request, opts)
    data
    end

      # ListUsers
      # Search Users   Search for users. By default, we will return all users of your instance that you have permission to read. Make sure to include a limit and sorting for pagination.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_list_users_request [BetaUserServiceListUsersRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceListUsersResponse, Integer, Hash)>] BetaUserServiceListUsersResponse data, response status code and response headers
    def list_users_with_http_info(beta_user_service_list_users_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.list_users ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_list_users_request' is set
          if @api_client.config.client_side_validation && beta_user_service_list_users_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_list_users_request' when calling Api::BetaUserServiceApi.list_users" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/ListUsers'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_list_users_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceListUsersResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.list_users", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#list_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # LockUser
      # Lock user   The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.).   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_lock_user_request [BetaUserServiceLockUserRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceLockUserResponse]
    def lock_user(beta_user_service_lock_user_request, opts = {})
    data, _status_code, _headers = lock_user_with_http_info(beta_user_service_lock_user_request, opts)
    data
    end

      # LockUser
      # Lock user   The state of the user will be changed to &#39;locked&#39;. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state &#39;locked&#39;. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.).   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_lock_user_request [BetaUserServiceLockUserRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceLockUserResponse, Integer, Hash)>] BetaUserServiceLockUserResponse data, response status code and response headers
    def lock_user_with_http_info(beta_user_service_lock_user_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.lock_user ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_lock_user_request' is set
          if @api_client.config.client_side_validation && beta_user_service_lock_user_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_lock_user_request' when calling Api::BetaUserServiceApi.lock_user" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/LockUser'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_lock_user_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceLockUserResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.lock_user", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#lock_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # PasswordReset
      # Request a code to reset a password   Request a code to reset a password.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_password_reset_request [BetaUserServicePasswordResetRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServicePasswordResetResponse]
    def password_reset(beta_user_service_password_reset_request, opts = {})
    data, _status_code, _headers = password_reset_with_http_info(beta_user_service_password_reset_request, opts)
    data
    end

      # PasswordReset
      # Request a code to reset a password   Request a code to reset a password.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_password_reset_request [BetaUserServicePasswordResetRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServicePasswordResetResponse, Integer, Hash)>] BetaUserServicePasswordResetResponse data, response status code and response headers
    def password_reset_with_http_info(beta_user_service_password_reset_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.password_reset ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_password_reset_request' is set
          if @api_client.config.client_side_validation && beta_user_service_password_reset_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_password_reset_request' when calling Api::BetaUserServiceApi.password_reset" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/PasswordReset'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_password_reset_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServicePasswordResetResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.password_reset", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#password_reset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # ReactivateUser
      # Reactivate user   Reactivate a user with the state 'deactivated'. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state 'deactivated'.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_reactivate_user_request [BetaUserServiceReactivateUserRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceReactivateUserResponse]
    def reactivate_user(beta_user_service_reactivate_user_request, opts = {})
    data, _status_code, _headers = reactivate_user_with_http_info(beta_user_service_reactivate_user_request, opts)
    data
    end

      # ReactivateUser
      # Reactivate user   Reactivate a user with the state &#39;deactivated&#39;. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state &#39;deactivated&#39;.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_reactivate_user_request [BetaUserServiceReactivateUserRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceReactivateUserResponse, Integer, Hash)>] BetaUserServiceReactivateUserResponse data, response status code and response headers
    def reactivate_user_with_http_info(beta_user_service_reactivate_user_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.reactivate_user ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_reactivate_user_request' is set
          if @api_client.config.client_side_validation && beta_user_service_reactivate_user_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_reactivate_user_request' when calling Api::BetaUserServiceApi.reactivate_user" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/ReactivateUser'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_reactivate_user_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceReactivateUserResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.reactivate_user", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#reactivate_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # RegisterPasskey
      # Start the registration of passkey for a user   Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_register_passkey_request [BetaUserServiceRegisterPasskeyRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceRegisterPasskeyResponse]
    def register_passkey(beta_user_service_register_passkey_request, opts = {})
    data, _status_code, _headers = register_passkey_with_http_info(beta_user_service_register_passkey_request, opts)
    data
    end

      # RegisterPasskey
      # Start the registration of passkey for a user   Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_register_passkey_request [BetaUserServiceRegisterPasskeyRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceRegisterPasskeyResponse, Integer, Hash)>] BetaUserServiceRegisterPasskeyResponse data, response status code and response headers
    def register_passkey_with_http_info(beta_user_service_register_passkey_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.register_passkey ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_register_passkey_request' is set
          if @api_client.config.client_side_validation && beta_user_service_register_passkey_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_register_passkey_request' when calling Api::BetaUserServiceApi.register_passkey" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/RegisterPasskey'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_register_passkey_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceRegisterPasskeyResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.register_passkey", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#register_passkey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # RegisterTOTP
      # Start the registration of a TOTP generator for a user   Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_register_totp_request [BetaUserServiceRegisterTOTPRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceRegisterTOTPResponse]
    def register_totp(beta_user_service_register_totp_request, opts = {})
    data, _status_code, _headers = register_totp_with_http_info(beta_user_service_register_totp_request, opts)
    data
    end

      # RegisterTOTP
      # Start the registration of a TOTP generator for a user   Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_register_totp_request [BetaUserServiceRegisterTOTPRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceRegisterTOTPResponse, Integer, Hash)>] BetaUserServiceRegisterTOTPResponse data, response status code and response headers
    def register_totp_with_http_info(beta_user_service_register_totp_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.register_totp ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_register_totp_request' is set
          if @api_client.config.client_side_validation && beta_user_service_register_totp_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_register_totp_request' when calling Api::BetaUserServiceApi.register_totp" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/RegisterTOTP'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_register_totp_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceRegisterTOTPResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.register_totp", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#register_totp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # RegisterU2F
      # Start the registration of a u2f token for a user   Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_register_u2_f_request [BetaUserServiceRegisterU2FRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceRegisterU2FResponse]
    def register_u2_f(beta_user_service_register_u2_f_request, opts = {})
    data, _status_code, _headers = register_u2_f_with_http_info(beta_user_service_register_u2_f_request, opts)
    data
    end

      # RegisterU2F
      # Start the registration of a u2f token for a user   Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_register_u2_f_request [BetaUserServiceRegisterU2FRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceRegisterU2FResponse, Integer, Hash)>] BetaUserServiceRegisterU2FResponse data, response status code and response headers
    def register_u2_f_with_http_info(beta_user_service_register_u2_f_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.register_u2_f ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_register_u2_f_request' is set
          if @api_client.config.client_side_validation && beta_user_service_register_u2_f_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_register_u2_f_request' when calling Api::BetaUserServiceApi.register_u2_f" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/RegisterU2F'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_register_u2_f_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceRegisterU2FResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.register_u2_f", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#register_u2_f\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # RemoveOTPEmail
      # Remove One-Time Password (OTP) Email from a user   Remove the configured One-Time Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_remove_otp_email_request [BetaUserServiceRemoveOTPEmailRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceRemoveOTPEmailResponse]
    def remove_otp_email(beta_user_service_remove_otp_email_request, opts = {})
    data, _status_code, _headers = remove_otp_email_with_http_info(beta_user_service_remove_otp_email_request, opts)
    data
    end

      # RemoveOTPEmail
      # Remove One-Time Password (OTP) Email from a user   Remove the configured One-Time Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_remove_otp_email_request [BetaUserServiceRemoveOTPEmailRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceRemoveOTPEmailResponse, Integer, Hash)>] BetaUserServiceRemoveOTPEmailResponse data, response status code and response headers
    def remove_otp_email_with_http_info(beta_user_service_remove_otp_email_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.remove_otp_email ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_remove_otp_email_request' is set
          if @api_client.config.client_side_validation && beta_user_service_remove_otp_email_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_remove_otp_email_request' when calling Api::BetaUserServiceApi.remove_otp_email" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/RemoveOTPEmail'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_remove_otp_email_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceRemoveOTPEmailResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.remove_otp_email", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#remove_otp_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # RemoveOTPSMS
      # Remove One-Time Password (OTP) SMS from a user   Remove the configured One-Time Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_remove_otpsms_request [BetaUserServiceRemoveOTPSMSRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceRemoveOTPSMSResponse]
    def remove_otpsms(beta_user_service_remove_otpsms_request, opts = {})
    data, _status_code, _headers = remove_otpsms_with_http_info(beta_user_service_remove_otpsms_request, opts)
    data
    end

      # RemoveOTPSMS
      # Remove One-Time Password (OTP) SMS from a user   Remove the configured One-Time Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_remove_otpsms_request [BetaUserServiceRemoveOTPSMSRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceRemoveOTPSMSResponse, Integer, Hash)>] BetaUserServiceRemoveOTPSMSResponse data, response status code and response headers
    def remove_otpsms_with_http_info(beta_user_service_remove_otpsms_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.remove_otpsms ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_remove_otpsms_request' is set
          if @api_client.config.client_side_validation && beta_user_service_remove_otpsms_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_remove_otpsms_request' when calling Api::BetaUserServiceApi.remove_otpsms" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/RemoveOTPSMS'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_remove_otpsms_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceRemoveOTPSMSResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.remove_otpsms", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#remove_otpsms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # RemovePhone
      # Remove the user phone   Remove the user phone   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_remove_phone_request [BetaUserServiceRemovePhoneRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceRemovePhoneResponse]
    def remove_phone(beta_user_service_remove_phone_request, opts = {})
    data, _status_code, _headers = remove_phone_with_http_info(beta_user_service_remove_phone_request, opts)
    data
    end

      # RemovePhone
      # Remove the user phone   Remove the user phone   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_remove_phone_request [BetaUserServiceRemovePhoneRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceRemovePhoneResponse, Integer, Hash)>] BetaUserServiceRemovePhoneResponse data, response status code and response headers
    def remove_phone_with_http_info(beta_user_service_remove_phone_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.remove_phone ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_remove_phone_request' is set
          if @api_client.config.client_side_validation && beta_user_service_remove_phone_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_remove_phone_request' when calling Api::BetaUserServiceApi.remove_phone" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/RemovePhone'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_remove_phone_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceRemovePhoneResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.remove_phone", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#remove_phone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # RemoveTOTP
      # Remove TOTP generator from a user   Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second factor afterward.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_remove_totp_request [BetaUserServiceRemoveTOTPRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceRemoveTOTPResponse]
    def remove_totp(beta_user_service_remove_totp_request, opts = {})
    data, _status_code, _headers = remove_totp_with_http_info(beta_user_service_remove_totp_request, opts)
    data
    end

      # RemoveTOTP
      # Remove TOTP generator from a user   Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second factor afterward.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_remove_totp_request [BetaUserServiceRemoveTOTPRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceRemoveTOTPResponse, Integer, Hash)>] BetaUserServiceRemoveTOTPResponse data, response status code and response headers
    def remove_totp_with_http_info(beta_user_service_remove_totp_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.remove_totp ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_remove_totp_request' is set
          if @api_client.config.client_side_validation && beta_user_service_remove_totp_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_remove_totp_request' when calling Api::BetaUserServiceApi.remove_totp" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/RemoveTOTP'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_remove_totp_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceRemoveTOTPResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.remove_totp", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#remove_totp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # ResendEmailCode
      # Resend code to verify user email   Resend code to verify user email   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_resend_email_code_request [BetaUserServiceResendEmailCodeRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceResendEmailCodeResponse]
    def resend_email_code(beta_user_service_resend_email_code_request, opts = {})
    data, _status_code, _headers = resend_email_code_with_http_info(beta_user_service_resend_email_code_request, opts)
    data
    end

      # ResendEmailCode
      # Resend code to verify user email   Resend code to verify user email   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_resend_email_code_request [BetaUserServiceResendEmailCodeRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceResendEmailCodeResponse, Integer, Hash)>] BetaUserServiceResendEmailCodeResponse data, response status code and response headers
    def resend_email_code_with_http_info(beta_user_service_resend_email_code_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.resend_email_code ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_resend_email_code_request' is set
          if @api_client.config.client_side_validation && beta_user_service_resend_email_code_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_resend_email_code_request' when calling Api::BetaUserServiceApi.resend_email_code" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/ResendEmailCode'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_resend_email_code_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceResendEmailCodeResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.resend_email_code", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#resend_email_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # ResendPhoneCode
      # Resend code to verify user phone   Resend code to verify user phone   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_resend_phone_code_request [BetaUserServiceResendPhoneCodeRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceResendPhoneCodeResponse]
    def resend_phone_code(beta_user_service_resend_phone_code_request, opts = {})
    data, _status_code, _headers = resend_phone_code_with_http_info(beta_user_service_resend_phone_code_request, opts)
    data
    end

      # ResendPhoneCode
      # Resend code to verify user phone   Resend code to verify user phone   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_resend_phone_code_request [BetaUserServiceResendPhoneCodeRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceResendPhoneCodeResponse, Integer, Hash)>] BetaUserServiceResendPhoneCodeResponse data, response status code and response headers
    def resend_phone_code_with_http_info(beta_user_service_resend_phone_code_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.resend_phone_code ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_resend_phone_code_request' is set
          if @api_client.config.client_side_validation && beta_user_service_resend_phone_code_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_resend_phone_code_request' when calling Api::BetaUserServiceApi.resend_phone_code" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/ResendPhoneCode'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_resend_phone_code_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceResendPhoneCodeResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.resend_phone_code", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#resend_phone_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # RetrieveIdentityProviderIntent
      # Retrieve the information returned by the identity provider   Retrieve the information returned by the identity provider for registration or updating an existing user with new information.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_retrieve_identity_provider_intent_request [BetaUserServiceRetrieveIdentityProviderIntentRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceRetrieveIdentityProviderIntentResponse]
    def retrieve_identity_provider_intent(beta_user_service_retrieve_identity_provider_intent_request, opts = {})
    data, _status_code, _headers = retrieve_identity_provider_intent_with_http_info(beta_user_service_retrieve_identity_provider_intent_request, opts)
    data
    end

      # RetrieveIdentityProviderIntent
      # Retrieve the information returned by the identity provider   Retrieve the information returned by the identity provider for registration or updating an existing user with new information.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_retrieve_identity_provider_intent_request [BetaUserServiceRetrieveIdentityProviderIntentRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceRetrieveIdentityProviderIntentResponse, Integer, Hash)>] BetaUserServiceRetrieveIdentityProviderIntentResponse data, response status code and response headers
    def retrieve_identity_provider_intent_with_http_info(beta_user_service_retrieve_identity_provider_intent_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.retrieve_identity_provider_intent ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_retrieve_identity_provider_intent_request' is set
          if @api_client.config.client_side_validation && beta_user_service_retrieve_identity_provider_intent_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_retrieve_identity_provider_intent_request' when calling Api::BetaUserServiceApi.retrieve_identity_provider_intent" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/RetrieveIdentityProviderIntent'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_retrieve_identity_provider_intent_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceRetrieveIdentityProviderIntentResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.retrieve_identity_provider_intent", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#retrieve_identity_provider_intent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # SetEmail
      # Change the user email   Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_set_email_request [BetaUserServiceSetEmailRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceSetEmailResponse]
    def set_email(beta_user_service_set_email_request, opts = {})
    data, _status_code, _headers = set_email_with_http_info(beta_user_service_set_email_request, opts)
    data
    end

      # SetEmail
      # Change the user email   Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_set_email_request [BetaUserServiceSetEmailRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceSetEmailResponse, Integer, Hash)>] BetaUserServiceSetEmailResponse data, response status code and response headers
    def set_email_with_http_info(beta_user_service_set_email_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.set_email ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_set_email_request' is set
          if @api_client.config.client_side_validation && beta_user_service_set_email_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_set_email_request' when calling Api::BetaUserServiceApi.set_email" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/SetEmail'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_set_email_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceSetEmailResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.set_email", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#set_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # SetPassword
      # Change password   Change the password of a user with either a verification code or the current password.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_set_password_request [BetaUserServiceSetPasswordRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceSetPasswordResponse]
    def set_password(beta_user_service_set_password_request, opts = {})
    data, _status_code, _headers = set_password_with_http_info(beta_user_service_set_password_request, opts)
    data
    end

      # SetPassword
      # Change password   Change the password of a user with either a verification code or the current password.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_set_password_request [BetaUserServiceSetPasswordRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceSetPasswordResponse, Integer, Hash)>] BetaUserServiceSetPasswordResponse data, response status code and response headers
    def set_password_with_http_info(beta_user_service_set_password_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.set_password ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_set_password_request' is set
          if @api_client.config.client_side_validation && beta_user_service_set_password_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_set_password_request' when calling Api::BetaUserServiceApi.set_password" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/SetPassword'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_set_password_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceSetPasswordResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.set_password", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#set_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # SetPhone
      # Set the user phone   Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_set_phone_request [BetaUserServiceSetPhoneRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceSetPhoneResponse]
    def set_phone(beta_user_service_set_phone_request, opts = {})
    data, _status_code, _headers = set_phone_with_http_info(beta_user_service_set_phone_request, opts)
    data
    end

      # SetPhone
      # Set the user phone   Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_set_phone_request [BetaUserServiceSetPhoneRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceSetPhoneResponse, Integer, Hash)>] BetaUserServiceSetPhoneResponse data, response status code and response headers
    def set_phone_with_http_info(beta_user_service_set_phone_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.set_phone ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_set_phone_request' is set
          if @api_client.config.client_side_validation && beta_user_service_set_phone_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_set_phone_request' when calling Api::BetaUserServiceApi.set_phone" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/SetPhone'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_set_phone_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceSetPhoneResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.set_phone", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#set_phone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # StartIdentityProviderIntent
      # Start flow with an identity provider   Start a flow with an identity provider, for external login, registration or linking.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_start_identity_provider_intent_request [BetaUserServiceStartIdentityProviderIntentRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceStartIdentityProviderIntentResponse]
    def start_identity_provider_intent(beta_user_service_start_identity_provider_intent_request, opts = {})
    data, _status_code, _headers = start_identity_provider_intent_with_http_info(beta_user_service_start_identity_provider_intent_request, opts)
    data
    end

      # StartIdentityProviderIntent
      # Start flow with an identity provider   Start a flow with an identity provider, for external login, registration or linking.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_start_identity_provider_intent_request [BetaUserServiceStartIdentityProviderIntentRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceStartIdentityProviderIntentResponse, Integer, Hash)>] BetaUserServiceStartIdentityProviderIntentResponse data, response status code and response headers
    def start_identity_provider_intent_with_http_info(beta_user_service_start_identity_provider_intent_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.start_identity_provider_intent ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_start_identity_provider_intent_request' is set
          if @api_client.config.client_side_validation && beta_user_service_start_identity_provider_intent_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_start_identity_provider_intent_request' when calling Api::BetaUserServiceApi.start_identity_provider_intent" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/StartIdentityProviderIntent'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_start_identity_provider_intent_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceStartIdentityProviderIntentResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.start_identity_provider_intent", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#start_identity_provider_intent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # UnlockUser
      # Unlock user   The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.).   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_unlock_user_request [BetaUserServiceUnlockUserRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceUnlockUserResponse]
    def unlock_user(beta_user_service_unlock_user_request, opts = {})
    data, _status_code, _headers = unlock_user_with_http_info(beta_user_service_unlock_user_request, opts)
    data
    end

      # UnlockUser
      # Unlock user   The state of the user will be changed to &#39;locked&#39;. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state &#39;locked&#39;. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.).   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_unlock_user_request [BetaUserServiceUnlockUserRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceUnlockUserResponse, Integer, Hash)>] BetaUserServiceUnlockUserResponse data, response status code and response headers
    def unlock_user_with_http_info(beta_user_service_unlock_user_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.unlock_user ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_unlock_user_request' is set
          if @api_client.config.client_side_validation && beta_user_service_unlock_user_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_unlock_user_request' when calling Api::BetaUserServiceApi.unlock_user" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/UnlockUser'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_unlock_user_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceUnlockUserResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.unlock_user", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#unlock_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # UpdateHumanUser
      # Update User   Update all information from a user.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_update_human_user_request [BetaUserServiceUpdateHumanUserRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceUpdateHumanUserResponse]
    def update_human_user(beta_user_service_update_human_user_request, opts = {})
    data, _status_code, _headers = update_human_user_with_http_info(beta_user_service_update_human_user_request, opts)
    data
    end

      # UpdateHumanUser
      # Update User   Update all information from a user.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_update_human_user_request [BetaUserServiceUpdateHumanUserRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceUpdateHumanUserResponse, Integer, Hash)>] BetaUserServiceUpdateHumanUserResponse data, response status code and response headers
    def update_human_user_with_http_info(beta_user_service_update_human_user_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.update_human_user ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_update_human_user_request' is set
          if @api_client.config.client_side_validation && beta_user_service_update_human_user_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_update_human_user_request' when calling Api::BetaUserServiceApi.update_human_user" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/UpdateHumanUser'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_update_human_user_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceUpdateHumanUserResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.update_human_user", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#update_human_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # VerifyEmail
      # Verify the email   Verify the email with the generated code.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_verify_email_request [BetaUserServiceVerifyEmailRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceVerifyEmailResponse]
    def verify_email(beta_user_service_verify_email_request, opts = {})
    data, _status_code, _headers = verify_email_with_http_info(beta_user_service_verify_email_request, opts)
    data
    end

      # VerifyEmail
      # Verify the email   Verify the email with the generated code.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_verify_email_request [BetaUserServiceVerifyEmailRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceVerifyEmailResponse, Integer, Hash)>] BetaUserServiceVerifyEmailResponse data, response status code and response headers
    def verify_email_with_http_info(beta_user_service_verify_email_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.verify_email ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_verify_email_request' is set
          if @api_client.config.client_side_validation && beta_user_service_verify_email_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_verify_email_request' when calling Api::BetaUserServiceApi.verify_email" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/VerifyEmail'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_verify_email_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceVerifyEmailResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.verify_email", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#verify_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # VerifyPasskeyRegistration
      # Verify a passkey for a user   Verify the passkey registration with the public key credential.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_verify_passkey_registration_request [BetaUserServiceVerifyPasskeyRegistrationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceVerifyPasskeyRegistrationResponse]
    def verify_passkey_registration(beta_user_service_verify_passkey_registration_request, opts = {})
    data, _status_code, _headers = verify_passkey_registration_with_http_info(beta_user_service_verify_passkey_registration_request, opts)
    data
    end

      # VerifyPasskeyRegistration
      # Verify a passkey for a user   Verify the passkey registration with the public key credential.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_verify_passkey_registration_request [BetaUserServiceVerifyPasskeyRegistrationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceVerifyPasskeyRegistrationResponse, Integer, Hash)>] BetaUserServiceVerifyPasskeyRegistrationResponse data, response status code and response headers
    def verify_passkey_registration_with_http_info(beta_user_service_verify_passkey_registration_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.verify_passkey_registration ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_verify_passkey_registration_request' is set
          if @api_client.config.client_side_validation && beta_user_service_verify_passkey_registration_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_verify_passkey_registration_request' when calling Api::BetaUserServiceApi.verify_passkey_registration" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/VerifyPasskeyRegistration'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_verify_passkey_registration_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceVerifyPasskeyRegistrationResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.verify_passkey_registration", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#verify_passkey_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # VerifyPhone
      # Verify the phone   Verify the phone with the generated code.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_verify_phone_request [BetaUserServiceVerifyPhoneRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceVerifyPhoneResponse]
    def verify_phone(beta_user_service_verify_phone_request, opts = {})
    data, _status_code, _headers = verify_phone_with_http_info(beta_user_service_verify_phone_request, opts)
    data
    end

      # VerifyPhone
      # Verify the phone   Verify the phone with the generated code.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_verify_phone_request [BetaUserServiceVerifyPhoneRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceVerifyPhoneResponse, Integer, Hash)>] BetaUserServiceVerifyPhoneResponse data, response status code and response headers
    def verify_phone_with_http_info(beta_user_service_verify_phone_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.verify_phone ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_verify_phone_request' is set
          if @api_client.config.client_side_validation && beta_user_service_verify_phone_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_verify_phone_request' when calling Api::BetaUserServiceApi.verify_phone" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/VerifyPhone'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_verify_phone_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceVerifyPhoneResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.verify_phone", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#verify_phone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # VerifyTOTPRegistration
      # Verify a TOTP generator for a user   Verify the TOTP registration with a generated code.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_verify_totp_registration_request [BetaUserServiceVerifyTOTPRegistrationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceVerifyTOTPRegistrationResponse]
    def verify_totp_registration(beta_user_service_verify_totp_registration_request, opts = {})
    data, _status_code, _headers = verify_totp_registration_with_http_info(beta_user_service_verify_totp_registration_request, opts)
    data
    end

      # VerifyTOTPRegistration
      # Verify a TOTP generator for a user   Verify the TOTP registration with a generated code.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_verify_totp_registration_request [BetaUserServiceVerifyTOTPRegistrationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceVerifyTOTPRegistrationResponse, Integer, Hash)>] BetaUserServiceVerifyTOTPRegistrationResponse data, response status code and response headers
    def verify_totp_registration_with_http_info(beta_user_service_verify_totp_registration_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.verify_totp_registration ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_verify_totp_registration_request' is set
          if @api_client.config.client_side_validation && beta_user_service_verify_totp_registration_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_verify_totp_registration_request' when calling Api::BetaUserServiceApi.verify_totp_registration" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/VerifyTOTPRegistration'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_verify_totp_registration_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceVerifyTOTPRegistrationResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.verify_totp_registration", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#verify_totp_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # VerifyU2FRegistration
      # Verify a u2f token for a user   Verify the u2f token registration with the public key credential.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_verify_u2_f_registration_request [BetaUserServiceVerifyU2FRegistrationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaUserServiceVerifyU2FRegistrationResponse]
    def verify_u2_f_registration(beta_user_service_verify_u2_f_registration_request, opts = {})
    data, _status_code, _headers = verify_u2_f_registration_with_http_info(beta_user_service_verify_u2_f_registration_request, opts)
    data
    end

      # VerifyU2FRegistration
      # Verify a u2f token for a user   Verify the u2f token registration with the public key credential.   Deprecated: please move to the corresponding endpoint under user service v2 (GA).
          # @param beta_user_service_verify_u2_f_registration_request [BetaUserServiceVerifyU2FRegistrationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaUserServiceVerifyU2FRegistrationResponse, Integer, Hash)>] BetaUserServiceVerifyU2FRegistrationResponse data, response status code and response headers
    def verify_u2_f_registration_with_http_info(beta_user_service_verify_u2_f_registration_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaUserServiceApi.verify_u2_f_registration ...' # MODIFIED
    end
          # verify the required parameter 'beta_user_service_verify_u2_f_registration_request' is set
          if @api_client.config.client_side_validation && beta_user_service_verify_u2_f_registration_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_user_service_verify_u2_f_registration_request' when calling Api::BetaUserServiceApi.verify_u2_f_registration" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.user.v2beta.UserService/VerifyU2FRegistration'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_user_service_verify_u2_f_registration_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaUserServiceVerifyU2FRegistrationResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaUserServiceApi.verify_u2_f_registration", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaUserServiceApi#verify_u2_f_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end
  end
end
