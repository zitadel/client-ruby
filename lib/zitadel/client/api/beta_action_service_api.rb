=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Zitadel::Client::Api
  class BetaActionServiceApi
  attr_accessor :api_client

  def initialize(api_client = ApiClient.default)
  @api_client = api_client
  end
      # CreateTarget
      # Create Target   Create a new target to your endpoint, which can be used in executions.   Required permission:    - `action.target.write`   Required feature flag:    - `actions`
          # @param beta_action_service_create_target_request [BetaActionServiceCreateTargetRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaActionServiceCreateTargetResponse]
    def create_target(beta_action_service_create_target_request, opts = {})
    data, _status_code, _headers = create_target_with_http_info(beta_action_service_create_target_request, opts)
    data
    end

      # CreateTarget
      # Create Target   Create a new target to your endpoint, which can be used in executions.   Required permission:    - &#x60;action.target.write&#x60;   Required feature flag:    - &#x60;actions&#x60;
          # @param beta_action_service_create_target_request [BetaActionServiceCreateTargetRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaActionServiceCreateTargetResponse, Integer, Hash)>] BetaActionServiceCreateTargetResponse data, response status code and response headers
    def create_target_with_http_info(beta_action_service_create_target_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaActionServiceApi.create_target ...' # MODIFIED
    end
          # verify the required parameter 'beta_action_service_create_target_request' is set
          if @api_client.config.client_side_validation && beta_action_service_create_target_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_action_service_create_target_request' when calling Api::BetaActionServiceApi.create_target" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.action.v2beta.ActionService/CreateTarget'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_action_service_create_target_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaActionServiceCreateTargetResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaActionServiceApi.create_target", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaActionServiceApi#create_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # DeleteTarget
      # Delete Target   Delete an existing target. This will remove it from any configured execution as well.  In case the target is not found, the request will return a successful response as  the desired state is already achieved.   Required permission:    - `action.target.delete`   Required feature flag:    - `actions`
          # @param beta_action_service_delete_target_request [BetaActionServiceDeleteTargetRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaActionServiceDeleteTargetResponse]
    def delete_target(beta_action_service_delete_target_request, opts = {})
    data, _status_code, _headers = delete_target_with_http_info(beta_action_service_delete_target_request, opts)
    data
    end

      # DeleteTarget
      # Delete Target   Delete an existing target. This will remove it from any configured execution as well.  In case the target is not found, the request will return a successful response as  the desired state is already achieved.   Required permission:    - &#x60;action.target.delete&#x60;   Required feature flag:    - &#x60;actions&#x60;
          # @param beta_action_service_delete_target_request [BetaActionServiceDeleteTargetRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaActionServiceDeleteTargetResponse, Integer, Hash)>] BetaActionServiceDeleteTargetResponse data, response status code and response headers
    def delete_target_with_http_info(beta_action_service_delete_target_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaActionServiceApi.delete_target ...' # MODIFIED
    end
          # verify the required parameter 'beta_action_service_delete_target_request' is set
          if @api_client.config.client_side_validation && beta_action_service_delete_target_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_action_service_delete_target_request' when calling Api::BetaActionServiceApi.delete_target" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.action.v2beta.ActionService/DeleteTarget'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_action_service_delete_target_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaActionServiceDeleteTargetResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaActionServiceApi.delete_target", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaActionServiceApi#delete_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # GetTarget
      # Get Target   Returns the target identified by the requested ID.   Required permission:    - `action.target.read`   Required feature flag:    - `actions`
          # @param beta_action_service_get_target_request [BetaActionServiceGetTargetRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaActionServiceGetTargetResponse]
    def get_target(beta_action_service_get_target_request, opts = {})
    data, _status_code, _headers = get_target_with_http_info(beta_action_service_get_target_request, opts)
    data
    end

      # GetTarget
      # Get Target   Returns the target identified by the requested ID.   Required permission:    - &#x60;action.target.read&#x60;   Required feature flag:    - &#x60;actions&#x60;
          # @param beta_action_service_get_target_request [BetaActionServiceGetTargetRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaActionServiceGetTargetResponse, Integer, Hash)>] BetaActionServiceGetTargetResponse data, response status code and response headers
    def get_target_with_http_info(beta_action_service_get_target_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaActionServiceApi.get_target ...' # MODIFIED
    end
          # verify the required parameter 'beta_action_service_get_target_request' is set
          if @api_client.config.client_side_validation && beta_action_service_get_target_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_action_service_get_target_request' when calling Api::BetaActionServiceApi.get_target" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.action.v2beta.ActionService/GetTarget'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_action_service_get_target_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaActionServiceGetTargetResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaActionServiceApi.get_target", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaActionServiceApi#get_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # ListExecutionFunctions
      # List Execution Functions   List all available functions which can be used as condition for executions.
          # @param body [Object] 
      # @param [Hash] opts the optional parameters
    # @return [BetaActionServiceListExecutionFunctionsResponse]
    def list_execution_functions(body, opts = {})
    data, _status_code, _headers = list_execution_functions_with_http_info(body, opts)
    data
    end

      # ListExecutionFunctions
      # List Execution Functions   List all available functions which can be used as condition for executions.
          # @param body [Object] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaActionServiceListExecutionFunctionsResponse, Integer, Hash)>] BetaActionServiceListExecutionFunctionsResponse data, response status code and response headers
    def list_execution_functions_with_http_info(body, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaActionServiceApi.list_execution_functions ...' # MODIFIED
    end
          # verify the required parameter 'body' is set
          if @api_client.config.client_side_validation && body.nil?
          fail ArgumentError, "Missing the required parameter 'body' when calling Api::BetaActionServiceApi.list_execution_functions" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.action.v2beta.ActionService/ListExecutionFunctions'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaActionServiceListExecutionFunctionsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaActionServiceApi.list_execution_functions", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaActionServiceApi#list_execution_functions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # ListExecutionMethods
      # List Execution Methods   List all available methods which can be used as condition for executions.
          # @param body [Object] 
      # @param [Hash] opts the optional parameters
    # @return [BetaActionServiceListExecutionMethodsResponse]
    def list_execution_methods(body, opts = {})
    data, _status_code, _headers = list_execution_methods_with_http_info(body, opts)
    data
    end

      # ListExecutionMethods
      # List Execution Methods   List all available methods which can be used as condition for executions.
          # @param body [Object] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaActionServiceListExecutionMethodsResponse, Integer, Hash)>] BetaActionServiceListExecutionMethodsResponse data, response status code and response headers
    def list_execution_methods_with_http_info(body, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaActionServiceApi.list_execution_methods ...' # MODIFIED
    end
          # verify the required parameter 'body' is set
          if @api_client.config.client_side_validation && body.nil?
          fail ArgumentError, "Missing the required parameter 'body' when calling Api::BetaActionServiceApi.list_execution_methods" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.action.v2beta.ActionService/ListExecutionMethods'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaActionServiceListExecutionMethodsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaActionServiceApi.list_execution_methods", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaActionServiceApi#list_execution_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # ListExecutionServices
      # List Execution Services   List all available services which can be used as condition for executions.
          # @param body [Object] 
      # @param [Hash] opts the optional parameters
    # @return [BetaActionServiceListExecutionServicesResponse]
    def list_execution_services(body, opts = {})
    data, _status_code, _headers = list_execution_services_with_http_info(body, opts)
    data
    end

      # ListExecutionServices
      # List Execution Services   List all available services which can be used as condition for executions.
          # @param body [Object] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaActionServiceListExecutionServicesResponse, Integer, Hash)>] BetaActionServiceListExecutionServicesResponse data, response status code and response headers
    def list_execution_services_with_http_info(body, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaActionServiceApi.list_execution_services ...' # MODIFIED
    end
          # verify the required parameter 'body' is set
          if @api_client.config.client_side_validation && body.nil?
          fail ArgumentError, "Missing the required parameter 'body' when calling Api::BetaActionServiceApi.list_execution_services" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.action.v2beta.ActionService/ListExecutionServices'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaActionServiceListExecutionServicesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaActionServiceApi.list_execution_services", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaActionServiceApi#list_execution_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # ListExecutions
      # List Executions   List all matching executions. By default all executions of the instance are returned that have at least one execution target.  Make sure to include a limit and sorting for pagination.   Required permission:    - `action.execution.read`   Required feature flag:    - `actions`
          # @param beta_action_service_list_executions_request [BetaActionServiceListExecutionsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaActionServiceListExecutionsResponse]
    def list_executions(beta_action_service_list_executions_request, opts = {})
    data, _status_code, _headers = list_executions_with_http_info(beta_action_service_list_executions_request, opts)
    data
    end

      # ListExecutions
      # List Executions   List all matching executions. By default all executions of the instance are returned that have at least one execution target.  Make sure to include a limit and sorting for pagination.   Required permission:    - &#x60;action.execution.read&#x60;   Required feature flag:    - &#x60;actions&#x60;
          # @param beta_action_service_list_executions_request [BetaActionServiceListExecutionsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaActionServiceListExecutionsResponse, Integer, Hash)>] BetaActionServiceListExecutionsResponse data, response status code and response headers
    def list_executions_with_http_info(beta_action_service_list_executions_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaActionServiceApi.list_executions ...' # MODIFIED
    end
          # verify the required parameter 'beta_action_service_list_executions_request' is set
          if @api_client.config.client_side_validation && beta_action_service_list_executions_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_action_service_list_executions_request' when calling Api::BetaActionServiceApi.list_executions" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.action.v2beta.ActionService/ListExecutions'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_action_service_list_executions_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaActionServiceListExecutionsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaActionServiceApi.list_executions", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaActionServiceApi#list_executions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # ListTargets
      # List targets   List all matching targets. By default all targets of the instance are returned.  Make sure to include a limit and sorting for pagination.   Required permission:    - `action.target.read`   Required feature flag:    - `actions`
          # @param beta_action_service_list_targets_request [BetaActionServiceListTargetsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaActionServiceListTargetsResponse]
    def list_targets(beta_action_service_list_targets_request, opts = {})
    data, _status_code, _headers = list_targets_with_http_info(beta_action_service_list_targets_request, opts)
    data
    end

      # ListTargets
      # List targets   List all matching targets. By default all targets of the instance are returned.  Make sure to include a limit and sorting for pagination.   Required permission:    - &#x60;action.target.read&#x60;   Required feature flag:    - &#x60;actions&#x60;
          # @param beta_action_service_list_targets_request [BetaActionServiceListTargetsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaActionServiceListTargetsResponse, Integer, Hash)>] BetaActionServiceListTargetsResponse data, response status code and response headers
    def list_targets_with_http_info(beta_action_service_list_targets_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaActionServiceApi.list_targets ...' # MODIFIED
    end
          # verify the required parameter 'beta_action_service_list_targets_request' is set
          if @api_client.config.client_side_validation && beta_action_service_list_targets_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_action_service_list_targets_request' when calling Api::BetaActionServiceApi.list_targets" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.action.v2beta.ActionService/ListTargets'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_action_service_list_targets_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaActionServiceListTargetsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaActionServiceApi.list_targets", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaActionServiceApi#list_targets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # SetExecution
      # Set Execution   Sets an execution to call a target or include the targets of another execution.  Setting an empty list of targets will remove all targets from the execution, making it a noop.   Required permission:    - `action.execution.write`   Required feature flag:    - `actions`
          # @param beta_action_service_set_execution_request [BetaActionServiceSetExecutionRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaActionServiceSetExecutionResponse]
    def set_execution(beta_action_service_set_execution_request, opts = {})
    data, _status_code, _headers = set_execution_with_http_info(beta_action_service_set_execution_request, opts)
    data
    end

      # SetExecution
      # Set Execution   Sets an execution to call a target or include the targets of another execution.  Setting an empty list of targets will remove all targets from the execution, making it a noop.   Required permission:    - &#x60;action.execution.write&#x60;   Required feature flag:    - &#x60;actions&#x60;
          # @param beta_action_service_set_execution_request [BetaActionServiceSetExecutionRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaActionServiceSetExecutionResponse, Integer, Hash)>] BetaActionServiceSetExecutionResponse data, response status code and response headers
    def set_execution_with_http_info(beta_action_service_set_execution_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaActionServiceApi.set_execution ...' # MODIFIED
    end
          # verify the required parameter 'beta_action_service_set_execution_request' is set
          if @api_client.config.client_side_validation && beta_action_service_set_execution_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_action_service_set_execution_request' when calling Api::BetaActionServiceApi.set_execution" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.action.v2beta.ActionService/SetExecution'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_action_service_set_execution_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaActionServiceSetExecutionResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaActionServiceApi.set_execution", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaActionServiceApi#set_execution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # UpdateTarget
      # Update Target   Update an existing target.  To generate a new signing key set the optional expirationSigningKey.   Required permission:    - `action.target.write`   Required feature flag:    - `actions`
          # @param beta_action_service_update_target_request [BetaActionServiceUpdateTargetRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaActionServiceUpdateTargetResponse]
    def update_target(beta_action_service_update_target_request, opts = {})
    data, _status_code, _headers = update_target_with_http_info(beta_action_service_update_target_request, opts)
    data
    end

      # UpdateTarget
      # Update Target   Update an existing target.  To generate a new signing key set the optional expirationSigningKey.   Required permission:    - &#x60;action.target.write&#x60;   Required feature flag:    - &#x60;actions&#x60;
          # @param beta_action_service_update_target_request [BetaActionServiceUpdateTargetRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(BetaActionServiceUpdateTargetResponse, Integer, Hash)>] BetaActionServiceUpdateTargetResponse data, response status code and response headers
    def update_target_with_http_info(beta_action_service_update_target_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaActionServiceApi.update_target ...' # MODIFIED
    end
          # verify the required parameter 'beta_action_service_update_target_request' is set
          if @api_client.config.client_side_validation && beta_action_service_update_target_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_action_service_update_target_request' when calling Api::BetaActionServiceApi.update_target" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.action.v2beta.ActionService/UpdateTarget'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_action_service_update_target_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaActionServiceUpdateTargetResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaActionServiceApi.update_target", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaActionServiceApi#update_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end
  end
end
