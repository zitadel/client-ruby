=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module Zitadel::Client::Api
  class BetaOrganizationServiceApi
  attr_accessor :api_client

  def initialize(api_client = ApiClient.default)
  @api_client = api_client
  end
      # ActivateOrganization
      # Activate Organization   Set the state of my organization to active. The state of the organization has to be deactivated to perform the request. Users of this organization will be able to log in again.   Required permission:   - &#x60;org.write&#x60;
          # @param beta_organization_service_activate_organization_request [BetaOrganizationServiceActivateOrganizationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaOrganizationServiceActivateOrganizationResponse]
    def activate_organization(beta_organization_service_activate_organization_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.activate_organization ...' # MODIFIED
    end
          # verify the required parameter 'beta_organization_service_activate_organization_request' is set
          if @api_client.config.client_side_validation && beta_organization_service_activate_organization_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_organization_service_activate_organization_request' when calling Api::BetaOrganizationServiceApi.activate_organization" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.org.v2beta.OrganizationService/ActivateOrganization'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_organization_service_activate_organization_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaOrganizationServiceActivateOrganizationResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.activate_organization", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#activate_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # AddOrganizationDomain
      # Add Organization Domain   Add a new domain to an organization. The domains are used to identify to which organization a user belongs.   Required permission:   - &#x60;org.write&#x60;
          # @param beta_organization_service_add_organization_domain_request [BetaOrganizationServiceAddOrganizationDomainRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaOrganizationServiceAddOrganizationDomainResponse]
    def add_organization_domain(beta_organization_service_add_organization_domain_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.add_organization_domain ...' # MODIFIED
    end
          # verify the required parameter 'beta_organization_service_add_organization_domain_request' is set
          if @api_client.config.client_side_validation && beta_organization_service_add_organization_domain_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_organization_service_add_organization_domain_request' when calling Api::BetaOrganizationServiceApi.add_organization_domain" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.org.v2beta.OrganizationService/AddOrganizationDomain'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_organization_service_add_organization_domain_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaOrganizationServiceAddOrganizationDomainResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.add_organization_domain", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#add_organization_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # CreateOrganization
      # Create Organization   Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.   Required permission:   - &#x60;org.create&#x60;
          # @param beta_organization_service_create_organization_request [BetaOrganizationServiceCreateOrganizationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaOrganizationServiceCreateOrganizationResponse]
    def create_organization(beta_organization_service_create_organization_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.create_organization ...' # MODIFIED
    end
          # verify the required parameter 'beta_organization_service_create_organization_request' is set
          if @api_client.config.client_side_validation && beta_organization_service_create_organization_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_organization_service_create_organization_request' when calling Api::BetaOrganizationServiceApi.create_organization" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.org.v2beta.OrganizationService/CreateOrganization'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_organization_service_create_organization_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaOrganizationServiceCreateOrganizationResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.create_organization", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#create_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # DeactivateOrganization
      # Deactivate Organization   Sets the state of my organization to deactivated. Users of this organization will not be able to log in.   Required permission:   - &#x60;org.write&#x60;
          # @param beta_organization_service_deactivate_organization_request [BetaOrganizationServiceDeactivateOrganizationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaOrganizationServiceDeactivateOrganizationResponse]
    def deactivate_organization(beta_organization_service_deactivate_organization_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.deactivate_organization ...' # MODIFIED
    end
          # verify the required parameter 'beta_organization_service_deactivate_organization_request' is set
          if @api_client.config.client_side_validation && beta_organization_service_deactivate_organization_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_organization_service_deactivate_organization_request' when calling Api::BetaOrganizationServiceApi.deactivate_organization" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.org.v2beta.OrganizationService/DeactivateOrganization'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_organization_service_deactivate_organization_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaOrganizationServiceDeactivateOrganizationResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.deactivate_organization", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#deactivate_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # DeleteOrganization
      # Delete Organization   Deletes the organization and all its resources (Users, Projects, Grants to and from the org). Users of this organization will not be able to log in.   Required permission:   - &#x60;org.delete&#x60;
          # @param beta_organization_service_delete_organization_request [BetaOrganizationServiceDeleteOrganizationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaOrganizationServiceDeleteOrganizationResponse]
    def delete_organization(beta_organization_service_delete_organization_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.delete_organization ...' # MODIFIED
    end
          # verify the required parameter 'beta_organization_service_delete_organization_request' is set
          if @api_client.config.client_side_validation && beta_organization_service_delete_organization_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_organization_service_delete_organization_request' when calling Api::BetaOrganizationServiceApi.delete_organization" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.org.v2beta.OrganizationService/DeleteOrganization'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_organization_service_delete_organization_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaOrganizationServiceDeleteOrganizationResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.delete_organization", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#delete_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # DeleteOrganizationDomain
      # Delete Organization Domain   Delete a new domain from an organization. The domains are used to identify to which organization a user belongs. If the uses use the domain for login, this will not be possible afterwards. They have to use another domain instead.   Required permission:   - &#x60;org.write&#x60;
          # @param beta_organization_service_delete_organization_domain_request [BetaOrganizationServiceDeleteOrganizationDomainRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaOrganizationServiceDeleteOrganizationDomainResponse]
    def delete_organization_domain(beta_organization_service_delete_organization_domain_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.delete_organization_domain ...' # MODIFIED
    end
          # verify the required parameter 'beta_organization_service_delete_organization_domain_request' is set
          if @api_client.config.client_side_validation && beta_organization_service_delete_organization_domain_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_organization_service_delete_organization_domain_request' when calling Api::BetaOrganizationServiceApi.delete_organization_domain" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.org.v2beta.OrganizationService/DeleteOrganizationDomain'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_organization_service_delete_organization_domain_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaOrganizationServiceDeleteOrganizationDomainResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.delete_organization_domain", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#delete_organization_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # DeleteOrganizationMetadata
      # Delete Organization Metadata   Delete metadata objects from an organization with a specific key.   Required permission:   - &#x60;org.write&#x60;
          # @param beta_organization_service_delete_organization_metadata_request [BetaOrganizationServiceDeleteOrganizationMetadataRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaOrganizationServiceDeleteOrganizationMetadataResponse]
    def delete_organization_metadata(beta_organization_service_delete_organization_metadata_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.delete_organization_metadata ...' # MODIFIED
    end
          # verify the required parameter 'beta_organization_service_delete_organization_metadata_request' is set
          if @api_client.config.client_side_validation && beta_organization_service_delete_organization_metadata_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_organization_service_delete_organization_metadata_request' when calling Api::BetaOrganizationServiceApi.delete_organization_metadata" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.org.v2beta.OrganizationService/DeleteOrganizationMetadata'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_organization_service_delete_organization_metadata_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaOrganizationServiceDeleteOrganizationMetadataResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.delete_organization_metadata", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#delete_organization_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # GenerateOrganizationDomainValidation
      # Generate Organization Domain Validation   Generate a new file to be able to verify your domain with DNS or HTTP challenge.   Required permission:   - &#x60;org.write&#x60;
          # @param beta_organization_service_generate_organization_domain_validation_request [BetaOrganizationServiceGenerateOrganizationDomainValidationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaOrganizationServiceGenerateOrganizationDomainValidationResponse]
    def generate_organization_domain_validation(beta_organization_service_generate_organization_domain_validation_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.generate_organization_domain_validation ...' # MODIFIED
    end
          # verify the required parameter 'beta_organization_service_generate_organization_domain_validation_request' is set
          if @api_client.config.client_side_validation && beta_organization_service_generate_organization_domain_validation_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_organization_service_generate_organization_domain_validation_request' when calling Api::BetaOrganizationServiceApi.generate_organization_domain_validation" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.org.v2beta.OrganizationService/GenerateOrganizationDomainValidation'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_organization_service_generate_organization_domain_validation_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaOrganizationServiceGenerateOrganizationDomainValidationResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.generate_organization_domain_validation", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#generate_organization_domain_validation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # ListOrganizationDomains
      # List Organization Domains   Returns the list of registered domains of an organization. The domains are used to identify to which organization a user belongs.    Required permission:   - &#x60;org.read&#x60;
          # @param beta_organization_service_list_organization_domains_request [BetaOrganizationServiceListOrganizationDomainsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaOrganizationServiceListOrganizationDomainsResponse]
    def list_organization_domains(beta_organization_service_list_organization_domains_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.list_organization_domains ...' # MODIFIED
    end
          # verify the required parameter 'beta_organization_service_list_organization_domains_request' is set
          if @api_client.config.client_side_validation && beta_organization_service_list_organization_domains_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_organization_service_list_organization_domains_request' when calling Api::BetaOrganizationServiceApi.list_organization_domains" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.org.v2beta.OrganizationService/ListOrganizationDomains'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_organization_service_list_organization_domains_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaOrganizationServiceListOrganizationDomainsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.list_organization_domains", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#list_organization_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # ListOrganizationMetadata
      # List Organization Metadata   List metadata of an organization filtered by query.   Required permission:   - &#x60;org.read&#x60;
          # @param beta_organization_service_list_organization_metadata_request [BetaOrganizationServiceListOrganizationMetadataRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaOrganizationServiceListOrganizationMetadataResponse]
    def list_organization_metadata(beta_organization_service_list_organization_metadata_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.list_organization_metadata ...' # MODIFIED
    end
          # verify the required parameter 'beta_organization_service_list_organization_metadata_request' is set
          if @api_client.config.client_side_validation && beta_organization_service_list_organization_metadata_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_organization_service_list_organization_metadata_request' when calling Api::BetaOrganizationServiceApi.list_organization_metadata" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.org.v2beta.OrganizationService/ListOrganizationMetadata'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_organization_service_list_organization_metadata_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaOrganizationServiceListOrganizationMetadataResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.list_organization_metadata", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#list_organization_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # ListOrganizations
      # List Organizations   Returns a list of organizations that match the requesting filters. All filters are applied with an AND condition.   Required permission:   - &#x60;iam.read&#x60;
          # @param beta_organization_service_list_organizations_request [BetaOrganizationServiceListOrganizationsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaOrganizationServiceListOrganizationsResponse]
    def list_organizations(beta_organization_service_list_organizations_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.list_organizations ...' # MODIFIED
    end
          # verify the required parameter 'beta_organization_service_list_organizations_request' is set
          if @api_client.config.client_side_validation && beta_organization_service_list_organizations_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_organization_service_list_organizations_request' when calling Api::BetaOrganizationServiceApi.list_organizations" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.org.v2beta.OrganizationService/ListOrganizations'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_organization_service_list_organizations_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaOrganizationServiceListOrganizationsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.list_organizations", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#list_organizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # Dummy endpoint to retain union-member schemas
      # @param [Hash] opts the optional parameters
    # @return [NoOp200Response14]
    def no_op(opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.no_op ...' # MODIFIED
    end
    # resource path
    local_var_path = '/5d674148'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'NoOp200Response14'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.no_op", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#no_op\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # SetOrganizationMetadata
      # Set Organization Metadata   Adds or updates a metadata value for the requested key. Make sure the value is base64 encoded.   Required permission:   - &#x60;org.write&#x60;
          # @param beta_organization_service_set_organization_metadata_request [BetaOrganizationServiceSetOrganizationMetadataRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaOrganizationServiceSetOrganizationMetadataResponse]
    def set_organization_metadata(beta_organization_service_set_organization_metadata_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.set_organization_metadata ...' # MODIFIED
    end
          # verify the required parameter 'beta_organization_service_set_organization_metadata_request' is set
          if @api_client.config.client_side_validation && beta_organization_service_set_organization_metadata_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_organization_service_set_organization_metadata_request' when calling Api::BetaOrganizationServiceApi.set_organization_metadata" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.org.v2beta.OrganizationService/SetOrganizationMetadata'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_organization_service_set_organization_metadata_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaOrganizationServiceSetOrganizationMetadataResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.set_organization_metadata", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#set_organization_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # UpdateOrganization
      # Update Organization   Change the name of the organization.   Required permission:   - &#x60;org.write&#x60;
          # @param beta_organization_service_update_organization_request [BetaOrganizationServiceUpdateOrganizationRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaOrganizationServiceUpdateOrganizationResponse]
    def update_organization(beta_organization_service_update_organization_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.update_organization ...' # MODIFIED
    end
          # verify the required parameter 'beta_organization_service_update_organization_request' is set
          if @api_client.config.client_side_validation && beta_organization_service_update_organization_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_organization_service_update_organization_request' when calling Api::BetaOrganizationServiceApi.update_organization" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.org.v2beta.OrganizationService/UpdateOrganization'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_organization_service_update_organization_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaOrganizationServiceUpdateOrganizationResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.update_organization", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#update_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # VerifyOrganizationDomain
      # Verify Organization Domain   Make sure you have added the required verification to your domain, depending on the method you have chosen (HTTP or DNS challenge). ZITADEL will check it and set the domain as verified if it was successful. A verify domain has to be unique.   Required permission:   - &#x60;org.write&#x60;
          # @param beta_organization_service_verify_organization_domain_request [BetaOrganizationServiceVerifyOrganizationDomainRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaOrganizationServiceVerifyOrganizationDomainResponse]
    def verify_organization_domain(beta_organization_service_verify_organization_domain_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaOrganizationServiceApi.verify_organization_domain ...' # MODIFIED
    end
          # verify the required parameter 'beta_organization_service_verify_organization_domain_request' is set
          if @api_client.config.client_side_validation && beta_organization_service_verify_organization_domain_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_organization_service_verify_organization_domain_request' when calling Api::BetaOrganizationServiceApi.verify_organization_domain" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.org.v2beta.OrganizationService/VerifyOrganizationDomain'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_organization_service_verify_organization_domain_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaOrganizationServiceVerifyOrganizationDomainResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaOrganizationServiceApi.verify_organization_domain", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaOrganizationServiceApi#verify_organization_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end
  end
end
