=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Zitadel::Client
module Api # Added Api module
  class SessionServiceApi
  attr_accessor :api_client

  def initialize(api_client = ApiClient.default)
  @api_client = api_client
  end
      # Create a new session
      # Create a new session. A token will be returned, which is required for further updates of the session.
          # @param session_service_create_session_request [SessionServiceCreateSessionRequest]
      # @param [Hash] opts the optional parameters
    # @return [SessionServiceCreateSessionResponse]
    def session_service_create_session(session_service_create_session_request, opts = {})
    data, _status_code, _headers = session_service_create_session_with_http_info(session_service_create_session_request, opts)
    data
    end

      # Create a new session
      # Create a new session. A token will be returned, which is required for further updates of the session.
          # @param session_service_create_session_request [SessionServiceCreateSessionRequest]
      # @param [Hash] opts the optional parameters
    # @return [Array<(SessionServiceCreateSessionResponse, Integer, Hash)>] SessionServiceCreateSessionResponse data, response status code and response headers
    def session_service_create_session_with_http_info(session_service_create_session_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::SessionServiceApi.session_service_create_session ...' # MODIFIED
    end
          # verify the required parameter 'session_service_create_session_request' is set
          if @api_client.config.client_side_validation && session_service_create_session_request.nil?
          fail ArgumentError, "Missing the required parameter 'session_service_create_session_request' when calling Api::SessionServiceApi.session_service_create_session" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/sessions'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(session_service_create_session_request)

    # return_type
    return_type = opts[:debug_return_type] || 'SessionServiceCreateSessionResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::SessionServiceApi.session_service_create_session", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::SessionServiceApi#session_service_create_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # Terminate an existing session
      # Terminate your own session or if granted any other session.
          # @param session_id [String] \&quot;id of the session to terminate\&quot;
          # @param session_service_delete_session_request [SessionServiceDeleteSessionRequest]
      # @param [Hash] opts the optional parameters
    # @return [SessionServiceDeleteSessionResponse]
    def session_service_delete_session(session_id, session_service_delete_session_request, opts = {})
    data, _status_code, _headers = session_service_delete_session_with_http_info(session_id, session_service_delete_session_request, opts)
    data
    end

      # Terminate an existing session
      # Terminate your own session or if granted any other session.
          # @param session_id [String] \&quot;id of the session to terminate\&quot;
          # @param session_service_delete_session_request [SessionServiceDeleteSessionRequest]
      # @param [Hash] opts the optional parameters
    # @return [Array<(SessionServiceDeleteSessionResponse, Integer, Hash)>] SessionServiceDeleteSessionResponse data, response status code and response headers
    def session_service_delete_session_with_http_info(session_id, session_service_delete_session_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::SessionServiceApi.session_service_delete_session ...' # MODIFIED
    end
          # verify the required parameter 'session_id' is set
          if @api_client.config.client_side_validation && session_id.nil?
          fail ArgumentError, "Missing the required parameter 'session_id' when calling Api::SessionServiceApi.session_service_delete_session" # MODIFIED
          end
          # verify the required parameter 'session_service_delete_session_request' is set
          if @api_client.config.client_side_validation && session_service_delete_session_request.nil?
          fail ArgumentError, "Missing the required parameter 'session_service_delete_session_request' when calling Api::SessionServiceApi.session_service_delete_session" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/sessions/{sessionId}'.sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(session_service_delete_session_request)

    # return_type
    return_type = opts[:debug_return_type] || 'SessionServiceDeleteSessionResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::SessionServiceApi.session_service_delete_session", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::SessionServiceApi#session_service_delete_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # Get a session
      # Get a session and all its information like the time of the user or password verification
          # @param session_id [String]
      # @param [Hash] opts the optional parameters
        # @option opts [String] :session_token
    # @return [SessionServiceGetSessionResponse]
    def session_service_get_session(session_id, opts = {})
    data, _status_code, _headers = session_service_get_session_with_http_info(session_id, opts)
    data
    end

      # Get a session
      # Get a session and all its information like the time of the user or password verification
          # @param session_id [String]
      # @param [Hash] opts the optional parameters
        # @option opts [String] :session_token
    # @return [Array<(SessionServiceGetSessionResponse, Integer, Hash)>] SessionServiceGetSessionResponse data, response status code and response headers
    def session_service_get_session_with_http_info(session_id, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::SessionServiceApi.session_service_get_session ...' # MODIFIED
    end
          # verify the required parameter 'session_id' is set
          if @api_client.config.client_side_validation && session_id.nil?
          fail ArgumentError, "Missing the required parameter 'session_id' when calling Api::SessionServiceApi.session_service_get_session" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/sessions/{sessionId}'.sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}
        query_params[:'sessionToken'] = opts[:'session_token'] if !opts[:'session_token'].nil?

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'SessionServiceGetSessionResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::SessionServiceApi.session_service_get_session", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::SessionServiceApi#session_service_get_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # Search sessions
      # Search for sessions
          # @param session_service_list_sessions_request [SessionServiceListSessionsRequest]
      # @param [Hash] opts the optional parameters
    # @return [SessionServiceListSessionsResponse]
    def session_service_list_sessions(session_service_list_sessions_request, opts = {})
    data, _status_code, _headers = session_service_list_sessions_with_http_info(session_service_list_sessions_request, opts)
    data
    end

      # Search sessions
      # Search for sessions
          # @param session_service_list_sessions_request [SessionServiceListSessionsRequest]
      # @param [Hash] opts the optional parameters
    # @return [Array<(SessionServiceListSessionsResponse, Integer, Hash)>] SessionServiceListSessionsResponse data, response status code and response headers
    def session_service_list_sessions_with_http_info(session_service_list_sessions_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::SessionServiceApi.session_service_list_sessions ...' # MODIFIED
    end
          # verify the required parameter 'session_service_list_sessions_request' is set
          if @api_client.config.client_side_validation && session_service_list_sessions_request.nil?
          fail ArgumentError, "Missing the required parameter 'session_service_list_sessions_request' when calling Api::SessionServiceApi.session_service_list_sessions" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/sessions/search'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(session_service_list_sessions_request)

    # return_type
    return_type = opts[:debug_return_type] || 'SessionServiceListSessionsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::SessionServiceApi.session_service_list_sessions", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::SessionServiceApi#session_service_list_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # Update an existing session
      # Update an existing session with new information.
          # @param session_id [String] \&quot;id of the session to update\&quot;
          # @param session_service_set_session_request [SessionServiceSetSessionRequest]
      # @param [Hash] opts the optional parameters
    # @return [SessionServiceSetSessionResponse]
    def session_service_set_session(session_id, session_service_set_session_request, opts = {})
    data, _status_code, _headers = session_service_set_session_with_http_info(session_id, session_service_set_session_request, opts)
    data
    end

      # Update an existing session
      # Update an existing session with new information.
          # @param session_id [String] \&quot;id of the session to update\&quot;
          # @param session_service_set_session_request [SessionServiceSetSessionRequest]
      # @param [Hash] opts the optional parameters
    # @return [Array<(SessionServiceSetSessionResponse, Integer, Hash)>] SessionServiceSetSessionResponse data, response status code and response headers
    def session_service_set_session_with_http_info(session_id, session_service_set_session_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::SessionServiceApi.session_service_set_session ...' # MODIFIED
    end
          # verify the required parameter 'session_id' is set
          if @api_client.config.client_side_validation && session_id.nil?
          fail ArgumentError, "Missing the required parameter 'session_id' when calling Api::SessionServiceApi.session_service_set_session" # MODIFIED
          end
          # verify the required parameter 'session_service_set_session_request' is set
          if @api_client.config.client_side_validation && session_service_set_session_request.nil?
          fail ArgumentError, "Missing the required parameter 'session_service_set_session_request' when calling Api::SessionServiceApi.session_service_set_session" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/sessions/{sessionId}'.sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(session_service_set_session_request)

    # return_type
    return_type = opts[:debug_return_type] || 'SessionServiceSetSessionResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::SessionServiceApi.session_service_set_session", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::SessionServiceApi#session_service_set_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end
  end
end # End of Api module
end
