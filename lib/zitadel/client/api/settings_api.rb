=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Zitadel::Client::Api
  class SettingsApi
  attr_accessor :api_client

  def initialize(api_client = ApiClient.default)
  @api_client = api_client
  end
      # Get Security Settings
      # Returns the security settings of the ZITADEL instance.
      # @param [Hash] opts the optional parameters
    # @return [SettingsServiceGetSecuritySettingsResponse]
    def settings_service_get_security_settings(opts = {})
    data, _status_code, _headers = settings_service_get_security_settings_with_http_info(opts)
    data
    end

      # Get Security Settings
      # Returns the security settings of the ZITADEL instance.
      # @param [Hash] opts the optional parameters
    # @return [Array<(SettingsServiceGetSecuritySettingsResponse, Integer, Hash)>] SettingsServiceGetSecuritySettingsResponse data, response status code and response headers
    def settings_service_get_security_settings_with_http_info(opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::SettingsApi.settings_service_get_security_settings ...' # MODIFIED
    end
    # resource path
    local_var_path = '/v2/settings/security'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'SettingsServiceGetSecuritySettingsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::SettingsApi.settings_service_get_security_settings", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::SettingsApi#settings_service_get_security_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # Set Security Settings
      # Set the security settings of the ZITADEL instance.
          # @param settings_service_set_security_settings_request [SettingsServiceSetSecuritySettingsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [SettingsServiceSetSecuritySettingsResponse]
    def settings_service_set_security_settings(settings_service_set_security_settings_request, opts = {})
    data, _status_code, _headers = settings_service_set_security_settings_with_http_info(settings_service_set_security_settings_request, opts)
    data
    end

      # Set Security Settings
      # Set the security settings of the ZITADEL instance.
          # @param settings_service_set_security_settings_request [SettingsServiceSetSecuritySettingsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [Array<(SettingsServiceSetSecuritySettingsResponse, Integer, Hash)>] SettingsServiceSetSecuritySettingsResponse data, response status code and response headers
    def settings_service_set_security_settings_with_http_info(settings_service_set_security_settings_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::SettingsApi.settings_service_set_security_settings ...' # MODIFIED
    end
          # verify the required parameter 'settings_service_set_security_settings_request' is set
          if @api_client.config.client_side_validation && settings_service_set_security_settings_request.nil?
          fail ArgumentError, "Missing the required parameter 'settings_service_set_security_settings_request' when calling Api::SettingsApi.settings_service_set_security_settings" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/policies/security'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(settings_service_set_security_settings_request)

    # return_type
    return_type = opts[:debug_return_type] || 'SettingsServiceSetSecuritySettingsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::SettingsApi.settings_service_set_security_settings", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::SettingsApi#settings_service_set_security_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end
  end
end
