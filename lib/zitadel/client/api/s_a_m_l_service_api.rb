=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module Zitadel::Client
module Api # Added Api module
  class SAMLServiceApi
  attr_accessor :api_client

  def initialize(api_client = ApiClient.default)
  @api_client = api_client
  end
      # Finalize a SAML Request and get the response.
      # Finalize a SAML Request and get the response definition for success or failure. The response must be handled as per the SAML definition to inform the application about the success or failure. On success, the response contains details for the application to obtain the SAMLResponse. This method can only be called once for an SAML request.
          # @param saml_request_id [String] ID of the SAML Request.
          # @param saml_service_create_response_request [SAMLServiceCreateResponseRequest]
      # @param [Hash] opts the optional parameters
    # @return [SAMLServiceCreateResponseResponse]
    def s_aml_service_create_response(saml_request_id, saml_service_create_response_request, opts = {})
    data, _status_code, _headers = s_aml_service_create_response_with_http_info(saml_request_id, saml_service_create_response_request, opts)
    data
    end

      # Finalize a SAML Request and get the response.
      # Finalize a SAML Request and get the response definition for success or failure. The response must be handled as per the SAML definition to inform the application about the success or failure. On success, the response contains details for the application to obtain the SAMLResponse. This method can only be called once for an SAML request.
          # @param saml_request_id [String] ID of the SAML Request.
          # @param saml_service_create_response_request [SAMLServiceCreateResponseRequest]
      # @param [Hash] opts the optional parameters
    # @return [Array<(SAMLServiceCreateResponseResponse, Integer, Hash)>] SAMLServiceCreateResponseResponse data, response status code and response headers
    def s_aml_service_create_response_with_http_info(saml_request_id, saml_service_create_response_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::SAMLServiceApi.s_aml_service_create_response ...' # MODIFIED
    end
          # verify the required parameter 'saml_request_id' is set
          if @api_client.config.client_side_validation && saml_request_id.nil?
          fail ArgumentError, "Missing the required parameter 'saml_request_id' when calling Api::SAMLServiceApi.s_aml_service_create_response" # MODIFIED
          end
          # verify the required parameter 'saml_service_create_response_request' is set
          if @api_client.config.client_side_validation && saml_service_create_response_request.nil?
          fail ArgumentError, "Missing the required parameter 'saml_service_create_response_request' when calling Api::SAMLServiceApi.s_aml_service_create_response" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/saml/saml_requests/{samlRequestId}'.sub('{' + 'samlRequestId' + '}', CGI.escape(saml_request_id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(saml_service_create_response_request)

    # return_type
    return_type = opts[:debug_return_type] || 'SAMLServiceCreateResponseResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::SAMLServiceApi.s_aml_service_create_response", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::SAMLServiceApi#s_aml_service_create_response\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end

      # Get SAML Request details
      # Get SAML Request details by ID. Returns details that are parsed from the application's SAML Request.
          # @param saml_request_id [String] ID of the SAML Request, as obtained from the redirect URL.
      # @param [Hash] opts the optional parameters
    # @return [SAMLServiceGetSAMLRequestResponse]
    def s_aml_service_get_saml_request(saml_request_id, opts = {})
    data, _status_code, _headers = s_aml_service_get_saml_request_with_http_info(saml_request_id, opts)
    data
    end

      # Get SAML Request details
      # Get SAML Request details by ID. Returns details that are parsed from the application&#39;s SAML Request.
          # @param saml_request_id [String] ID of the SAML Request, as obtained from the redirect URL.
      # @param [Hash] opts the optional parameters
    # @return [Array<(SAMLServiceGetSAMLRequestResponse, Integer, Hash)>] SAMLServiceGetSAMLRequestResponse data, response status code and response headers
    def s_aml_service_get_saml_request_with_http_info(saml_request_id, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::SAMLServiceApi.s_aml_service_get_saml_request ...' # MODIFIED
    end
          # verify the required parameter 'saml_request_id' is set
          if @api_client.config.client_side_validation && saml_request_id.nil?
          fail ArgumentError, "Missing the required parameter 'saml_request_id' when calling Api::SAMLServiceApi.s_aml_service_get_saml_request" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/saml/saml_requests/{samlRequestId}'.sub('{' + 'samlRequestId' + '}', CGI.escape(saml_request_id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'SAMLServiceGetSAMLRequestResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::SAMLServiceApi.s_aml_service_get_saml_request", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::SAMLServiceApi#s_aml_service_get_saml_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data, status_code, headers
    end
  end
end # End of Api module
end
