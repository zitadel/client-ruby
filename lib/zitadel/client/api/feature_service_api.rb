=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module Zitadel::Client::Api
  class FeatureServiceApi
  attr_accessor :api_client

  def initialize(api_client = ApiClient.default)
  @api_client = api_client
  end
      # Get Instance Features
      # Returns all configured features for an instance. Unset fields mean the feature is the current system default.  Required permissions:  - none
      # @param [Hash] opts the optional parameters
        # @option opts [Boolean] :inheritance Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource&#39;s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the instance, it will be omitted from the response or Not Found is returned when the instance has no features flags at all.
    # @return [FeatureServiceGetInstanceFeaturesResponse]
    def feature_service_get_instance_features(opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::FeatureServiceApi.feature_service_get_instance_features ...' # MODIFIED
    end
    # resource path
    local_var_path = '/v2/features/instance'

    # query parameters
    query_params = opts[:query_params] || {}
        query_params[:'inheritance'] = opts[:'inheritance'] if !opts[:'inheritance'].nil?

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'FeatureServiceGetInstanceFeaturesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::FeatureServiceApi.feature_service_get_instance_features", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::FeatureServiceApi#feature_service_get_instance_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # Get Organization Features
      # Returns all configured features for an organization. Unset fields mean the feature is the current instance default.  Required permissions:  - org.feature.read  - no permission required for the organization the user belongs to
          # @param organization_id [String] 
      # @param [Hash] opts the optional parameters
        # @option opts [Boolean] :inheritance Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource&#39;s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the organization, it will be omitted from the response or Not Found is returned when the organization has no features flags at all.
    # @return [FeatureServiceGetOrganizationFeaturesResponse]
    def feature_service_get_organization_features(organization_id, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::FeatureServiceApi.feature_service_get_organization_features ...' # MODIFIED
    end
          # verify the required parameter 'organization_id' is set
          if @api_client.config.client_side_validation && organization_id.nil?
          fail ArgumentError, "Missing the required parameter 'organization_id' when calling Api::FeatureServiceApi.feature_service_get_organization_features" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/features/organization/{organizationId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}
        query_params[:'inheritance'] = opts[:'inheritance'] if !opts[:'inheritance'].nil?

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'FeatureServiceGetOrganizationFeaturesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::FeatureServiceApi.feature_service_get_organization_features", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::FeatureServiceApi#feature_service_get_organization_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # Get System Features
      # Returns all configured features for the system. Unset fields mean the feature is the current system default.  Required permissions:  - none
      # @param [Hash] opts the optional parameters
    # @return [FeatureServiceGetSystemFeaturesResponse]
    def feature_service_get_system_features(opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::FeatureServiceApi.feature_service_get_system_features ...' # MODIFIED
    end
    # resource path
    local_var_path = '/v2/features/system'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'FeatureServiceGetSystemFeaturesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::FeatureServiceApi.feature_service_get_system_features", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::FeatureServiceApi#feature_service_get_system_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # Get User Features
      # Returns all configured features for a user. Unset fields mean the feature is the current organization default.  Required permissions:  - user.feature.read  - no permission required for the own user
          # @param user_id [String] 
      # @param [Hash] opts the optional parameters
        # @option opts [Boolean] :inheritance Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource&#39;s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the user, it will be ommitted from the response or Not Found is returned when the user has no features flags at all.
    # @return [FeatureServiceGetUserFeaturesResponse]
    def feature_service_get_user_features(user_id, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::FeatureServiceApi.feature_service_get_user_features ...' # MODIFIED
    end
          # verify the required parameter 'user_id' is set
          if @api_client.config.client_side_validation && user_id.nil?
          fail ArgumentError, "Missing the required parameter 'user_id' when calling Api::FeatureServiceApi.feature_service_get_user_features" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/features/user/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}
        query_params[:'inheritance'] = opts[:'inheritance'] if !opts[:'inheritance'].nil?

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'FeatureServiceGetUserFeaturesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::FeatureServiceApi.feature_service_get_user_features", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::FeatureServiceApi#feature_service_get_user_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # Reset Instance Features
      # Deletes ALL configured features for an instance, reverting the behaviors to system defaults.  Required permissions:  - iam.feature.delete
      # @param [Hash] opts the optional parameters
    # @return [FeatureServiceResetInstanceFeaturesResponse]
    def feature_service_reset_instance_features(opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::FeatureServiceApi.feature_service_reset_instance_features ...' # MODIFIED
    end
    # resource path
    local_var_path = '/v2/features/instance'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'FeatureServiceResetInstanceFeaturesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::FeatureServiceApi.feature_service_reset_instance_features", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::FeatureServiceApi#feature_service_reset_instance_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # Reset Organization Features
      # Deletes ALL configured features for an organization, reverting the behaviors to instance defaults.  Required permissions:  - org.feature.delete
          # @param organization_id [String] 
      # @param [Hash] opts the optional parameters
    # @return [FeatureServiceResetOrganizationFeaturesResponse]
    def feature_service_reset_organization_features(organization_id, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::FeatureServiceApi.feature_service_reset_organization_features ...' # MODIFIED
    end
          # verify the required parameter 'organization_id' is set
          if @api_client.config.client_side_validation && organization_id.nil?
          fail ArgumentError, "Missing the required parameter 'organization_id' when calling Api::FeatureServiceApi.feature_service_reset_organization_features" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/features/organization/{organizationId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'FeatureServiceResetOrganizationFeaturesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::FeatureServiceApi.feature_service_reset_organization_features", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::FeatureServiceApi#feature_service_reset_organization_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # Reset System Features
      # Deletes ALL configured features for the system, reverting the behaviors to system defaults.  Required permissions:  - system.feature.delete
      # @param [Hash] opts the optional parameters
    # @return [FeatureServiceResetSystemFeaturesResponse]
    def feature_service_reset_system_features(opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::FeatureServiceApi.feature_service_reset_system_features ...' # MODIFIED
    end
    # resource path
    local_var_path = '/v2/features/system'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'FeatureServiceResetSystemFeaturesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::FeatureServiceApi.feature_service_reset_system_features", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::FeatureServiceApi#feature_service_reset_system_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # Reset User Features
      # Deletes ALL configured features for a user, reverting the behaviors to organization defaults.  Required permissions:  - user.feature.delete
          # @param user_id [String] 
      # @param [Hash] opts the optional parameters
    # @return [FeatureServiceResetUserFeaturesResponse]
    def feature_service_reset_user_features(user_id, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::FeatureServiceApi.feature_service_reset_user_features ...' # MODIFIED
    end
          # verify the required parameter 'user_id' is set
          if @api_client.config.client_side_validation && user_id.nil?
          fail ArgumentError, "Missing the required parameter 'user_id' when calling Api::FeatureServiceApi.feature_service_reset_user_features" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/features/user/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'FeatureServiceResetUserFeaturesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::FeatureServiceApi.feature_service_reset_user_features", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::FeatureServiceApi#feature_service_reset_user_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # Set Instance Features
      # Configure and set features that apply to a complete instance. Only fields present in the request are set or unset.  Required permissions:  - iam.feature.write
          # @param feature_service_set_instance_features_request [FeatureServiceSetInstanceFeaturesRequest] 
      # @param [Hash] opts the optional parameters
    # @return [FeatureServiceSetInstanceFeaturesResponse]
    def feature_service_set_instance_features(feature_service_set_instance_features_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::FeatureServiceApi.feature_service_set_instance_features ...' # MODIFIED
    end
          # verify the required parameter 'feature_service_set_instance_features_request' is set
          if @api_client.config.client_side_validation && feature_service_set_instance_features_request.nil?
          fail ArgumentError, "Missing the required parameter 'feature_service_set_instance_features_request' when calling Api::FeatureServiceApi.feature_service_set_instance_features" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/features/instance'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(feature_service_set_instance_features_request)

    # return_type
    return_type = opts[:debug_return_type] || 'FeatureServiceSetInstanceFeaturesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::FeatureServiceApi.feature_service_set_instance_features", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::FeatureServiceApi#feature_service_set_instance_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # Set Organization Features
      # Configure and set features that apply to a complete instance. Only fields present in the request are set or unset.  Required permissions:  - org.feature.write
          # @param organization_id [String] 
      # @param [Hash] opts the optional parameters
    # @return [FeatureServiceSetOrganizationFeaturesResponse]
    def feature_service_set_organization_features(organization_id, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::FeatureServiceApi.feature_service_set_organization_features ...' # MODIFIED
    end
          # verify the required parameter 'organization_id' is set
          if @api_client.config.client_side_validation && organization_id.nil?
          fail ArgumentError, "Missing the required parameter 'organization_id' when calling Api::FeatureServiceApi.feature_service_set_organization_features" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/features/organization/{organizationId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'FeatureServiceSetOrganizationFeaturesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::FeatureServiceApi.feature_service_set_organization_features", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::FeatureServiceApi#feature_service_set_organization_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # Set System Features
      # Configure and set features that apply to the complete system. Only fields present in the request are set or unset.  Required permissions:  - system.feature.write
          # @param feature_service_set_system_features_request [FeatureServiceSetSystemFeaturesRequest] 
      # @param [Hash] opts the optional parameters
    # @return [FeatureServiceSetSystemFeaturesResponse]
    def feature_service_set_system_features(feature_service_set_system_features_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::FeatureServiceApi.feature_service_set_system_features ...' # MODIFIED
    end
          # verify the required parameter 'feature_service_set_system_features_request' is set
          if @api_client.config.client_side_validation && feature_service_set_system_features_request.nil?
          fail ArgumentError, "Missing the required parameter 'feature_service_set_system_features_request' when calling Api::FeatureServiceApi.feature_service_set_system_features" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/features/system'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(feature_service_set_system_features_request)

    # return_type
    return_type = opts[:debug_return_type] || 'FeatureServiceSetSystemFeaturesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::FeatureServiceApi.feature_service_set_system_features", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::FeatureServiceApi#feature_service_set_system_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # Set User Features
      # Configure and set features that apply to an user. Only fields present in the request are set or unset.  Required permissions:  - user.feature.write
          # @param user_id [String] 
      # @param [Hash] opts the optional parameters
    # @return [FeatureServiceSetUserFeaturesResponse]
    def feature_service_set_user_features(user_id, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::FeatureServiceApi.feature_service_set_user_features ...' # MODIFIED
    end
          # verify the required parameter 'user_id' is set
          if @api_client.config.client_side_validation && user_id.nil?
          fail ArgumentError, "Missing the required parameter 'user_id' when calling Api::FeatureServiceApi.feature_service_set_user_features" # MODIFIED
          end
    # resource path
    local_var_path = '/v2/features/user/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body]

    # return_type
    return_type = opts[:debug_return_type] || 'FeatureServiceSetUserFeaturesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::FeatureServiceApi.feature_service_set_user_features", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::FeatureServiceApi#feature_service_set_user_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end
  end
end
