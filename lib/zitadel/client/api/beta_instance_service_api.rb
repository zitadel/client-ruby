=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'cgi'

module Zitadel::Client::Api
  class BetaInstanceServiceApi
  attr_accessor :api_client

  def initialize(api_client = ApiClient.default)
  @api_client = api_client
  end
      # AddCustomDomain
      # Add Custom Domain   Adds a custom domain to the instance in context.   The instance_id in the input message will be used in the future   Required permissions:    - &#x60;system.domain.write&#x60;
          # @param beta_instance_service_add_custom_domain_request [BetaInstanceServiceAddCustomDomainRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaInstanceServiceAddCustomDomainResponse]
    def add_custom_domain(beta_instance_service_add_custom_domain_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaInstanceServiceApi.add_custom_domain ...' # MODIFIED
    end
          # verify the required parameter 'beta_instance_service_add_custom_domain_request' is set
          if @api_client.config.client_side_validation && beta_instance_service_add_custom_domain_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_instance_service_add_custom_domain_request' when calling Api::BetaInstanceServiceApi.add_custom_domain" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.instance.v2beta.InstanceService/AddCustomDomain'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_instance_service_add_custom_domain_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaInstanceServiceAddCustomDomainResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaInstanceServiceApi.add_custom_domain", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaInstanceServiceApi#add_custom_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # AddTrustedDomain
      # Add Trusted Domain   Adds a trusted domain to the instance.   The instance_id in the input message will be used in the future.   Required permissions:   - &#x60;iam.write&#x60;
          # @param beta_instance_service_add_trusted_domain_request [BetaInstanceServiceAddTrustedDomainRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaInstanceServiceAddTrustedDomainResponse]
    def add_trusted_domain(beta_instance_service_add_trusted_domain_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaInstanceServiceApi.add_trusted_domain ...' # MODIFIED
    end
          # verify the required parameter 'beta_instance_service_add_trusted_domain_request' is set
          if @api_client.config.client_side_validation && beta_instance_service_add_trusted_domain_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_instance_service_add_trusted_domain_request' when calling Api::BetaInstanceServiceApi.add_trusted_domain" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.instance.v2beta.InstanceService/AddTrustedDomain'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_instance_service_add_trusted_domain_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaInstanceServiceAddTrustedDomainResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaInstanceServiceApi.add_trusted_domain", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaInstanceServiceApi#add_trusted_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # DeleteInstance
      # Delete Instance   Deletes an instance with the given ID.   Required permissions:    - &#x60;system.instance.delete&#x60;
          # @param beta_instance_service_delete_instance_request [BetaInstanceServiceDeleteInstanceRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaInstanceServiceDeleteInstanceResponse]
    def delete_instance(beta_instance_service_delete_instance_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaInstanceServiceApi.delete_instance ...' # MODIFIED
    end
          # verify the required parameter 'beta_instance_service_delete_instance_request' is set
          if @api_client.config.client_side_validation && beta_instance_service_delete_instance_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_instance_service_delete_instance_request' when calling Api::BetaInstanceServiceApi.delete_instance" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.instance.v2beta.InstanceService/DeleteInstance'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_instance_service_delete_instance_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaInstanceServiceDeleteInstanceResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaInstanceServiceApi.delete_instance", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaInstanceServiceApi#delete_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # GetInstance
      # Get Instance   Returns the instance in the current context.   The instace_id in the input message will be used in the future.   Required permissions:    - &#x60;iam.read&#x60;
          # @param beta_instance_service_get_instance_request [BetaInstanceServiceGetInstanceRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaInstanceServiceGetInstanceResponse]
    def get_instance(beta_instance_service_get_instance_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaInstanceServiceApi.get_instance ...' # MODIFIED
    end
          # verify the required parameter 'beta_instance_service_get_instance_request' is set
          if @api_client.config.client_side_validation && beta_instance_service_get_instance_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_instance_service_get_instance_request' when calling Api::BetaInstanceServiceApi.get_instance" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.instance.v2beta.InstanceService/GetInstance'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_instance_service_get_instance_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaInstanceServiceGetInstanceResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaInstanceServiceApi.get_instance", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaInstanceServiceApi#get_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # ListCustomDomains
      # List Custom Domains   Lists custom domains of the instance.   The instance_id in the input message will be used in the future.   Required permissions:   - &#x60;iam.read&#x60;
          # @param beta_instance_service_list_custom_domains_request [BetaInstanceServiceListCustomDomainsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaInstanceServiceListCustomDomainsResponse]
    def list_custom_domains(beta_instance_service_list_custom_domains_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaInstanceServiceApi.list_custom_domains ...' # MODIFIED
    end
          # verify the required parameter 'beta_instance_service_list_custom_domains_request' is set
          if @api_client.config.client_side_validation && beta_instance_service_list_custom_domains_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_instance_service_list_custom_domains_request' when calling Api::BetaInstanceServiceApi.list_custom_domains" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.instance.v2beta.InstanceService/ListCustomDomains'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_instance_service_list_custom_domains_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaInstanceServiceListCustomDomainsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaInstanceServiceApi.list_custom_domains", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaInstanceServiceApi#list_custom_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # ListInstances
      # List Instances   Lists instances matching the given query.  The query can be used to filter either by instance ID or domain.  The request is paginated and returns 100 results by default.   Required permissions:   - &#x60;system.instance.read&#x60;
          # @param beta_instance_service_list_instances_request [BetaInstanceServiceListInstancesRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaInstanceServiceListInstancesResponse]
    def list_instances(beta_instance_service_list_instances_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaInstanceServiceApi.list_instances ...' # MODIFIED
    end
          # verify the required parameter 'beta_instance_service_list_instances_request' is set
          if @api_client.config.client_side_validation && beta_instance_service_list_instances_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_instance_service_list_instances_request' when calling Api::BetaInstanceServiceApi.list_instances" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.instance.v2beta.InstanceService/ListInstances'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_instance_service_list_instances_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaInstanceServiceListInstancesResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaInstanceServiceApi.list_instances", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaInstanceServiceApi#list_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # ListTrustedDomains
      # List Trusted Domains   Lists trusted domains of the instance.   The instance_id in the input message will be used in the future.   Required permissions:    - &#x60;iam.read&#x60;
          # @param beta_instance_service_list_trusted_domains_request [BetaInstanceServiceListTrustedDomainsRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaInstanceServiceListTrustedDomainsResponse]
    def list_trusted_domains(beta_instance_service_list_trusted_domains_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaInstanceServiceApi.list_trusted_domains ...' # MODIFIED
    end
          # verify the required parameter 'beta_instance_service_list_trusted_domains_request' is set
          if @api_client.config.client_side_validation && beta_instance_service_list_trusted_domains_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_instance_service_list_trusted_domains_request' when calling Api::BetaInstanceServiceApi.list_trusted_domains" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.instance.v2beta.InstanceService/ListTrustedDomains'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_instance_service_list_trusted_domains_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaInstanceServiceListTrustedDomainsResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaInstanceServiceApi.list_trusted_domains", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaInstanceServiceApi#list_trusted_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # RemoveCustomDomain
      # Remove Custom Domain   Removes a custom domain from the instance.   The instance_id in the input message will be used in the future.   Required permissions:   - &#x60;system.domain.write&#x60;
          # @param beta_instance_service_remove_custom_domain_request [BetaInstanceServiceRemoveCustomDomainRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaInstanceServiceRemoveCustomDomainResponse]
    def remove_custom_domain(beta_instance_service_remove_custom_domain_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaInstanceServiceApi.remove_custom_domain ...' # MODIFIED
    end
          # verify the required parameter 'beta_instance_service_remove_custom_domain_request' is set
          if @api_client.config.client_side_validation && beta_instance_service_remove_custom_domain_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_instance_service_remove_custom_domain_request' when calling Api::BetaInstanceServiceApi.remove_custom_domain" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.instance.v2beta.InstanceService/RemoveCustomDomain'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_instance_service_remove_custom_domain_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaInstanceServiceRemoveCustomDomainResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaInstanceServiceApi.remove_custom_domain", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaInstanceServiceApi#remove_custom_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # RemoveTrustedDomain
      # Remove Trusted Domain   Removes a trusted domain from the instance.   The instance_id in the input message will be used in the future.   Required permissions:   - &#x60;iam.write&#x60;
          # @param beta_instance_service_remove_trusted_domain_request [BetaInstanceServiceRemoveTrustedDomainRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaInstanceServiceRemoveTrustedDomainResponse]
    def remove_trusted_domain(beta_instance_service_remove_trusted_domain_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaInstanceServiceApi.remove_trusted_domain ...' # MODIFIED
    end
          # verify the required parameter 'beta_instance_service_remove_trusted_domain_request' is set
          if @api_client.config.client_side_validation && beta_instance_service_remove_trusted_domain_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_instance_service_remove_trusted_domain_request' when calling Api::BetaInstanceServiceApi.remove_trusted_domain" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.instance.v2beta.InstanceService/RemoveTrustedDomain'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_instance_service_remove_trusted_domain_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaInstanceServiceRemoveTrustedDomainResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaInstanceServiceApi.remove_trusted_domain", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaInstanceServiceApi#remove_trusted_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end

      # UpdateInstance
      # Update Instance   Updates instance in context with the given name.   The instance_id in the input message will be used in the future.   Required permissions:    - &#x60;iam.write&#x60;
          # @param beta_instance_service_update_instance_request [BetaInstanceServiceUpdateInstanceRequest] 
      # @param [Hash] opts the optional parameters
    # @return [BetaInstanceServiceUpdateInstanceResponse]
    def update_instance(beta_instance_service_update_instance_request, opts = {})
    if @api_client.config.debugging
    @api_client.config.logger.debug 'Calling API: Api::BetaInstanceServiceApi.update_instance ...' # MODIFIED
    end
          # verify the required parameter 'beta_instance_service_update_instance_request' is set
          if @api_client.config.client_side_validation && beta_instance_service_update_instance_request.nil?
          fail ArgumentError, "Missing the required parameter 'beta_instance_service_update_instance_request' when calling Api::BetaInstanceServiceApi.update_instance" # MODIFIED
          end
    # resource path
    local_var_path = '/zitadel.instance.v2beta.InstanceService/UpdateInstance'

    # query parameters
    query_params = opts[:query_params] || {}

    # header parameters
    header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
      header_params['Content-Type'] = content_type
      end

    # form parameters
    form_params = opts[:form_params] || {}

    # http body (model)
    post_body = opts[:debug_body] || @api_client.object_to_http_body(beta_instance_service_update_instance_request)

    # return_type
    return_type = opts[:debug_return_type] || 'BetaInstanceServiceUpdateInstanceResponse'

    # auth_names
    auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

    new_options = opts.merge(
    :operation => :"Api::BetaInstanceServiceApi.update_instance", # MODIFIED
    :header_params => header_params,
    :query_params => query_params,
    :form_params => form_params,
    :body => post_body,
    :auth_names => auth_names,
    :return_type => return_type
    )

    data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
    if @api_client.config.debugging
    @api_client.config.logger.debug "API called: Api::BetaInstanceServiceApi#update_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" # MODIFIED
    end
    return data
    end
  end
end
