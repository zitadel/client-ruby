=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module Zitadel::Client::Models
        class IdentityProviderServiceLDAPConfig
    attr_accessor :servers

    attr_accessor :start_tls

    attr_accessor :base_dn

    attr_accessor :bind_dn

    attr_accessor :user_base

    attr_accessor :user_object_classes

    attr_accessor :user_filters

    # A Duration represents a signed, fixed-length span of time represented  as a count of seconds and fractions of seconds at nanosecond  resolution. It is independent of any calendar and concepts like \"day\"  or \"month\". It is related to Timestamp in that the difference between  two Timestamp values is a Duration and it can be added or subtracted  from a Timestamp. Range is approximately +-10,000 years.   # Examples   Example 1: Compute Duration from two Timestamps in pseudo code.       Timestamp start = ...;      Timestamp end = ...;      Duration duration = ...;       duration.seconds = end.seconds - start.seconds;      duration.nanos = end.nanos - start.nanos;       if (duration.seconds < 0 && duration.nanos > 0) {        duration.seconds += 1;        duration.nanos -= 1000000000;      } else if (duration.seconds > 0 && duration.nanos < 0) {        duration.seconds -= 1;        duration.nanos += 1000000000;      }   Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.       Timestamp start = ...;      Duration duration = ...;      Timestamp end = ...;       end.seconds = start.seconds + duration.seconds;      end.nanos = start.nanos + duration.nanos;       if (end.nanos < 0) {        end.seconds -= 1;        end.nanos += 1000000000;      } else if (end.nanos >= 1000000000) {        end.seconds += 1;        end.nanos -= 1000000000;      }   Example 3: Compute Duration from datetime.timedelta in Python.       td = datetime.timedelta(days=3, minutes=10)      duration = Duration()      duration.FromTimedelta(td)   # JSON Mapping   In JSON format, the Duration type is encoded as a string rather than an  object, where the string ends in the suffix \"s\" (indicating seconds) and  is preceded by the number of seconds, with nanoseconds expressed as  fractional seconds. For example, 3 seconds with 0 nanoseconds should be  encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should  be expressed in JSON format as \"3.000000001s\", and 3 seconds and 1  microsecond should be expressed in JSON format as \"3.000001s\".
    attr_accessor :timeout

    attr_accessor :attributes

    attr_accessor :root_ca

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'servers' => :'servers',
        :'start_tls' => :'startTls',
        :'base_dn' => :'baseDn',
        :'bind_dn' => :'bindDn',
        :'user_base' => :'userBase',
        :'user_object_classes' => :'userObjectClasses',
        :'user_filters' => :'userFilters',
        :'timeout' => :'timeout',
        :'attributes' => :'attributes',
        :'root_ca' => :'rootCa'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'servers' => :'Array<String>',
        :'start_tls' => :'Boolean',
        :'base_dn' => :'String',
        :'bind_dn' => :'String',
        :'user_base' => :'String',
        :'user_object_classes' => :'Array<String>',
        :'user_filters' => :'Array<String>',
        :'timeout' => :'String',
        :'attributes' => :'IdentityProviderServiceLDAPAttributes',
        :'root_ca' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Models attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        # MODIFIED: Updated class name in error message
        fail ArgumentError, "The input argument (attributes) must be a hash in `Zitadel::Client::Models::IdentityProviderServiceLDAPConfig` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          # MODIFIED: Updated class name in error message
          fail ArgumentError, "`#{k}` is not a valid attribute in `Zitadel::Client::Models::IdentityProviderServiceLDAPConfig`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'servers')
        if (value = attributes[:'servers']).is_a?(Array)
          self.servers = value
        end
      end

      if attributes.key?(:'start_tls')
        self.start_tls = attributes[:'start_tls']
      end

      if attributes.key?(:'base_dn')
        self.base_dn = attributes[:'base_dn']
      end

      if attributes.key?(:'bind_dn')
        self.bind_dn = attributes[:'bind_dn']
      end

      if attributes.key?(:'user_base')
        self.user_base = attributes[:'user_base']
      end

      if attributes.key?(:'user_object_classes')
        if (value = attributes[:'user_object_classes']).is_a?(Array)
          self.user_object_classes = value
        end
      end

      if attributes.key?(:'user_filters')
        if (value = attributes[:'user_filters']).is_a?(Array)
          self.user_filters = value
        end
      end

      if attributes.key?(:'timeout')
        self.timeout = attributes[:'timeout']
      end

      if attributes.key?(:'attributes')
        self.attributes = attributes[:'attributes']
      end

      if attributes.key?(:'root_ca')
        self.root_ca = attributes[:'root_ca']
      end
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          servers == o.servers &&
          start_tls == o.start_tls &&
          base_dn == o.base_dn &&
          bind_dn == o.bind_dn &&
          user_base == o.user_base &&
          user_object_classes == o.user_object_classes &&
          user_filters == o.user_filters &&
          timeout == o.timeout &&
          attributes == o.attributes &&
          root_ca == o.root_ca
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [servers, start_tls, base_dn, bind_dn, user_base, user_object_classes, user_filters, timeout, attributes, root_ca].hash
    end

# Builds the object from hash
# @param [Hash] attributes Models attributes in the form of hash
# @return [Object] Returns the model itself
def self.build_from_hash(attributes)
  return nil unless attributes.is_a?(Hash)
  attributes = attributes.transform_keys(&:to_sym)
  transformed_hash = {}
  openapi_types.each_pair do |key, type|
    if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
      transformed_hash["#{key}"] = nil
    elsif type =~ /\AArray<(.*)>/i
      # check to ensure the input is an array given that the attribute
      # is documented as an array but the input is not
      if attributes[attribute_map[key]].is_a?(Array)
        transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
      end
    elsif !attributes[attribute_map[key]].nil?
      transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
    end
  end
  new(transformed_hash) # `new` will call the initialize method of the specific model class.
end

# Deserializes the data based on type
# @param string type Data type
# @param string value Value to be deserialized
# @return [Object] Deserialized data
def self._deserialize(type, value)
  case type.to_sym
  when :Time
    Time.parse(value)
  when :Date
    Date.parse(value)
  when :String
    value.to_s
  when :Integer
    value.to_i
  when :Float
    value.to_f
  when :Boolean
    if value.to_s =~ /\A(true|t|yes|y|1)\z/i
      true
    else
      false
    end
  when :Object
    # generic object (usually a Hash), return directly
    value
  when /\AArray<(?<inner_type>.+)>\z/
    inner_type = Regexp.last_match[:inner_type]
    value.map { |v| _deserialize(inner_type, v) }
  when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
    k_type = Regexp.last_match[:k_type]
    v_type = Regexp.last_match[:v_type]
    {}.tap do |hash|
      value.each do |k, v|
        hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
      end
    end
  else # model
    # models (e.g. Pet) or oneOf/anyOf constructs that resolve to a model name
    # MODIFIED: Ensure model is looked up in the Models namespace
    # 'type' here is expected to be the simple class name (e.g., "User", "OrderDetails")
    klass = Zitadel::Client::Models.const_get(type)
    # The `klass.build` method is for oneOf/anyOf types (defined in partial_oneof_module.mustache / partial_anyof_module.mustache)
    # The `klass.build_from_hash` is for regular model types (defined in this base_object.mustache itself)
    if klass.respond_to?(:openapi_one_of) || klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_allOf)
      klass.build(value) # For oneOf/anyOf/allOf, delegate to their specific build method
    else
      klass.build_from_hash(value) # For regular models
    end
  end
end

# Returns the string representation of the object
# @return [String] String presentation of the object
def to_s
  to_hash.to_s
end

# to_body is an alias to to_hash (backward compatibility)
# @return [Hash] Returns the object in the form of hash
def to_body
  to_hash
end

# Returns the object in the form of hash
# @return [Hash] Returns the object in the form of hash
def to_hash
  hash = {} # Calls super.to_hash if parent exists
  self.class.attribute_map.each_pair do |attr, param|
    value = self.send(attr)
    if value.nil?
      is_nullable = self.class.openapi_nullable.include?(attr)
      next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
    end

    hash[param] = _to_hash(value)
  end
  hash
end

# Outputs non-array value in the form of hash
# For object, use to_hash. Otherwise, just return the value
# @param [Object] value Any valid value
# @return [Hash] Returns the value in the form of hash
def _to_hash(value)
  if value.is_a?(Array)
    value.compact.map { |v| _to_hash(v) }
  elsif value.is_a?(Hash)
    {}.tap do |hash|
      value.each { |k, v| hash[k] = _to_hash(v) }
    end
  elsif value.respond_to? :to_hash
    value.to_hash
  else
    value
  end
end

  end

end
