=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.13.0

=end

require 'date'
require 'time'

module Zitadel::Client::Models
        class NoOp200Response
    attr_accessor :c31ccb09_2819_4fd3_98ef_672ffac6a2f4

    attr_accessor :_0d82200f_65fa_4860_bbc8_4de1f4625bc5

    attr_accessor :fc357899_be22_4a71_afa4_a135c8bea3de

    attr_accessor :_7d8ada7e_f411_4f06_890f_5e7de4dd9205

    attr_accessor :_58ba846a_372c_4b22_9bd7_1bc89d3b38d0

    attr_accessor :a5ca2a84_3c67_4958_ae95_cc7a5013dede

    attr_accessor :f146deeb_58ee_4703_9126_247652af7c4c

    attr_accessor :_11f61595_46b7_40d2_ac3b_04e9ab410948

    attr_accessor :_1fcf2605_9a74_47df_af7d_ca7fc3063db5

    attr_accessor :_683ae0ab_1857_48d6_b60d_f429fd80cf25

    attr_accessor :_4572735e_99f3_41c8_a8a9_ae76ac3bae9d

    attr_accessor :cc938b52_4333_47dd_986f_bd4d1bf0ee8a

    attr_accessor :da4eea2c_1f26_42dc_ad3b_e1364267423e

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'c31ccb09_2819_4fd3_98ef_672ffac6a2f4' => :'c31ccb09-2819-4fd3-98ef-672ffac6a2f4',
        :'_0d82200f_65fa_4860_bbc8_4de1f4625bc5' => :'0d82200f-65fa-4860-bbc8-4de1f4625bc5',
        :'fc357899_be22_4a71_afa4_a135c8bea3de' => :'fc357899-be22-4a71-afa4-a135c8bea3de',
        :'_7d8ada7e_f411_4f06_890f_5e7de4dd9205' => :'7d8ada7e-f411-4f06-890f-5e7de4dd9205',
        :'_58ba846a_372c_4b22_9bd7_1bc89d3b38d0' => :'58ba846a-372c-4b22-9bd7-1bc89d3b38d0',
        :'a5ca2a84_3c67_4958_ae95_cc7a5013dede' => :'a5ca2a84-3c67-4958-ae95-cc7a5013dede',
        :'f146deeb_58ee_4703_9126_247652af7c4c' => :'f146deeb-58ee-4703-9126-247652af7c4c',
        :'_11f61595_46b7_40d2_ac3b_04e9ab410948' => :'11f61595-46b7-40d2-ac3b-04e9ab410948',
        :'_1fcf2605_9a74_47df_af7d_ca7fc3063db5' => :'1fcf2605-9a74-47df-af7d-ca7fc3063db5',
        :'_683ae0ab_1857_48d6_b60d_f429fd80cf25' => :'683ae0ab-1857-48d6-b60d-f429fd80cf25',
        :'_4572735e_99f3_41c8_a8a9_ae76ac3bae9d' => :'4572735e-99f3-41c8-a8a9-ae76ac3bae9d',
        :'cc938b52_4333_47dd_986f_bd4d1bf0ee8a' => :'cc938b52-4333-47dd-986f-bd4d1bf0ee8a',
        :'da4eea2c_1f26_42dc_ad3b_e1364267423e' => :'da4eea2c-1f26-42dc-ad3b-e1364267423e'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'c31ccb09_2819_4fd3_98ef_672ffac6a2f4' => :'BetaInternalPermissionServiceAndFilter',
        :'_0d82200f_65fa_4860_bbc8_4de1f4625bc5' => :'BetaInternalPermissionServiceIDFilter',
        :'fc357899_be22_4a71_afa4_a135c8bea3de' => :'BetaInternalPermissionServiceInIDsFilter',
        :'_7d8ada7e_f411_4f06_890f_5e7de4dd9205' => :'BetaInternalPermissionServiceNotFilter',
        :'_58ba846a_372c_4b22_9bd7_1bc89d3b38d0' => :'BetaInternalPermissionServiceOrFilter',
        :'a5ca2a84_3c67_4958_ae95_cc7a5013dede' => :'BetaInternalPermissionServiceOrganization',
        :'f146deeb_58ee_4703_9126_247652af7c4c' => :'BetaInternalPermissionServiceProject',
        :'_11f61595_46b7_40d2_ac3b_04e9ab410948' => :'BetaInternalPermissionServiceProjectGrant',
        :'_1fcf2605_9a74_47df_af7d_ca7fc3063db5' => :'BetaInternalPermissionServiceResourceFilter',
        :'_683ae0ab_1857_48d6_b60d_f429fd80cf25' => :'BetaInternalPermissionServiceRoleFilter',
        :'_4572735e_99f3_41c8_a8a9_ae76ac3bae9d' => :'BetaInternalPermissionServiceTimestampFilter',
        :'cc938b52_4333_47dd_986f_bd4d1bf0ee8a' => :'BetaInternalPermissionServiceUserDisplayNameFilter',
        :'da4eea2c_1f26_42dc_ad3b_e1364267423e' => :'BetaInternalPermissionServiceUserPreferredLoginNameFilter'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Models attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        # MODIFIED: Updated class name in error message
        fail ArgumentError, "The input argument (attributes) must be a hash in `Zitadel::Client::Models::NoOp200Response` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          # MODIFIED: Updated class name in error message
          fail ArgumentError, "`#{k}` is not a valid attribute in `Zitadel::Client::Models::NoOp200Response`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'c31ccb09_2819_4fd3_98ef_672ffac6a2f4')
        self.c31ccb09_2819_4fd3_98ef_672ffac6a2f4 = attributes[:'c31ccb09_2819_4fd3_98ef_672ffac6a2f4']
      end

      if attributes.key?(:'_0d82200f_65fa_4860_bbc8_4de1f4625bc5')
        self._0d82200f_65fa_4860_bbc8_4de1f4625bc5 = attributes[:'_0d82200f_65fa_4860_bbc8_4de1f4625bc5']
      end

      if attributes.key?(:'fc357899_be22_4a71_afa4_a135c8bea3de')
        self.fc357899_be22_4a71_afa4_a135c8bea3de = attributes[:'fc357899_be22_4a71_afa4_a135c8bea3de']
      end

      if attributes.key?(:'_7d8ada7e_f411_4f06_890f_5e7de4dd9205')
        self._7d8ada7e_f411_4f06_890f_5e7de4dd9205 = attributes[:'_7d8ada7e_f411_4f06_890f_5e7de4dd9205']
      end

      if attributes.key?(:'_58ba846a_372c_4b22_9bd7_1bc89d3b38d0')
        self._58ba846a_372c_4b22_9bd7_1bc89d3b38d0 = attributes[:'_58ba846a_372c_4b22_9bd7_1bc89d3b38d0']
      end

      if attributes.key?(:'a5ca2a84_3c67_4958_ae95_cc7a5013dede')
        self.a5ca2a84_3c67_4958_ae95_cc7a5013dede = attributes[:'a5ca2a84_3c67_4958_ae95_cc7a5013dede']
      end

      if attributes.key?(:'f146deeb_58ee_4703_9126_247652af7c4c')
        self.f146deeb_58ee_4703_9126_247652af7c4c = attributes[:'f146deeb_58ee_4703_9126_247652af7c4c']
      end

      if attributes.key?(:'_11f61595_46b7_40d2_ac3b_04e9ab410948')
        self._11f61595_46b7_40d2_ac3b_04e9ab410948 = attributes[:'_11f61595_46b7_40d2_ac3b_04e9ab410948']
      end

      if attributes.key?(:'_1fcf2605_9a74_47df_af7d_ca7fc3063db5')
        self._1fcf2605_9a74_47df_af7d_ca7fc3063db5 = attributes[:'_1fcf2605_9a74_47df_af7d_ca7fc3063db5']
      end

      if attributes.key?(:'_683ae0ab_1857_48d6_b60d_f429fd80cf25')
        self._683ae0ab_1857_48d6_b60d_f429fd80cf25 = attributes[:'_683ae0ab_1857_48d6_b60d_f429fd80cf25']
      end

      if attributes.key?(:'_4572735e_99f3_41c8_a8a9_ae76ac3bae9d')
        self._4572735e_99f3_41c8_a8a9_ae76ac3bae9d = attributes[:'_4572735e_99f3_41c8_a8a9_ae76ac3bae9d']
      end

      if attributes.key?(:'cc938b52_4333_47dd_986f_bd4d1bf0ee8a')
        self.cc938b52_4333_47dd_986f_bd4d1bf0ee8a = attributes[:'cc938b52_4333_47dd_986f_bd4d1bf0ee8a']
      end

      if attributes.key?(:'da4eea2c_1f26_42dc_ad3b_e1364267423e')
        self.da4eea2c_1f26_42dc_ad3b_e1364267423e = attributes[:'da4eea2c_1f26_42dc_ad3b_e1364267423e']
      end
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          c31ccb09_2819_4fd3_98ef_672ffac6a2f4 == o.c31ccb09_2819_4fd3_98ef_672ffac6a2f4 &&
          _0d82200f_65fa_4860_bbc8_4de1f4625bc5 == o._0d82200f_65fa_4860_bbc8_4de1f4625bc5 &&
          fc357899_be22_4a71_afa4_a135c8bea3de == o.fc357899_be22_4a71_afa4_a135c8bea3de &&
          _7d8ada7e_f411_4f06_890f_5e7de4dd9205 == o._7d8ada7e_f411_4f06_890f_5e7de4dd9205 &&
          _58ba846a_372c_4b22_9bd7_1bc89d3b38d0 == o._58ba846a_372c_4b22_9bd7_1bc89d3b38d0 &&
          a5ca2a84_3c67_4958_ae95_cc7a5013dede == o.a5ca2a84_3c67_4958_ae95_cc7a5013dede &&
          f146deeb_58ee_4703_9126_247652af7c4c == o.f146deeb_58ee_4703_9126_247652af7c4c &&
          _11f61595_46b7_40d2_ac3b_04e9ab410948 == o._11f61595_46b7_40d2_ac3b_04e9ab410948 &&
          _1fcf2605_9a74_47df_af7d_ca7fc3063db5 == o._1fcf2605_9a74_47df_af7d_ca7fc3063db5 &&
          _683ae0ab_1857_48d6_b60d_f429fd80cf25 == o._683ae0ab_1857_48d6_b60d_f429fd80cf25 &&
          _4572735e_99f3_41c8_a8a9_ae76ac3bae9d == o._4572735e_99f3_41c8_a8a9_ae76ac3bae9d &&
          cc938b52_4333_47dd_986f_bd4d1bf0ee8a == o.cc938b52_4333_47dd_986f_bd4d1bf0ee8a &&
          da4eea2c_1f26_42dc_ad3b_e1364267423e == o.da4eea2c_1f26_42dc_ad3b_e1364267423e
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [c31ccb09_2819_4fd3_98ef_672ffac6a2f4, _0d82200f_65fa_4860_bbc8_4de1f4625bc5, fc357899_be22_4a71_afa4_a135c8bea3de, _7d8ada7e_f411_4f06_890f_5e7de4dd9205, _58ba846a_372c_4b22_9bd7_1bc89d3b38d0, a5ca2a84_3c67_4958_ae95_cc7a5013dede, f146deeb_58ee_4703_9126_247652af7c4c, _11f61595_46b7_40d2_ac3b_04e9ab410948, _1fcf2605_9a74_47df_af7d_ca7fc3063db5, _683ae0ab_1857_48d6_b60d_f429fd80cf25, _4572735e_99f3_41c8_a8a9_ae76ac3bae9d, cc938b52_4333_47dd_986f_bd4d1bf0ee8a, da4eea2c_1f26_42dc_ad3b_e1364267423e].hash
    end

# Builds the object from hash
# @param [Hash] attributes Models attributes in the form of hash
# @return [Object] Returns the model itself
def self.build_from_hash(attributes)
  return nil unless attributes.is_a?(Hash)
  attributes = attributes.transform_keys(&:to_sym)
  transformed_hash = {}
  openapi_types.each_pair do |key, type|
    if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
      transformed_hash["#{key}"] = nil
    elsif type =~ /\AArray<(.*)>/i
      # check to ensure the input is an array given that the attribute
      # is documented as an array but the input is not
      if attributes[attribute_map[key]].is_a?(Array)
        transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
      end
    elsif !attributes[attribute_map[key]].nil?
      transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
    end
  end
  new(transformed_hash) # `new` will call the initialize method of the specific model class.
end

# Deserializes the data based on type
# @param string type Data type
# @param string value Value to be deserialized
# @return [Object] Deserialized data
def self._deserialize(type, value)
  case type.to_sym
  when :Time
    Time.parse(value)
  when :Date
    Date.parse(value)
  when :String
    value.to_s
  when :Integer
    value.to_i
  when :Float
    value.to_f
  when :Boolean
    if value.to_s =~ /\A(true|t|yes|y|1)\z/i
      true
    else
      false
    end
  when :Object
    # generic object (usually a Hash), return directly
    value
  when /\AArray<(?<inner_type>.+)>\z/
    inner_type = Regexp.last_match[:inner_type]
    value.map { |v| _deserialize(inner_type, v) }
  when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
    k_type = Regexp.last_match[:k_type]
    v_type = Regexp.last_match[:v_type]
    {}.tap do |hash|
      value.each do |k, v|
        hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
      end
    end
  else # model
    # models (e.g. Pet) or oneOf/anyOf constructs that resolve to a model name
    # MODIFIED: Ensure model is looked up in the Models namespace
    # 'type' here is expected to be the simple class name (e.g., "User", "OrderDetails")
    klass = Zitadel::Client::Models.const_get(type)
    # The `klass.build` method is for oneOf/anyOf types (defined in partial_oneof_module.mustache / partial_anyof_module.mustache)
    # The `klass.build_from_hash` is for regular model types (defined in this base_object.mustache itself)
    if klass.respond_to?(:openapi_one_of) || klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_allOf)
      klass.build(value) # For oneOf/anyOf/allOf, delegate to their specific build method
    else
      klass.build_from_hash(value) # For regular models
    end
  end
end

# Returns the string representation of the object
# @return [String] String presentation of the object
def to_s
  to_hash.to_s
end

# to_body is an alias to to_hash (backward compatibility)
# @return [Hash] Returns the object in the form of hash
def to_body
  to_hash
end

# Returns the object in the form of hash
# @return [Hash] Returns the object in the form of hash
def to_hash
  hash = {} # Calls super.to_hash if parent exists
  self.class.attribute_map.each_pair do |attr, param|
    value = self.send(attr)
    if value.nil?
      is_nullable = self.class.openapi_nullable.include?(attr)
      next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
    end

    hash[param] = _to_hash(value)
  end
  hash
end

# Outputs non-array value in the form of hash
# For object, use to_hash. Otherwise, just return the value
# @param [Object] value Any valid value
# @return [Hash] Returns the value in the form of hash
def _to_hash(value)
  if value.is_a?(Array)
    value.compact.map { |v| _to_hash(v) }
  elsif value.is_a?(Hash)
    {}.tap do |hash|
      value.each { |k, v| hash[k] = _to_hash(v) }
    end
  elsif value.respond_to? :to_hash
    value.to_hash
  else
    value
  end
end

  end

end
