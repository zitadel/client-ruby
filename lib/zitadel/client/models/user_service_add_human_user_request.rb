=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Zitadel::Client::Models
  class UserServiceAddHumanUserRequest
    # optionally set your own id unique for the user.
    attr_accessor :user_id

    # optionally set a unique username, if none is provided the email will be used.
    attr_accessor :username

    attr_accessor :organization

    attr_accessor :profile

    attr_accessor :email

    attr_accessor :phone

    attr_accessor :metadata

    attr_accessor :password

    attr_accessor :hashed_password

    attr_accessor :idp_links

    # An Implementation of RFC 6238 is used, with HMAC-SHA-1 and time-step of 30 seconds. Currently no other options are supported, and if anything different is used the validation will fail.
    attr_accessor :totp_secret

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'user_id' => :'userId',
        :'username' => :'username',
        :'organization' => :'organization',
        :'profile' => :'profile',
        :'email' => :'email',
        :'phone' => :'phone',
        :'metadata' => :'metadata',
        :'password' => :'password',
        :'hashed_password' => :'hashedPassword',
        :'idp_links' => :'idpLinks',
        :'totp_secret' => :'totpSecret'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'user_id' => :'String',
        :'username' => :'String',
        :'organization' => :'UserServiceOrganization',
        :'profile' => :'UserServiceSetHumanProfile',
        :'email' => :'UserServiceSetHumanEmail',
        :'phone' => :'UserServiceSetHumanPhone',
        :'metadata' => :'Array<UserServiceSetMetadataEntry>',
        :'password' => :'UserServicePassword',
        :'hashed_password' => :'UserServiceHashedPassword',
        :'idp_links' => :'Array<UserServiceIDPLink>',
        :'totp_secret' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Models attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        # MODIFIED: Updated class name in error message
        fail ArgumentError, "The input argument (attributes) must be a hash in `Zitadel::Client::Models::UserServiceAddHumanUserRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          # MODIFIED: Updated class name in error message
          fail ArgumentError, "`#{k}` is not a valid attribute in `Zitadel::Client::Models::UserServiceAddHumanUserRequest`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'organization')
        self.organization = attributes[:'organization']
      end

      if attributes.key?(:'profile')
        self.profile = attributes[:'profile']
      else
        self.profile = nil
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      else
        self.email = nil
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Array)
          self.metadata = value
        end
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'hashed_password')
        self.hashed_password = attributes[:'hashed_password']
      end

      if attributes.key?(:'idp_links')
        if (value = attributes[:'idp_links']).is_a?(Array)
          self.idp_links = value
        end
      end

      if attributes.key?(:'totp_secret')
        self.totp_secret = attributes[:'totp_secret']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@user_id.nil? && @user_id.to_s.length > 200
        invalid_properties.push('invalid value for "user_id", the character length must be smaller than or equal to 200.')
      end

      if !@user_id.nil? && @user_id.to_s.length < 1
        invalid_properties.push('invalid value for "user_id", the character length must be great than or equal to 1.')
      end

      if !@username.nil? && @username.to_s.length > 200
        invalid_properties.push('invalid value for "username", the character length must be smaller than or equal to 200.')
      end

      if !@username.nil? && @username.to_s.length < 1
        invalid_properties.push('invalid value for "username", the character length must be great than or equal to 1.')
      end

      if @profile.nil?
        invalid_properties.push('invalid value for "profile", profile cannot be nil.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if !@totp_secret.nil? && @totp_secret.to_s.length > 200
        invalid_properties.push('invalid value for "totp_secret", the character length must be smaller than or equal to 200.')
      end

      if !@totp_secret.nil? && @totp_secret.to_s.length < 1
        invalid_properties.push('invalid value for "totp_secret", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@user_id.nil? && @user_id.to_s.length > 200
      return false if !@user_id.nil? && @user_id.to_s.length < 1
      return false if !@username.nil? && @username.to_s.length > 200
      return false if !@username.nil? && @username.to_s.length < 1
      return false if @profile.nil?
      return false if @email.nil?
      return false if !@totp_secret.nil? && @totp_secret.to_s.length > 200
      return false if !@totp_secret.nil? && @totp_secret.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] user_id Value to be assigned
    def user_id=(user_id)
      if user_id.nil?
        fail ArgumentError, 'user_id cannot be nil'
      end

      if user_id.to_s.length > 200
        fail ArgumentError, 'invalid value for "user_id", the character length must be smaller than or equal to 200.'
      end

      if user_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "user_id", the character length must be great than or equal to 1.'
      end

      @user_id = user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] username Value to be assigned
    def username=(username)
      if username.nil?
        fail ArgumentError, 'username cannot be nil'
      end

      if username.to_s.length > 200
        fail ArgumentError, 'invalid value for "username", the character length must be smaller than or equal to 200.'
      end

      if username.to_s.length < 1
        fail ArgumentError, 'invalid value for "username", the character length must be great than or equal to 1.'
      end

      @username = username
    end

    # Custom attribute writer method with validation
    # @param [Object] profile Value to be assigned
    def profile=(profile)
      if profile.nil?
        fail ArgumentError, 'profile cannot be nil'
      end

      @profile = profile
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if email.nil?
        fail ArgumentError, 'email cannot be nil'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] totp_secret Value to be assigned
    def totp_secret=(totp_secret)
      if totp_secret.nil?
        fail ArgumentError, 'totp_secret cannot be nil'
      end

      if totp_secret.to_s.length > 200
        fail ArgumentError, 'invalid value for "totp_secret", the character length must be smaller than or equal to 200.'
      end

      if totp_secret.to_s.length < 1
        fail ArgumentError, 'invalid value for "totp_secret", the character length must be great than or equal to 1.'
      end

      @totp_secret = totp_secret
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          user_id == o.user_id &&
          username == o.username &&
          organization == o.organization &&
          profile == o.profile &&
          email == o.email &&
          phone == o.phone &&
          metadata == o.metadata &&
          password == o.password &&
          hashed_password == o.hashed_password &&
          idp_links == o.idp_links &&
          totp_secret == o.totp_secret
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [user_id, username, organization, profile, email, phone, metadata, password, hashed_password, idp_links, totp_secret].hash
    end

# Builds the object from hash
# @param [Hash] attributes Models attributes in the form of hash
# @return [Object] Returns the model itself
def self.build_from_hash(attributes)
  return nil unless attributes.is_a?(Hash)
  attributes = attributes.transform_keys(&:to_sym)
  transformed_hash = {}
  openapi_types.each_pair do |key, type|
    if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
      transformed_hash["#{key}"] = nil
    elsif type =~ /\AArray<(.*)>/i
      # check to ensure the input is an array given that the attribute
      # is documented as an array but the input is not
      if attributes[attribute_map[key]].is_a?(Array)
        transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
      end
    elsif !attributes[attribute_map[key]].nil?
      transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
    end
  end
  new(transformed_hash) # `new` will call the initialize method of the specific model class.
end

# Deserializes the data based on type
# @param string type Data type
# @param string value Value to be deserialized
# @return [Object] Deserialized data
def self._deserialize(type, value)
  case type.to_sym
  when :Time
    Time.parse(value)
  when :Date
    Date.parse(value)
  when :String
    value.to_s
  when :Integer
    value.to_i
  when :Float
    value.to_f
  when :Boolean
    if value.to_s =~ /\A(true|t|yes|y|1)\z/i
      true
    else
      false
    end
  when :Object
    # generic object (usually a Hash), return directly
    value
  when /\AArray<(?<inner_type>.+)>\z/
    inner_type = Regexp.last_match[:inner_type]
    value.map { |v| _deserialize(inner_type, v) }
  when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
    k_type = Regexp.last_match[:k_type]
    v_type = Regexp.last_match[:v_type]
    {}.tap do |hash|
      value.each do |k, v|
        hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
      end
    end
  else # model
    # models (e.g. Pet) or oneOf/anyOf constructs that resolve to a model name
    # MODIFIED: Ensure model is looked up in the Models namespace
    # 'type' here is expected to be the simple class name (e.g., "User", "OrderDetails")
    klass = Zitadel::Client::Models.const_get(type)
    # The `klass.build` method is for oneOf/anyOf types (defined in partial_oneof_module.mustache / partial_anyof_module.mustache)
    # The `klass.build_from_hash` is for regular model types (defined in this base_object.mustache itself)
    if klass.respond_to?(:openapi_one_of) || klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_allOf)
      klass.build(value) # For oneOf/anyOf/allOf, delegate to their specific build method
    else
      klass.build_from_hash(value) # For regular models
    end
  end
end

# Returns the string representation of the object
# @return [String] String presentation of the object
def to_s
  to_hash.to_s
end

# to_body is an alias to to_hash (backward compatibility)
# @return [Hash] Returns the object in the form of hash
def to_body
  to_hash
end

# Returns the object in the form of hash
# @return [Hash] Returns the object in the form of hash
def to_hash
  hash = {} # Calls super.to_hash if parent exists
  self.class.attribute_map.each_pair do |attr, param|
    value = self.send(attr)
    if value.nil?
      is_nullable = self.class.openapi_nullable.include?(attr)
      next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
    end

    hash[param] = _to_hash(value)
  end
  hash
end

# Outputs non-array value in the form of hash
# For object, use to_hash. Otherwise, just return the value
# @param [Object] value Any valid value
# @return [Hash] Returns the value in the form of hash
def _to_hash(value)
  if value.is_a?(Array)
    value.compact.map { |v| _to_hash(v) }
  elsif value.is_a?(Hash)
    {}.tap do |hash|
      value.each { |k, v| hash[k] = _to_hash(v) }
    end
  elsif value.respond_to? :to_hash
    value.to_hash
  else
    value
  end
end

  end

end
