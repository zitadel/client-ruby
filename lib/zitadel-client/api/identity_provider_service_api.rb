=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module ZitadelClient
  class IdentityProviderServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get identity provider (IdP) by ID
    # Returns an identity provider (social/enterprise login) by its ID, which can be of the type Google, AzureAD, etc.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2GetIDPByIDResponse]
    def get_idpby_id(id, opts = {})
      data, _status_code, _headers = get_idpby_id_with_http_info(id, opts)
      data
    end

    # Get identity provider (IdP) by ID
    # Returns an identity provider (social/enterprise login) by its ID, which can be of the type Google, AzureAD, etc.
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2GetIDPByIDResponse, Integer, Hash)>] V2GetIDPByIDResponse data, response status code and response headers
    def get_idpby_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProviderServiceApi.get_idpby_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdentityProviderServiceApi.get_idpby_id"
      end
      # resource path
      local_var_path = '/v2/idps/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetIDPByIDResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"IdentityProviderServiceApi.get_idpby_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProviderServiceApi#get_idpby_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
