=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module ZitadelClient
  class SessionServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new session
    # Create a new session. A token will be returned, which is required for further updates of the session.
    # @param body [V2CreateSessionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [V2CreateSessionResponse]
    def create_session(body, opts = {})
      data, _status_code, _headers = create_session_with_http_info(body, opts)
      data
    end

    # Create a new session
    # Create a new session. A token will be returned, which is required for further updates of the session.
    # @param body [V2CreateSessionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2CreateSessionResponse, Integer, Hash)>] V2CreateSessionResponse data, response status code and response headers
    def create_session_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionServiceApi.create_session ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SessionServiceApi.create_session"
      end
      # resource path
      local_var_path = '/v2/sessions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2CreateSessionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"SessionServiceApi.create_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionServiceApi#create_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Terminate an existing session
    # Terminate your own session or if granted any other session.
    # @param session_id [String] \&quot;id of the session to terminate\&quot;
    # @param body [SessionServiceDeleteSessionBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2DeleteSessionResponse]
    def delete_session(session_id, body, opts = {})
      data, _status_code, _headers = delete_session_with_http_info(session_id, body, opts)
      data
    end

    # Terminate an existing session
    # Terminate your own session or if granted any other session.
    # @param session_id [String] \&quot;id of the session to terminate\&quot;
    # @param body [SessionServiceDeleteSessionBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2DeleteSessionResponse, Integer, Hash)>] V2DeleteSessionResponse data, response status code and response headers
    def delete_session_with_http_info(session_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionServiceApi.delete_session ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionServiceApi.delete_session"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SessionServiceApi.delete_session"
      end
      # resource path
      local_var_path = '/v2/sessions/{sessionId}'.sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2DeleteSessionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"SessionServiceApi.delete_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionServiceApi#delete_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a session
    # Get a session and all its information like the time of the user or password verification
    # @param session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :session_token 
    # @return [V2GetSessionResponse]
    def get_session(session_id, opts = {})
      data, _status_code, _headers = get_session_with_http_info(session_id, opts)
      data
    end

    # Get a session
    # Get a session and all its information like the time of the user or password verification
    # @param session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :session_token 
    # @return [Array<(V2GetSessionResponse, Integer, Hash)>] V2GetSessionResponse data, response status code and response headers
    def get_session_with_http_info(session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionServiceApi.get_session ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionServiceApi.get_session"
      end
      # resource path
      local_var_path = '/v2/sessions/{sessionId}'.sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sessionToken'] = opts[:'session_token'] if !opts[:'session_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetSessionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"SessionServiceApi.get_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionServiceApi#get_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search sessions
    # Search for sessions
    # @param body [V2ListSessionsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [V2ListSessionsResponse]
    def list_sessions(body, opts = {})
      data, _status_code, _headers = list_sessions_with_http_info(body, opts)
      data
    end

    # Search sessions
    # Search for sessions
    # @param body [V2ListSessionsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2ListSessionsResponse, Integer, Hash)>] V2ListSessionsResponse data, response status code and response headers
    def list_sessions_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionServiceApi.list_sessions ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SessionServiceApi.list_sessions"
      end
      # resource path
      local_var_path = '/v2/sessions/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2ListSessionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"SessionServiceApi.list_sessions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionServiceApi#list_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing session
    # Update an existing session with new information.
    # @param session_id [String] \&quot;id of the session to update\&quot;
    # @param body [SessionServiceSetSessionBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2SetSessionResponse]
    def set_session(session_id, body, opts = {})
      data, _status_code, _headers = set_session_with_http_info(session_id, body, opts)
      data
    end

    # Update an existing session
    # Update an existing session with new information.
    # @param session_id [String] \&quot;id of the session to update\&quot;
    # @param body [SessionServiceSetSessionBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2SetSessionResponse, Integer, Hash)>] V2SetSessionResponse data, response status code and response headers
    def set_session_with_http_info(session_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SessionServiceApi.set_session ...'
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling SessionServiceApi.set_session"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SessionServiceApi.set_session"
      end
      # resource path
      local_var_path = '/v2/sessions/{sessionId}'.sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2SetSessionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"SessionServiceApi.set_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SessionServiceApi#set_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
