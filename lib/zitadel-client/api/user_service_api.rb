=begin
#merged spec

#merged spec

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module ZitadelClient
  class UserServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new human user
    # Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.
    # @param body [V2AddHumanUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [V2AddHumanUserResponse]
    def user_service_add_human_user(body, opts = {})
      data, _status_code, _headers = user_service_add_human_user_with_http_info(body, opts)
      data
    end

    # Create a new human user
    # Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.
    # @param body [V2AddHumanUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2AddHumanUserResponse, Integer, Hash)>] V2AddHumanUserResponse data, response status code and response headers
    def user_service_add_human_user_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_add_human_user ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_add_human_user"
      end
      # resource path
      local_var_path = '/v2/users/human'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2AddHumanUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_add_human_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_add_human_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add link to an identity provider to an user
    # Add link to an identity provider to an user..
    # @param user_id [String] 
    # @param body [UserServiceAddIDPLinkBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2AddIDPLinkResponse]
    def user_service_add_idp_link(user_id, body, opts = {})
      data, _status_code, _headers = user_service_add_idp_link_with_http_info(user_id, body, opts)
      data
    end

    # Add link to an identity provider to an user
    # Add link to an identity provider to an user..
    # @param user_id [String] 
    # @param body [UserServiceAddIDPLinkBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2AddIDPLinkResponse, Integer, Hash)>] V2AddIDPLinkResponse data, response status code and response headers
    def user_service_add_idp_link_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_add_idp_link ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_add_idp_link"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_add_idp_link"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/links'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2AddIDPLinkResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_add_idp_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_add_idp_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add OTP Email for a user
    # Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2AddOTPEmailResponse]
    def user_service_add_otp_email(user_id, opts = {})
      data, _status_code, _headers = user_service_add_otp_email_with_http_info(user_id, opts)
      data
    end

    # Add OTP Email for a user
    # Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2AddOTPEmailResponse, Integer, Hash)>] V2AddOTPEmailResponse data, response status code and response headers
    def user_service_add_otp_email_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_add_otp_email ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_add_otp_email"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/otp_email'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2AddOTPEmailResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_add_otp_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_add_otp_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add OTP SMS for a user
    # Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2AddOTPSMSResponse]
    def user_service_add_otpsms(user_id, opts = {})
      data, _status_code, _headers = user_service_add_otpsms_with_http_info(user_id, opts)
      data
    end

    # Add OTP SMS for a user
    # Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2AddOTPSMSResponse, Integer, Hash)>] V2AddOTPSMSResponse data, response status code and response headers
    def user_service_add_otpsms_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_add_otpsms ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_add_otpsms"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/otp_sms'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2AddOTPSMSResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_add_otpsms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_add_otpsms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an invite code for a user
    # Create an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization's available methods.
    # @param user_id [String] 
    # @param body [UserServiceCreateInviteCodeBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2CreateInviteCodeResponse]
    def user_service_create_invite_code(user_id, body, opts = {})
      data, _status_code, _headers = user_service_create_invite_code_with_http_info(user_id, body, opts)
      data
    end

    # Create an invite code for a user
    # Create an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization&#39;s available methods.
    # @param user_id [String] 
    # @param body [UserServiceCreateInviteCodeBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2CreateInviteCodeResponse, Integer, Hash)>] V2CreateInviteCodeResponse data, response status code and response headers
    def user_service_create_invite_code_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_create_invite_code ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_create_invite_code"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_create_invite_code"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/invite_code'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2CreateInviteCodeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_create_invite_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_create_invite_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a passkey registration link for a user
    # Create a passkey registration link which includes a code and either return it or send it to the user..
    # @param user_id [String] 
    # @param body [UserServiceCreatePasskeyRegistrationLinkBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2CreatePasskeyRegistrationLinkResponse]
    def user_service_create_passkey_registration_link(user_id, body, opts = {})
      data, _status_code, _headers = user_service_create_passkey_registration_link_with_http_info(user_id, body, opts)
      data
    end

    # Create a passkey registration link for a user
    # Create a passkey registration link which includes a code and either return it or send it to the user..
    # @param user_id [String] 
    # @param body [UserServiceCreatePasskeyRegistrationLinkBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2CreatePasskeyRegistrationLinkResponse, Integer, Hash)>] V2CreatePasskeyRegistrationLinkResponse data, response status code and response headers
    def user_service_create_passkey_registration_link_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_create_passkey_registration_link ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_create_passkey_registration_link"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_create_passkey_registration_link"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/passkeys/registration_link'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2CreatePasskeyRegistrationLinkResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_create_passkey_registration_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_create_passkey_registration_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deactivate user
    # The state of the user will be changed to 'deactivated'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'deactivated'. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2DeactivateUserResponse]
    def user_service_deactivate_user(user_id, opts = {})
      data, _status_code, _headers = user_service_deactivate_user_with_http_info(user_id, opts)
      data
    end

    # Deactivate user
    # The state of the user will be changed to &#39;deactivated&#39;. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state &#39;deactivated&#39;. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2DeactivateUserResponse, Integer, Hash)>] V2DeactivateUserResponse data, response status code and response headers
    def user_service_deactivate_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_deactivate_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_deactivate_user"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/deactivate'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2DeactivateUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_deactivate_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_deactivate_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete user
    # The state of the user will be changed to 'deleted'. The user will not be able to log in anymore. Endpoints requesting this user will return an error 'User not found..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2DeleteUserResponse]
    def user_service_delete_user(user_id, opts = {})
      data, _status_code, _headers = user_service_delete_user_with_http_info(user_id, opts)
      data
    end

    # Delete user
    # The state of the user will be changed to &#39;deleted&#39;. The user will not be able to log in anymore. Endpoints requesting this user will return an error &#39;User not found..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2DeleteUserResponse, Integer, Hash)>] V2DeleteUserResponse data, response status code and response headers
    def user_service_delete_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_delete_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_delete_user"
      end
      # resource path
      local_var_path = '/v2/users/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2DeleteUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_delete_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # User by ID
    # Returns the full user object (human or machine) including the profile, email, etc..
    # @param user_id [String] User ID of the user you like to get.
    # @param [Hash] opts the optional parameters
    # @return [V2GetUserByIDResponse]
    def user_service_get_user_by_id(user_id, opts = {})
      data, _status_code, _headers = user_service_get_user_by_id_with_http_info(user_id, opts)
      data
    end

    # User by ID
    # Returns the full user object (human or machine) including the profile, email, etc..
    # @param user_id [String] User ID of the user you like to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2GetUserByIDResponse, Integer, Hash)>] V2GetUserByIDResponse data, response status code and response headers
    def user_service_get_user_by_id_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_get_user_by_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_get_user_by_id"
      end
      # resource path
      local_var_path = '/v2/users/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetUserByIDResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_get_user_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_get_user_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # MFA Init Skipped
    # Update the last time the user has skipped MFA initialization. The server timestamp is used.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2HumanMFAInitSkippedResponse]
    def user_service_human_mfa_init_skipped(user_id, opts = {})
      data, _status_code, _headers = user_service_human_mfa_init_skipped_with_http_info(user_id, opts)
      data
    end

    # MFA Init Skipped
    # Update the last time the user has skipped MFA initialization. The server timestamp is used.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2HumanMFAInitSkippedResponse, Integer, Hash)>] V2HumanMFAInitSkippedResponse data, response status code and response headers
    def user_service_human_mfa_init_skipped_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_human_mfa_init_skipped ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_human_mfa_init_skipped"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/mfa_init_skipped'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2HumanMFAInitSkippedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_human_mfa_init_skipped",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_human_mfa_init_skipped\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :auth_factors Specify the Auth Factors you are interested in
    # @option opts [Array<String>] :states Specify the state of the Auth Factors
    # @return [V2ListAuthenticationFactorsResponse]
    def user_service_list_authentication_factors(user_id, opts = {})
      data, _status_code, _headers = user_service_list_authentication_factors_with_http_info(user_id, opts)
      data
    end

    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :auth_factors Specify the Auth Factors you are interested in
    # @option opts [Array<String>] :states Specify the state of the Auth Factors
    # @return [Array<(V2ListAuthenticationFactorsResponse, Integer, Hash)>] V2ListAuthenticationFactorsResponse data, response status code and response headers
    def user_service_list_authentication_factors_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_list_authentication_factors ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_list_authentication_factors"
      end
      allowable_values = ["OTP", "OTP_SMS", "OTP_EMAIL", "U2F"]
      if @api_client.config.client_side_validation && opts[:'auth_factors'] && !opts[:'auth_factors'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"auth_factors\", must include one of #{allowable_values}"
      end
      allowable_values = ["AUTH_FACTOR_STATE_UNSPECIFIED", "AUTH_FACTOR_STATE_NOT_READY", "AUTH_FACTOR_STATE_READY", "AUTH_FACTOR_STATE_REMOVED"]
      if @api_client.config.client_side_validation && opts[:'states'] && !opts[:'states'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"states\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/authentication_factors/_search'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'authFactors'] = @api_client.build_collection_param(opts[:'auth_factors'], :multi) if !opts[:'auth_factors'].nil?
      query_params[:'states'] = @api_client.build_collection_param(opts[:'states'], :multi) if !opts[:'states'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2ListAuthenticationFactorsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_list_authentication_factors",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_list_authentication_factors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all possible authentication methods of a user
    # List all possible authentication methods of a user like password, passwordless, (T)OTP and more..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :domain_query_include_without_domain List also auth method types without domain information like passkey and U2F added through V1 APIs / Login UI.
    # @option opts [String] :domain_query_domain List only auth methods with specific domain.
    # @return [V2ListAuthenticationMethodTypesResponse]
    def user_service_list_authentication_method_types(user_id, opts = {})
      data, _status_code, _headers = user_service_list_authentication_method_types_with_http_info(user_id, opts)
      data
    end

    # List all possible authentication methods of a user
    # List all possible authentication methods of a user like password, passwordless, (T)OTP and more..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :domain_query_include_without_domain List also auth method types without domain information like passkey and U2F added through V1 APIs / Login UI.
    # @option opts [String] :domain_query_domain List only auth methods with specific domain.
    # @return [Array<(V2ListAuthenticationMethodTypesResponse, Integer, Hash)>] V2ListAuthenticationMethodTypesResponse data, response status code and response headers
    def user_service_list_authentication_method_types_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_list_authentication_method_types ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_list_authentication_method_types"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/authentication_methods'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'domainQuery.includeWithoutDomain'] = opts[:'domain_query_include_without_domain'] if !opts[:'domain_query_include_without_domain'].nil?
      query_params[:'domainQuery.domain'] = opts[:'domain_query_domain'] if !opts[:'domain_query_domain'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2ListAuthenticationMethodTypesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_list_authentication_method_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_list_authentication_method_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List links to an identity provider of an user
    # List links to an identity provider of an user.
    # @param user_id [String] 
    # @param body [UserServiceListIDPLinksBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2ListIDPLinksResponse]
    def user_service_list_idp_links(user_id, body, opts = {})
      data, _status_code, _headers = user_service_list_idp_links_with_http_info(user_id, body, opts)
      data
    end

    # List links to an identity provider of an user
    # List links to an identity provider of an user.
    # @param user_id [String] 
    # @param body [UserServiceListIDPLinksBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2ListIDPLinksResponse, Integer, Hash)>] V2ListIDPLinksResponse data, response status code and response headers
    def user_service_list_idp_links_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_list_idp_links ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_list_idp_links"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_list_idp_links"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/links/_search'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2ListIDPLinksResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_list_idp_links",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_list_idp_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List passkeys of an user
    # List passkeys of an user
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2ListPasskeysResponse]
    def user_service_list_passkeys(user_id, opts = {})
      data, _status_code, _headers = user_service_list_passkeys_with_http_info(user_id, opts)
      data
    end

    # List passkeys of an user
    # List passkeys of an user
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2ListPasskeysResponse, Integer, Hash)>] V2ListPasskeysResponse data, response status code and response headers
    def user_service_list_passkeys_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_list_passkeys ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_list_passkeys"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/passkeys/_search'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2ListPasskeysResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_list_passkeys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_list_passkeys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Users
    # Search for users. By default, we will return all users of your instance that you have permission to read. Make sure to include a limit and sorting for pagination.
    # @param body [V2ListUsersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [V2ListUsersResponse]
    def user_service_list_users(body, opts = {})
      data, _status_code, _headers = user_service_list_users_with_http_info(body, opts)
      data
    end

    # Search Users
    # Search for users. By default, we will return all users of your instance that you have permission to read. Make sure to include a limit and sorting for pagination.
    # @param body [V2ListUsersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2ListUsersResponse, Integer, Hash)>] V2ListUsersResponse data, response status code and response headers
    def user_service_list_users_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_list_users ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_list_users"
      end
      # resource path
      local_var_path = '/v2/users'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2ListUsersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_list_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_list_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lock user
    # The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2LockUserResponse]
    def user_service_lock_user(user_id, opts = {})
      data, _status_code, _headers = user_service_lock_user_with_http_info(user_id, opts)
      data
    end

    # Lock user
    # The state of the user will be changed to &#39;locked&#39;. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state &#39;locked&#39;. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2LockUserResponse, Integer, Hash)>] V2LockUserResponse data, response status code and response headers
    def user_service_lock_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_lock_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_lock_user"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/lock'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2LockUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_lock_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_lock_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request a code to reset a password
    # Request a code to reset a password..
    # @param user_id [String] 
    # @param body [UserServicePasswordResetBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2PasswordResetResponse]
    def user_service_password_reset(user_id, body, opts = {})
      data, _status_code, _headers = user_service_password_reset_with_http_info(user_id, body, opts)
      data
    end

    # Request a code to reset a password
    # Request a code to reset a password..
    # @param user_id [String] 
    # @param body [UserServicePasswordResetBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2PasswordResetResponse, Integer, Hash)>] V2PasswordResetResponse data, response status code and response headers
    def user_service_password_reset_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_password_reset ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_password_reset"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_password_reset"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/password_reset'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2PasswordResetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_password_reset",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_password_reset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reactivate user
    # Reactivate a user with the state 'deactivated'. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state 'deactivated'..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2ReactivateUserResponse]
    def user_service_reactivate_user(user_id, opts = {})
      data, _status_code, _headers = user_service_reactivate_user_with_http_info(user_id, opts)
      data
    end

    # Reactivate user
    # Reactivate a user with the state &#39;deactivated&#39;. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state &#39;deactivated&#39;..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2ReactivateUserResponse, Integer, Hash)>] V2ReactivateUserResponse data, response status code and response headers
    def user_service_reactivate_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_reactivate_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_reactivate_user"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/reactivate'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2ReactivateUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_reactivate_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_reactivate_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start the registration of passkey for a user
    # Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey..
    # @param user_id [String] 
    # @param body [UserServiceRegisterPasskeyBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2RegisterPasskeyResponse]
    def user_service_register_passkey(user_id, body, opts = {})
      data, _status_code, _headers = user_service_register_passkey_with_http_info(user_id, body, opts)
      data
    end

    # Start the registration of passkey for a user
    # Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey..
    # @param user_id [String] 
    # @param body [UserServiceRegisterPasskeyBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2RegisterPasskeyResponse, Integer, Hash)>] V2RegisterPasskeyResponse data, response status code and response headers
    def user_service_register_passkey_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_register_passkey ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_register_passkey"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_register_passkey"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/passkeys'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2RegisterPasskeyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_register_passkey",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_register_passkey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start the registration of a TOTP generator for a user
    # Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2RegisterTOTPResponse]
    def user_service_register_totp(user_id, opts = {})
      data, _status_code, _headers = user_service_register_totp_with_http_info(user_id, opts)
      data
    end

    # Start the registration of a TOTP generator for a user
    # Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2RegisterTOTPResponse, Integer, Hash)>] V2RegisterTOTPResponse data, response status code and response headers
    def user_service_register_totp_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_register_totp ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_register_totp"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/totp'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2RegisterTOTPResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_register_totp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_register_totp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start the registration of a u2f token for a user
    # Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token..
    # @param user_id [String] 
    # @param body [UserServiceRegisterU2FBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2RegisterU2FResponse]
    def user_service_register_u2_f(user_id, body, opts = {})
      data, _status_code, _headers = user_service_register_u2_f_with_http_info(user_id, body, opts)
      data
    end

    # Start the registration of a u2f token for a user
    # Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token..
    # @param user_id [String] 
    # @param body [UserServiceRegisterU2FBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2RegisterU2FResponse, Integer, Hash)>] V2RegisterU2FResponse data, response status code and response headers
    def user_service_register_u2_f_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_register_u2_f ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_register_u2_f"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_register_u2_f"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/u2f'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2RegisterU2FResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_register_u2_f",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_register_u2_f\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove link of an identity provider to an user
    # Remove link of an identity provider to an user.
    # @param user_id [String] 
    # @param idp_id [String] 
    # @param linked_user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2RemoveIDPLinkResponse]
    def user_service_remove_idp_link(user_id, idp_id, linked_user_id, opts = {})
      data, _status_code, _headers = user_service_remove_idp_link_with_http_info(user_id, idp_id, linked_user_id, opts)
      data
    end

    # Remove link of an identity provider to an user
    # Remove link of an identity provider to an user.
    # @param user_id [String] 
    # @param idp_id [String] 
    # @param linked_user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2RemoveIDPLinkResponse, Integer, Hash)>] V2RemoveIDPLinkResponse data, response status code and response headers
    def user_service_remove_idp_link_with_http_info(user_id, idp_id, linked_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_remove_idp_link ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_remove_idp_link"
      end
      # verify the required parameter 'idp_id' is set
      if @api_client.config.client_side_validation && idp_id.nil?
        fail ArgumentError, "Missing the required parameter 'idp_id' when calling UserServiceApi.user_service_remove_idp_link"
      end
      # verify the required parameter 'linked_user_id' is set
      if @api_client.config.client_side_validation && linked_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'linked_user_id' when calling UserServiceApi.user_service_remove_idp_link"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/links/{idpId}/{linkedUserId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s)).sub('{' + 'idpId' + '}', CGI.escape(idp_id.to_s)).sub('{' + 'linkedUserId' + '}', CGI.escape(linked_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2RemoveIDPLinkResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_remove_idp_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_remove_idp_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove One-Time Password (OTP) Email from a user
    # Remove the configured One-Time Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2RemoveOTPEmailResponse]
    def user_service_remove_otp_email(user_id, opts = {})
      data, _status_code, _headers = user_service_remove_otp_email_with_http_info(user_id, opts)
      data
    end

    # Remove One-Time Password (OTP) Email from a user
    # Remove the configured One-Time Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2RemoveOTPEmailResponse, Integer, Hash)>] V2RemoveOTPEmailResponse data, response status code and response headers
    def user_service_remove_otp_email_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_remove_otp_email ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_remove_otp_email"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/otp_email'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2RemoveOTPEmailResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_remove_otp_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_remove_otp_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove One-Time Password (OTP) SMS from a user
    # Remove the configured One-Time Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2RemoveOTPSMSResponse]
    def user_service_remove_otpsms(user_id, opts = {})
      data, _status_code, _headers = user_service_remove_otpsms_with_http_info(user_id, opts)
      data
    end

    # Remove One-Time Password (OTP) SMS from a user
    # Remove the configured One-Time Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2RemoveOTPSMSResponse, Integer, Hash)>] V2RemoveOTPSMSResponse data, response status code and response headers
    def user_service_remove_otpsms_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_remove_otpsms ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_remove_otpsms"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/otp_sms'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2RemoveOTPSMSResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_remove_otpsms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_remove_otpsms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove passkey from a user
    # Remove passkey from a user.
    # @param user_id [String] 
    # @param passkey_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2RemovePasskeyResponse]
    def user_service_remove_passkey(user_id, passkey_id, opts = {})
      data, _status_code, _headers = user_service_remove_passkey_with_http_info(user_id, passkey_id, opts)
      data
    end

    # Remove passkey from a user
    # Remove passkey from a user.
    # @param user_id [String] 
    # @param passkey_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2RemovePasskeyResponse, Integer, Hash)>] V2RemovePasskeyResponse data, response status code and response headers
    def user_service_remove_passkey_with_http_info(user_id, passkey_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_remove_passkey ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_remove_passkey"
      end
      # verify the required parameter 'passkey_id' is set
      if @api_client.config.client_side_validation && passkey_id.nil?
        fail ArgumentError, "Missing the required parameter 'passkey_id' when calling UserServiceApi.user_service_remove_passkey"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/passkeys/{passkeyId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s)).sub('{' + 'passkeyId' + '}', CGI.escape(passkey_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2RemovePasskeyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_remove_passkey",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_remove_passkey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the user phone
    # Delete the phone number of a user.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2RemovePhoneResponse]
    def user_service_remove_phone(user_id, opts = {})
      data, _status_code, _headers = user_service_remove_phone_with_http_info(user_id, opts)
      data
    end

    # Delete the user phone
    # Delete the phone number of a user.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2RemovePhoneResponse, Integer, Hash)>] V2RemovePhoneResponse data, response status code and response headers
    def user_service_remove_phone_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_remove_phone ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_remove_phone"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/phone'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2RemovePhoneResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_remove_phone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_remove_phone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove TOTP generator from a user
    # Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second factor afterward.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2RemoveTOTPResponse]
    def user_service_remove_totp(user_id, opts = {})
      data, _status_code, _headers = user_service_remove_totp_with_http_info(user_id, opts)
      data
    end

    # Remove TOTP generator from a user
    # Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second factor afterward.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2RemoveTOTPResponse, Integer, Hash)>] V2RemoveTOTPResponse data, response status code and response headers
    def user_service_remove_totp_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_remove_totp ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_remove_totp"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/totp'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2RemoveTOTPResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_remove_totp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_remove_totp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove u2f token from a user
    # Remove u2f token from a user
    # @param user_id [String] 
    # @param u2f_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2RemoveU2FResponse]
    def user_service_remove_u2_f(user_id, u2f_id, opts = {})
      data, _status_code, _headers = user_service_remove_u2_f_with_http_info(user_id, u2f_id, opts)
      data
    end

    # Remove u2f token from a user
    # Remove u2f token from a user
    # @param user_id [String] 
    # @param u2f_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2RemoveU2FResponse, Integer, Hash)>] V2RemoveU2FResponse data, response status code and response headers
    def user_service_remove_u2_f_with_http_info(user_id, u2f_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_remove_u2_f ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_remove_u2_f"
      end
      # verify the required parameter 'u2f_id' is set
      if @api_client.config.client_side_validation && u2f_id.nil?
        fail ArgumentError, "Missing the required parameter 'u2f_id' when calling UserServiceApi.user_service_remove_u2_f"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/u2f/{u2fId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s)).sub('{' + 'u2fId' + '}', CGI.escape(u2f_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2RemoveU2FResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_remove_u2_f",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_remove_u2_f\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend code to verify user email
    # Resend code to verify user email.
    # @param user_id [String] 
    # @param body [UserServiceResendEmailCodeBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2ResendEmailCodeResponse]
    def user_service_resend_email_code(user_id, body, opts = {})
      data, _status_code, _headers = user_service_resend_email_code_with_http_info(user_id, body, opts)
      data
    end

    # Resend code to verify user email
    # Resend code to verify user email.
    # @param user_id [String] 
    # @param body [UserServiceResendEmailCodeBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2ResendEmailCodeResponse, Integer, Hash)>] V2ResendEmailCodeResponse data, response status code and response headers
    def user_service_resend_email_code_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_resend_email_code ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_resend_email_code"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_resend_email_code"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/email/resend'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2ResendEmailCodeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_resend_email_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_resend_email_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend an invite code for a user
    # Resend an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization's available methods. A resend is only possible if a code has been created previously and sent to the user. If there is no code or it was directly returned, an error will be returned.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2ResendInviteCodeResponse]
    def user_service_resend_invite_code(user_id, opts = {})
      data, _status_code, _headers = user_service_resend_invite_code_with_http_info(user_id, opts)
      data
    end

    # Resend an invite code for a user
    # Resend an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization&#39;s available methods. A resend is only possible if a code has been created previously and sent to the user. If there is no code or it was directly returned, an error will be returned.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2ResendInviteCodeResponse, Integer, Hash)>] V2ResendInviteCodeResponse data, response status code and response headers
    def user_service_resend_invite_code_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_resend_invite_code ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_resend_invite_code"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/invite_code/resend'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2ResendInviteCodeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_resend_invite_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_resend_invite_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend code to verify user phone
    # Resend code to verify user phone.
    # @param user_id [String] 
    # @param body [UserServiceResendPhoneCodeBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2ResendPhoneCodeResponse]
    def user_service_resend_phone_code(user_id, body, opts = {})
      data, _status_code, _headers = user_service_resend_phone_code_with_http_info(user_id, body, opts)
      data
    end

    # Resend code to verify user phone
    # Resend code to verify user phone.
    # @param user_id [String] 
    # @param body [UserServiceResendPhoneCodeBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2ResendPhoneCodeResponse, Integer, Hash)>] V2ResendPhoneCodeResponse data, response status code and response headers
    def user_service_resend_phone_code_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_resend_phone_code ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_resend_phone_code"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_resend_phone_code"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/phone/resend'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2ResendPhoneCodeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_resend_phone_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_resend_phone_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the information returned by the identity provider
    # Retrieve the information returned by the identity provider for registration or updating an existing user with new information..
    # @param idp_intent_id [String] ID of the idp intent, previously returned on the success response of the IDP callback
    # @param body [UserServiceRetrieveIdentityProviderIntentBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2RetrieveIdentityProviderIntentResponse]
    def user_service_retrieve_identity_provider_intent(idp_intent_id, body, opts = {})
      data, _status_code, _headers = user_service_retrieve_identity_provider_intent_with_http_info(idp_intent_id, body, opts)
      data
    end

    # Retrieve the information returned by the identity provider
    # Retrieve the information returned by the identity provider for registration or updating an existing user with new information..
    # @param idp_intent_id [String] ID of the idp intent, previously returned on the success response of the IDP callback
    # @param body [UserServiceRetrieveIdentityProviderIntentBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2RetrieveIdentityProviderIntentResponse, Integer, Hash)>] V2RetrieveIdentityProviderIntentResponse data, response status code and response headers
    def user_service_retrieve_identity_provider_intent_with_http_info(idp_intent_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_retrieve_identity_provider_intent ...'
      end
      # verify the required parameter 'idp_intent_id' is set
      if @api_client.config.client_side_validation && idp_intent_id.nil?
        fail ArgumentError, "Missing the required parameter 'idp_intent_id' when calling UserServiceApi.user_service_retrieve_identity_provider_intent"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_retrieve_identity_provider_intent"
      end
      # resource path
      local_var_path = '/v2/idp_intents/{idpIntentId}'.sub('{' + 'idpIntentId' + '}', CGI.escape(idp_intent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2RetrieveIdentityProviderIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_retrieve_identity_provider_intent",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_retrieve_identity_provider_intent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send code to verify user email
    # Send code to verify user email.
    # @param user_id [String] 
    # @param body [UserServiceSendEmailCodeBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2SendEmailCodeResponse]
    def user_service_send_email_code(user_id, body, opts = {})
      data, _status_code, _headers = user_service_send_email_code_with_http_info(user_id, body, opts)
      data
    end

    # Send code to verify user email
    # Send code to verify user email.
    # @param user_id [String] 
    # @param body [UserServiceSendEmailCodeBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2SendEmailCodeResponse, Integer, Hash)>] V2SendEmailCodeResponse data, response status code and response headers
    def user_service_send_email_code_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_send_email_code ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_send_email_code"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_send_email_code"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/email/send'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2SendEmailCodeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_send_email_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_send_email_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change the user email
    # Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email..
    # @param user_id [String] 
    # @param body [UserServiceSetEmailBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2SetEmailResponse]
    def user_service_set_email(user_id, body, opts = {})
      data, _status_code, _headers = user_service_set_email_with_http_info(user_id, body, opts)
      data
    end

    # Change the user email
    # Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email..
    # @param user_id [String] 
    # @param body [UserServiceSetEmailBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2SetEmailResponse, Integer, Hash)>] V2SetEmailResponse data, response status code and response headers
    def user_service_set_email_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_set_email ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_set_email"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_set_email"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/email'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2SetEmailResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_set_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_set_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change password
    # Change the password of a user with either a verification code or the current password..
    # @param user_id [String] 
    # @param body [V2UserServiceSetPasswordBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2SetPasswordResponse]
    def user_service_set_password(user_id, body, opts = {})
      data, _status_code, _headers = user_service_set_password_with_http_info(user_id, body, opts)
      data
    end

    # Change password
    # Change the password of a user with either a verification code or the current password..
    # @param user_id [String] 
    # @param body [V2UserServiceSetPasswordBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2SetPasswordResponse, Integer, Hash)>] V2SetPasswordResponse data, response status code and response headers
    def user_service_set_password_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_set_password ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_set_password"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_set_password"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/password'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2SetPasswordResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_set_password",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_set_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the user phone
    # Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms..
    # @param user_id [String] 
    # @param body [UserServiceSetPhoneBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2SetPhoneResponse]
    def user_service_set_phone(user_id, body, opts = {})
      data, _status_code, _headers = user_service_set_phone_with_http_info(user_id, body, opts)
      data
    end

    # Set the user phone
    # Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms..
    # @param user_id [String] 
    # @param body [UserServiceSetPhoneBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2SetPhoneResponse, Integer, Hash)>] V2SetPhoneResponse data, response status code and response headers
    def user_service_set_phone_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_set_phone ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_set_phone"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_set_phone"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/phone'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2SetPhoneResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_set_phone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_set_phone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start flow with an identity provider
    # Start a flow with an identity provider, for external login, registration or linking..
    # @param body [V2StartIdentityProviderIntentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [V2StartIdentityProviderIntentResponse]
    def user_service_start_identity_provider_intent(body, opts = {})
      data, _status_code, _headers = user_service_start_identity_provider_intent_with_http_info(body, opts)
      data
    end

    # Start flow with an identity provider
    # Start a flow with an identity provider, for external login, registration or linking..
    # @param body [V2StartIdentityProviderIntentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2StartIdentityProviderIntentResponse, Integer, Hash)>] V2StartIdentityProviderIntentResponse data, response status code and response headers
    def user_service_start_identity_provider_intent_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_start_identity_provider_intent ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_start_identity_provider_intent"
      end
      # resource path
      local_var_path = '/v2/idp_intents'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2StartIdentityProviderIntentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_start_identity_provider_intent",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_start_identity_provider_intent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unlock user
    # The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2UnlockUserResponse]
    def user_service_unlock_user(user_id, opts = {})
      data, _status_code, _headers = user_service_unlock_user_with_http_info(user_id, opts)
      data
    end

    # Unlock user
    # The state of the user will be changed to &#39;locked&#39;. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state &#39;locked&#39;. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2UnlockUserResponse, Integer, Hash)>] V2UnlockUserResponse data, response status code and response headers
    def user_service_unlock_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_unlock_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_unlock_user"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/unlock'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2UnlockUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_unlock_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_unlock_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update User
    # Update all information from a user..
    # @param user_id [String] 
    # @param body [UserServiceUpdateHumanUserBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2UpdateHumanUserResponse]
    def user_service_update_human_user(user_id, body, opts = {})
      data, _status_code, _headers = user_service_update_human_user_with_http_info(user_id, body, opts)
      data
    end

    # Update User
    # Update all information from a user..
    # @param user_id [String] 
    # @param body [UserServiceUpdateHumanUserBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2UpdateHumanUserResponse, Integer, Hash)>] V2UpdateHumanUserResponse data, response status code and response headers
    def user_service_update_human_user_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_update_human_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_update_human_user"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_update_human_user"
      end
      # resource path
      local_var_path = '/v2/users/human/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2UpdateHumanUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_update_human_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_update_human_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify the email
    # Verify the email with the generated code.
    # @param user_id [String] 
    # @param body [UserServiceVerifyEmailBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2VerifyEmailResponse]
    def user_service_verify_email(user_id, body, opts = {})
      data, _status_code, _headers = user_service_verify_email_with_http_info(user_id, body, opts)
      data
    end

    # Verify the email
    # Verify the email with the generated code.
    # @param user_id [String] 
    # @param body [UserServiceVerifyEmailBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2VerifyEmailResponse, Integer, Hash)>] V2VerifyEmailResponse data, response status code and response headers
    def user_service_verify_email_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_verify_email ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_verify_email"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_verify_email"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/email/verify'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2VerifyEmailResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_verify_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_verify_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify an invite code for a user
    # Verify the invite code of a user previously issued. This will set their email to a verified state and allow the user to set up their first authentication method (password, passkeys, IdP) depending on the organization's available methods.
    # @param user_id [String] 
    # @param body [UserServiceVerifyInviteCodeBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2VerifyInviteCodeResponse]
    def user_service_verify_invite_code(user_id, body, opts = {})
      data, _status_code, _headers = user_service_verify_invite_code_with_http_info(user_id, body, opts)
      data
    end

    # Verify an invite code for a user
    # Verify the invite code of a user previously issued. This will set their email to a verified state and allow the user to set up their first authentication method (password, passkeys, IdP) depending on the organization&#39;s available methods.
    # @param user_id [String] 
    # @param body [UserServiceVerifyInviteCodeBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2VerifyInviteCodeResponse, Integer, Hash)>] V2VerifyInviteCodeResponse data, response status code and response headers
    def user_service_verify_invite_code_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_verify_invite_code ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_verify_invite_code"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_verify_invite_code"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/invite_code/verify'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2VerifyInviteCodeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_verify_invite_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_verify_invite_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify a passkey for a user
    # Verify the passkey registration with the public key credential..
    # @param user_id [String] 
    # @param passkey_id [String] 
    # @param body [UserServiceVerifyPasskeyRegistrationBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2VerifyPasskeyRegistrationResponse]
    def user_service_verify_passkey_registration(user_id, passkey_id, body, opts = {})
      data, _status_code, _headers = user_service_verify_passkey_registration_with_http_info(user_id, passkey_id, body, opts)
      data
    end

    # Verify a passkey for a user
    # Verify the passkey registration with the public key credential..
    # @param user_id [String] 
    # @param passkey_id [String] 
    # @param body [UserServiceVerifyPasskeyRegistrationBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2VerifyPasskeyRegistrationResponse, Integer, Hash)>] V2VerifyPasskeyRegistrationResponse data, response status code and response headers
    def user_service_verify_passkey_registration_with_http_info(user_id, passkey_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_verify_passkey_registration ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_verify_passkey_registration"
      end
      # verify the required parameter 'passkey_id' is set
      if @api_client.config.client_side_validation && passkey_id.nil?
        fail ArgumentError, "Missing the required parameter 'passkey_id' when calling UserServiceApi.user_service_verify_passkey_registration"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_verify_passkey_registration"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/passkeys/{passkeyId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s)).sub('{' + 'passkeyId' + '}', CGI.escape(passkey_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2VerifyPasskeyRegistrationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_verify_passkey_registration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_verify_passkey_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify the phone
    # Verify the phone with the generated code..
    # @param user_id [String] 
    # @param body [UserServiceVerifyPhoneBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2VerifyPhoneResponse]
    def user_service_verify_phone(user_id, body, opts = {})
      data, _status_code, _headers = user_service_verify_phone_with_http_info(user_id, body, opts)
      data
    end

    # Verify the phone
    # Verify the phone with the generated code..
    # @param user_id [String] 
    # @param body [UserServiceVerifyPhoneBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2VerifyPhoneResponse, Integer, Hash)>] V2VerifyPhoneResponse data, response status code and response headers
    def user_service_verify_phone_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_verify_phone ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_verify_phone"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_verify_phone"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/phone/verify'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2VerifyPhoneResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_verify_phone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_verify_phone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify a TOTP generator for a user
    # Verify the TOTP registration with a generated code..
    # @param user_id [String] 
    # @param body [UserServiceVerifyTOTPRegistrationBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2VerifyTOTPRegistrationResponse]
    def user_service_verify_totp_registration(user_id, body, opts = {})
      data, _status_code, _headers = user_service_verify_totp_registration_with_http_info(user_id, body, opts)
      data
    end

    # Verify a TOTP generator for a user
    # Verify the TOTP registration with a generated code..
    # @param user_id [String] 
    # @param body [UserServiceVerifyTOTPRegistrationBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2VerifyTOTPRegistrationResponse, Integer, Hash)>] V2VerifyTOTPRegistrationResponse data, response status code and response headers
    def user_service_verify_totp_registration_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_verify_totp_registration ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_verify_totp_registration"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_verify_totp_registration"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/totp/verify'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2VerifyTOTPRegistrationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_verify_totp_registration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_verify_totp_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify a u2f token for a user
    # Verify the u2f token registration with the public key credential..
    # @param user_id [String] 
    # @param u2f_id [String] 
    # @param body [UserServiceVerifyU2FRegistrationBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2VerifyU2FRegistrationResponse]
    def user_service_verify_u2_f_registration(user_id, u2f_id, body, opts = {})
      data, _status_code, _headers = user_service_verify_u2_f_registration_with_http_info(user_id, u2f_id, body, opts)
      data
    end

    # Verify a u2f token for a user
    # Verify the u2f token registration with the public key credential..
    # @param user_id [String] 
    # @param u2f_id [String] 
    # @param body [UserServiceVerifyU2FRegistrationBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2VerifyU2FRegistrationResponse, Integer, Hash)>] V2VerifyU2FRegistrationResponse data, response status code and response headers
    def user_service_verify_u2_f_registration_with_http_info(user_id, u2f_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserServiceApi.user_service_verify_u2_f_registration ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserServiceApi.user_service_verify_u2_f_registration"
      end
      # verify the required parameter 'u2f_id' is set
      if @api_client.config.client_side_validation && u2f_id.nil?
        fail ArgumentError, "Missing the required parameter 'u2f_id' when calling UserServiceApi.user_service_verify_u2_f_registration"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserServiceApi.user_service_verify_u2_f_registration"
      end
      # resource path
      local_var_path = '/v2/users/{userId}/u2f/{u2fId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s)).sub('{' + 'u2fId' + '}', CGI.escape(u2f_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2VerifyU2FRegistrationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"UserServiceApi.user_service_verify_u2_f_registration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserServiceApi#user_service_verify_u2_f_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
