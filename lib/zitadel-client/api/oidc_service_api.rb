=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module ZitadelClient
  class OIDCServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Finalize an Auth Request and get the callback URL.
    # Finalize an Auth Request and get the callback URL for success or failure. The user must be redirected to the URL in order to inform the application about the success or failure. On success, the URL contains details for the application to obtain the tokens. This method can only be called once for an Auth request.
    # @param auth_request_id [String] ID of the Auth Request.
    # @param body [OIDCServiceCreateCallbackBody] 
    # @param [Hash] opts the optional parameters
    # @return [V2CreateCallbackResponse]
    def create_callback(auth_request_id, body, opts = {})
      data, _status_code, _headers = create_callback_with_http_info(auth_request_id, body, opts)
      data
    end

    # Finalize an Auth Request and get the callback URL.
    # Finalize an Auth Request and get the callback URL for success or failure. The user must be redirected to the URL in order to inform the application about the success or failure. On success, the URL contains details for the application to obtain the tokens. This method can only be called once for an Auth request.
    # @param auth_request_id [String] ID of the Auth Request.
    # @param body [OIDCServiceCreateCallbackBody] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2CreateCallbackResponse, Integer, Hash)>] V2CreateCallbackResponse data, response status code and response headers
    def create_callback_with_http_info(auth_request_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OIDCServiceApi.create_callback ...'
      end
      # verify the required parameter 'auth_request_id' is set
      if @api_client.config.client_side_validation && auth_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'auth_request_id' when calling OIDCServiceApi.create_callback"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OIDCServiceApi.create_callback"
      end
      # resource path
      local_var_path = '/v2/oidc/auth_requests/{authRequestId}'.sub('{' + 'authRequestId' + '}', CGI.escape(auth_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2CreateCallbackResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"OIDCServiceApi.create_callback",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OIDCServiceApi#create_callback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get OIDC Auth Request details
    # Get OIDC Auth Request details by ID, obtained from the redirect URL. Returns details that are parsed from the application's Auth Request.
    # @param auth_request_id [String] ID of the Auth Request, as obtained from the redirect URL.
    # @param [Hash] opts the optional parameters
    # @return [V2GetAuthRequestResponse]
    def get_auth_request(auth_request_id, opts = {})
      data, _status_code, _headers = get_auth_request_with_http_info(auth_request_id, opts)
      data
    end

    # Get OIDC Auth Request details
    # Get OIDC Auth Request details by ID, obtained from the redirect URL. Returns details that are parsed from the application&#39;s Auth Request.
    # @param auth_request_id [String] ID of the Auth Request, as obtained from the redirect URL.
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2GetAuthRequestResponse, Integer, Hash)>] V2GetAuthRequestResponse data, response status code and response headers
    def get_auth_request_with_http_info(auth_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OIDCServiceApi.get_auth_request ...'
      end
      # verify the required parameter 'auth_request_id' is set
      if @api_client.config.client_side_validation && auth_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'auth_request_id' when calling OIDCServiceApi.get_auth_request"
      end
      # resource path
      local_var_path = '/v2/oidc/auth_requests/{authRequestId}'.sub('{' + 'authRequestId' + '}', CGI.escape(auth_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetAuthRequestResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"OIDCServiceApi.get_auth_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OIDCServiceApi#get_auth_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
