=begin
#merged spec

#merged spec

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module ZitadelClient
  class SettingsServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the current active identity providers
    # Return the current active identity providers for the requested context
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @option opts [Boolean] :creation_allowed 
    # @option opts [Boolean] :linking_allowed 
    # @option opts [Boolean] :auto_creation 
    # @option opts [Boolean] :auto_linking 
    # @return [V2GetActiveIdentityProvidersResponse]
    def settings_service_get_active_identity_providers(opts = {})
      data, _status_code, _headers = settings_service_get_active_identity_providers_with_http_info(opts)
      data
    end

    # Get the current active identity providers
    # Return the current active identity providers for the requested context
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @option opts [Boolean] :creation_allowed 
    # @option opts [Boolean] :linking_allowed 
    # @option opts [Boolean] :auto_creation 
    # @option opts [Boolean] :auto_linking 
    # @return [Array<(V2GetActiveIdentityProvidersResponse, Integer, Hash)>] V2GetActiveIdentityProvidersResponse data, response status code and response headers
    def settings_service_get_active_identity_providers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsServiceApi.settings_service_get_active_identity_providers ...'
      end
      # resource path
      local_var_path = '/v2/settings/login/idps'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ctx.orgId'] = opts[:'ctx_org_id'] if !opts[:'ctx_org_id'].nil?
      query_params[:'ctx.instance'] = opts[:'ctx_instance'] if !opts[:'ctx_instance'].nil?
      query_params[:'creationAllowed'] = opts[:'creation_allowed'] if !opts[:'creation_allowed'].nil?
      query_params[:'linkingAllowed'] = opts[:'linking_allowed'] if !opts[:'linking_allowed'].nil?
      query_params[:'autoCreation'] = opts[:'auto_creation'] if !opts[:'auto_creation'].nil?
      query_params[:'autoLinking'] = opts[:'auto_linking'] if !opts[:'auto_linking'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetActiveIdentityProvidersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"SettingsServiceApi.settings_service_get_active_identity_providers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsServiceApi#settings_service_get_active_identity_providers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the current active branding settings
    # Return the current active branding settings for the requested context
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @return [V2GetBrandingSettingsResponse]
    def settings_service_get_branding_settings(opts = {})
      data, _status_code, _headers = settings_service_get_branding_settings_with_http_info(opts)
      data
    end

    # Get the current active branding settings
    # Return the current active branding settings for the requested context
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @return [Array<(V2GetBrandingSettingsResponse, Integer, Hash)>] V2GetBrandingSettingsResponse data, response status code and response headers
    def settings_service_get_branding_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsServiceApi.settings_service_get_branding_settings ...'
      end
      # resource path
      local_var_path = '/v2/settings/branding'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ctx.orgId'] = opts[:'ctx_org_id'] if !opts[:'ctx_org_id'].nil?
      query_params[:'ctx.instance'] = opts[:'ctx_instance'] if !opts[:'ctx_instance'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetBrandingSettingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"SettingsServiceApi.settings_service_get_branding_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsServiceApi#settings_service_get_branding_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the domain settings
    # Return the domain settings for the requested context
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @return [V2GetDomainSettingsResponse]
    def settings_service_get_domain_settings(opts = {})
      data, _status_code, _headers = settings_service_get_domain_settings_with_http_info(opts)
      data
    end

    # Get the domain settings
    # Return the domain settings for the requested context
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @return [Array<(V2GetDomainSettingsResponse, Integer, Hash)>] V2GetDomainSettingsResponse data, response status code and response headers
    def settings_service_get_domain_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsServiceApi.settings_service_get_domain_settings ...'
      end
      # resource path
      local_var_path = '/v2/settings/domain'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ctx.orgId'] = opts[:'ctx_org_id'] if !opts[:'ctx_org_id'].nil?
      query_params[:'ctx.instance'] = opts[:'ctx_instance'] if !opts[:'ctx_instance'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetDomainSettingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"SettingsServiceApi.settings_service_get_domain_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsServiceApi#settings_service_get_domain_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get basic information over the instance
    # Return the basic information of the instance for the requested context
    # @param [Hash] opts the optional parameters
    # @return [V2GetGeneralSettingsResponse]
    def settings_service_get_general_settings(opts = {})
      data, _status_code, _headers = settings_service_get_general_settings_with_http_info(opts)
      data
    end

    # Get basic information over the instance
    # Return the basic information of the instance for the requested context
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2GetGeneralSettingsResponse, Integer, Hash)>] V2GetGeneralSettingsResponse data, response status code and response headers
    def settings_service_get_general_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsServiceApi.settings_service_get_general_settings ...'
      end
      # resource path
      local_var_path = '/v2/settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetGeneralSettingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"SettingsServiceApi.settings_service_get_general_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsServiceApi#settings_service_get_general_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the legal and support settings
    # Return the legal settings for the requested context
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @return [V2GetLegalAndSupportSettingsResponse]
    def settings_service_get_legal_and_support_settings(opts = {})
      data, _status_code, _headers = settings_service_get_legal_and_support_settings_with_http_info(opts)
      data
    end

    # Get the legal and support settings
    # Return the legal settings for the requested context
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @return [Array<(V2GetLegalAndSupportSettingsResponse, Integer, Hash)>] V2GetLegalAndSupportSettingsResponse data, response status code and response headers
    def settings_service_get_legal_and_support_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsServiceApi.settings_service_get_legal_and_support_settings ...'
      end
      # resource path
      local_var_path = '/v2/settings/legal_support'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ctx.orgId'] = opts[:'ctx_org_id'] if !opts[:'ctx_org_id'].nil?
      query_params[:'ctx.instance'] = opts[:'ctx_instance'] if !opts[:'ctx_instance'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetLegalAndSupportSettingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"SettingsServiceApi.settings_service_get_legal_and_support_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsServiceApi#settings_service_get_legal_and_support_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the lockout settings
    # Return the lockout settings for the requested context, which define when a user will be locked
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @return [V2GetLockoutSettingsResponse]
    def settings_service_get_lockout_settings(opts = {})
      data, _status_code, _headers = settings_service_get_lockout_settings_with_http_info(opts)
      data
    end

    # Get the lockout settings
    # Return the lockout settings for the requested context, which define when a user will be locked
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @return [Array<(V2GetLockoutSettingsResponse, Integer, Hash)>] V2GetLockoutSettingsResponse data, response status code and response headers
    def settings_service_get_lockout_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsServiceApi.settings_service_get_lockout_settings ...'
      end
      # resource path
      local_var_path = '/v2/settings/lockout'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ctx.orgId'] = opts[:'ctx_org_id'] if !opts[:'ctx_org_id'].nil?
      query_params[:'ctx.instance'] = opts[:'ctx_instance'] if !opts[:'ctx_instance'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetLockoutSettingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"SettingsServiceApi.settings_service_get_lockout_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsServiceApi#settings_service_get_lockout_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the login settings
    # Return the settings for the requested context
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @return [V2GetLoginSettingsResponse]
    def settings_service_get_login_settings(opts = {})
      data, _status_code, _headers = settings_service_get_login_settings_with_http_info(opts)
      data
    end

    # Get the login settings
    # Return the settings for the requested context
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @return [Array<(V2GetLoginSettingsResponse, Integer, Hash)>] V2GetLoginSettingsResponse data, response status code and response headers
    def settings_service_get_login_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsServiceApi.settings_service_get_login_settings ...'
      end
      # resource path
      local_var_path = '/v2/settings/login'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ctx.orgId'] = opts[:'ctx_org_id'] if !opts[:'ctx_org_id'].nil?
      query_params[:'ctx.instance'] = opts[:'ctx_instance'] if !opts[:'ctx_instance'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetLoginSettingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"SettingsServiceApi.settings_service_get_login_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsServiceApi#settings_service_get_login_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the password complexity settings
    # Return the password complexity settings for the requested context
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @return [V2GetPasswordComplexitySettingsResponse]
    def settings_service_get_password_complexity_settings(opts = {})
      data, _status_code, _headers = settings_service_get_password_complexity_settings_with_http_info(opts)
      data
    end

    # Get the password complexity settings
    # Return the password complexity settings for the requested context
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @return [Array<(V2GetPasswordComplexitySettingsResponse, Integer, Hash)>] V2GetPasswordComplexitySettingsResponse data, response status code and response headers
    def settings_service_get_password_complexity_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsServiceApi.settings_service_get_password_complexity_settings ...'
      end
      # resource path
      local_var_path = '/v2/settings/password/complexity'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ctx.orgId'] = opts[:'ctx_org_id'] if !opts[:'ctx_org_id'].nil?
      query_params[:'ctx.instance'] = opts[:'ctx_instance'] if !opts[:'ctx_instance'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetPasswordComplexitySettingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"SettingsServiceApi.settings_service_get_password_complexity_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsServiceApi#settings_service_get_password_complexity_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the password expiry settings
    # Return the password expiry settings for the requested context
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @return [V2GetPasswordExpirySettingsResponse]
    def settings_service_get_password_expiry_settings(opts = {})
      data, _status_code, _headers = settings_service_get_password_expiry_settings_with_http_info(opts)
      data
    end

    # Get the password expiry settings
    # Return the password expiry settings for the requested context
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ctx_org_id 
    # @option opts [Boolean] :ctx_instance 
    # @return [Array<(V2GetPasswordExpirySettingsResponse, Integer, Hash)>] V2GetPasswordExpirySettingsResponse data, response status code and response headers
    def settings_service_get_password_expiry_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SettingsServiceApi.settings_service_get_password_expiry_settings ...'
      end
      # resource path
      local_var_path = '/v2/settings/password/expiry'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ctx.orgId'] = opts[:'ctx_org_id'] if !opts[:'ctx_org_id'].nil?
      query_params[:'ctx.instance'] = opts[:'ctx_instance'] if !opts[:'ctx_instance'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetPasswordExpirySettingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"SettingsServiceApi.settings_service_get_password_expiry_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SettingsServiceApi#settings_service_get_password_expiry_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
