=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module ZitadelClient
  class OrganizationServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an Organization
    # Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
    # @param organization_service_add_organization_request [OrganizationServiceAddOrganizationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationServiceAddOrganizationResponse]
    def organization_service_add_organization(organization_service_add_organization_request, opts = {})
      data, _status_code, _headers = organization_service_add_organization_with_http_info(organization_service_add_organization_request, opts)
      data
    end

    # Create an Organization
    # Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
    # @param organization_service_add_organization_request [OrganizationServiceAddOrganizationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationServiceAddOrganizationResponse, Integer, Hash)>] OrganizationServiceAddOrganizationResponse data, response status code and response headers
    def organization_service_add_organization_with_http_info(organization_service_add_organization_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationServiceApi.organization_service_add_organization ...'
      end
      # verify the required parameter 'organization_service_add_organization_request' is set
      if @api_client.config.client_side_validation && organization_service_add_organization_request.nil?
        fail ArgumentError, "Missing the required parameter 'organization_service_add_organization_request' when calling OrganizationServiceApi.organization_service_add_organization"
      end
      # resource path
      local_var_path = '/v2/organizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(organization_service_add_organization_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationServiceAddOrganizationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"OrganizationServiceApi.organization_service_add_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationServiceApi#organization_service_add_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Organizations
    # Search for Organizations. By default, we will return all organization of the instance. Make sure to include a limit and sorting for pagination..
    # @param organization_service_list_organizations_request [OrganizationServiceListOrganizationsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationServiceListOrganizationsResponse]
    def organization_service_list_organizations(organization_service_list_organizations_request, opts = {})
      data, _status_code, _headers = organization_service_list_organizations_with_http_info(organization_service_list_organizations_request, opts)
      data
    end

    # Search Organizations
    # Search for Organizations. By default, we will return all organization of the instance. Make sure to include a limit and sorting for pagination..
    # @param organization_service_list_organizations_request [OrganizationServiceListOrganizationsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationServiceListOrganizationsResponse, Integer, Hash)>] OrganizationServiceListOrganizationsResponse data, response status code and response headers
    def organization_service_list_organizations_with_http_info(organization_service_list_organizations_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationServiceApi.organization_service_list_organizations ...'
      end
      # verify the required parameter 'organization_service_list_organizations_request' is set
      if @api_client.config.client_side_validation && organization_service_list_organizations_request.nil?
        fail ArgumentError, "Missing the required parameter 'organization_service_list_organizations_request' when calling OrganizationServiceApi.organization_service_list_organizations"
      end
      # resource path
      local_var_path = '/v2/organizations/_search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(organization_service_list_organizations_request)

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationServiceListOrganizationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"OrganizationServiceApi.organization_service_list_organizations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationServiceApi#organization_service_list_organizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
