=begin
#merged spec

#merged spec

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module ZitadelClient
  class OrganizationServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an Organization
    # Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
    # @param body [V2AddOrganizationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [V2AddOrganizationResponse]
    def organization_service_add_organization(body, opts = {})
      data, _status_code, _headers = organization_service_add_organization_with_http_info(body, opts)
      data
    end

    # Create an Organization
    # Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
    # @param body [V2AddOrganizationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2AddOrganizationResponse, Integer, Hash)>] V2AddOrganizationResponse data, response status code and response headers
    def organization_service_add_organization_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationServiceApi.organization_service_add_organization ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrganizationServiceApi.organization_service_add_organization"
      end
      # resource path
      local_var_path = '/v2/organizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2AddOrganizationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"OrganizationServiceApi.organization_service_add_organization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationServiceApi#organization_service_add_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Organizations
    # Search for Organizations. By default, we will return all organization of the instance. Make sure to include a limit and sorting for pagination..
    # @param body [V2ListOrganizationsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [V2ListOrganizationsResponse]
    def organization_service_list_organizations(body, opts = {})
      data, _status_code, _headers = organization_service_list_organizations_with_http_info(body, opts)
      data
    end

    # Search Organizations
    # Search for Organizations. By default, we will return all organization of the instance. Make sure to include a limit and sorting for pagination..
    # @param body [V2ListOrganizationsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2ListOrganizationsResponse, Integer, Hash)>] V2ListOrganizationsResponse data, response status code and response headers
    def organization_service_list_organizations_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationServiceApi.organization_service_list_organizations ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling OrganizationServiceApi.organization_service_list_organizations"
      end
      # resource path
      local_var_path = '/v2/organizations/_search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2ListOrganizationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"OrganizationServiceApi.organization_service_list_organizations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationServiceApi#organization_service_list_organizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
