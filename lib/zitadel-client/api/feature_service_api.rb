=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module ZitadelClient
  class FeatureServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get instance level features
    # Returns all configured features for an instance. Unset fields mean the feature is the current system default.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :inheritance Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource&#39;s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the instance, it will be omitted from the response or Not Found is returned when the instance has no features flags at all.
    # @return [V2GetInstanceFeaturesResponse]
    def get_instance_features(opts = {})
      data, _status_code, _headers = get_instance_features_with_http_info(opts)
      data
    end

    # Get instance level features
    # Returns all configured features for an instance. Unset fields mean the feature is the current system default.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :inheritance Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource&#39;s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the instance, it will be omitted from the response or Not Found is returned when the instance has no features flags at all.
    # @return [Array<(V2GetInstanceFeaturesResponse, Integer, Hash)>] V2GetInstanceFeaturesResponse data, response status code and response headers
    def get_instance_features_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.get_instance_features ...'
      end
      # resource path
      local_var_path = '/v2/features/instance'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'inheritance'] = opts[:'inheritance'] if !opts[:'inheritance'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetInstanceFeaturesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.get_instance_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#get_instance_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organization level features
    # Returns all configured features for an organization. Unset fields mean the feature is the current instance default.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :inheritance Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource&#39;s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the organization, it will be omitted from the response or Not Found is returned when the organization has no features flags at all.
    # @return [V2GetOrganizationFeaturesResponse]
    def get_organization_features(organization_id, opts = {})
      data, _status_code, _headers = get_organization_features_with_http_info(organization_id, opts)
      data
    end

    # Get organization level features
    # Returns all configured features for an organization. Unset fields mean the feature is the current instance default.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :inheritance Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource&#39;s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the organization, it will be omitted from the response or Not Found is returned when the organization has no features flags at all.
    # @return [Array<(V2GetOrganizationFeaturesResponse, Integer, Hash)>] V2GetOrganizationFeaturesResponse data, response status code and response headers
    def get_organization_features_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.get_organization_features ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling FeatureServiceApi.get_organization_features"
      end
      # resource path
      local_var_path = '/v2/features/organization/{organizationId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'inheritance'] = opts[:'inheritance'] if !opts[:'inheritance'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetOrganizationFeaturesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.get_organization_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#get_organization_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get system level features
    # Returns all configured features for the system. Unset fields mean the feature is the current system default.
    # @param [Hash] opts the optional parameters
    # @return [V2GetSystemFeaturesResponse]
    def get_system_features(opts = {})
      data, _status_code, _headers = get_system_features_with_http_info(opts)
      data
    end

    # Get system level features
    # Returns all configured features for the system. Unset fields mean the feature is the current system default.
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2GetSystemFeaturesResponse, Integer, Hash)>] V2GetSystemFeaturesResponse data, response status code and response headers
    def get_system_features_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.get_system_features ...'
      end
      # resource path
      local_var_path = '/v2/features/system'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetSystemFeaturesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.get_system_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#get_system_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get organization level features
    # Returns all configured features for an organization. Unset fields mean the feature is the current instance default.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :inheritance Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource&#39;s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the user, it will be ommitted from the response or Not Found is returned when the user has no features flags at all.
    # @return [V2GetUserFeaturesResponse]
    def get_user_features(user_id, opts = {})
      data, _status_code, _headers = get_user_features_with_http_info(user_id, opts)
      data
    end

    # Get organization level features
    # Returns all configured features for an organization. Unset fields mean the feature is the current instance default.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :inheritance Inherit unset features from the resource owners. This option is recursive: if the flag is set, the resource&#39;s ancestors are consulted up to system defaults. If this option is disabled and the feature is not set on the user, it will be ommitted from the response or Not Found is returned when the user has no features flags at all.
    # @return [Array<(V2GetUserFeaturesResponse, Integer, Hash)>] V2GetUserFeaturesResponse data, response status code and response headers
    def get_user_features_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.get_user_features ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling FeatureServiceApi.get_user_features"
      end
      # resource path
      local_var_path = '/v2/features/user/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'inheritance'] = opts[:'inheritance'] if !opts[:'inheritance'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2GetUserFeaturesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.get_user_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#get_user_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset instance level features
    # Deletes ALL configured features for an instance, reverting the behaviors to system defaults.
    # @param [Hash] opts the optional parameters
    # @return [V2ResetInstanceFeaturesResponse]
    def reset_instance_features(opts = {})
      data, _status_code, _headers = reset_instance_features_with_http_info(opts)
      data
    end

    # Reset instance level features
    # Deletes ALL configured features for an instance, reverting the behaviors to system defaults.
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2ResetInstanceFeaturesResponse, Integer, Hash)>] V2ResetInstanceFeaturesResponse data, response status code and response headers
    def reset_instance_features_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.reset_instance_features ...'
      end
      # resource path
      local_var_path = '/v2/features/instance'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2ResetInstanceFeaturesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.reset_instance_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#reset_instance_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset organization level features
    # Deletes ALL configured features for an organization, reverting the behaviors to instance defaults.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2ResetOrganizationFeaturesResponse]
    def reset_organization_features(organization_id, opts = {})
      data, _status_code, _headers = reset_organization_features_with_http_info(organization_id, opts)
      data
    end

    # Reset organization level features
    # Deletes ALL configured features for an organization, reverting the behaviors to instance defaults.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2ResetOrganizationFeaturesResponse, Integer, Hash)>] V2ResetOrganizationFeaturesResponse data, response status code and response headers
    def reset_organization_features_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.reset_organization_features ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling FeatureServiceApi.reset_organization_features"
      end
      # resource path
      local_var_path = '/v2/features/organization/{organizationId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2ResetOrganizationFeaturesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.reset_organization_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#reset_organization_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset system level features
    # Deletes ALL configured features for the system, reverting the behaviors to system defaults.
    # @param [Hash] opts the optional parameters
    # @return [V2ResetSystemFeaturesResponse]
    def reset_system_features(opts = {})
      data, _status_code, _headers = reset_system_features_with_http_info(opts)
      data
    end

    # Reset system level features
    # Deletes ALL configured features for the system, reverting the behaviors to system defaults.
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2ResetSystemFeaturesResponse, Integer, Hash)>] V2ResetSystemFeaturesResponse data, response status code and response headers
    def reset_system_features_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.reset_system_features ...'
      end
      # resource path
      local_var_path = '/v2/features/system'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2ResetSystemFeaturesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.reset_system_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#reset_system_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset user level features
    # Deletes ALL configured features for a user, reverting the behaviors to organization defaults.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2ResetUserFeaturesResponse]
    def reset_user_features(user_id, opts = {})
      data, _status_code, _headers = reset_user_features_with_http_info(user_id, opts)
      data
    end

    # Reset user level features
    # Deletes ALL configured features for a user, reverting the behaviors to organization defaults.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2ResetUserFeaturesResponse, Integer, Hash)>] V2ResetUserFeaturesResponse data, response status code and response headers
    def reset_user_features_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.reset_user_features ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling FeatureServiceApi.reset_user_features"
      end
      # resource path
      local_var_path = '/v2/features/user/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2ResetUserFeaturesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.reset_user_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#reset_user_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set instance level features
    # Configure and set features that apply to a complete instance. Only fields present in the request are set or unset.
    # @param body [V2SetInstanceFeaturesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [V2SetInstanceFeaturesResponse]
    def set_instance_features(body, opts = {})
      data, _status_code, _headers = set_instance_features_with_http_info(body, opts)
      data
    end

    # Set instance level features
    # Configure and set features that apply to a complete instance. Only fields present in the request are set or unset.
    # @param body [V2SetInstanceFeaturesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2SetInstanceFeaturesResponse, Integer, Hash)>] V2SetInstanceFeaturesResponse data, response status code and response headers
    def set_instance_features_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.set_instance_features ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FeatureServiceApi.set_instance_features"
      end
      # resource path
      local_var_path = '/v2/features/instance'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2SetInstanceFeaturesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.set_instance_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#set_instance_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set organization level features
    # Configure and set features that apply to a complete instance. Only fields present in the request are set or unset.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2SetOrganizationFeaturesResponse]
    def set_organization_features(organization_id, opts = {})
      data, _status_code, _headers = set_organization_features_with_http_info(organization_id, opts)
      data
    end

    # Set organization level features
    # Configure and set features that apply to a complete instance. Only fields present in the request are set or unset.
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2SetOrganizationFeaturesResponse, Integer, Hash)>] V2SetOrganizationFeaturesResponse data, response status code and response headers
    def set_organization_features_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.set_organization_features ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling FeatureServiceApi.set_organization_features"
      end
      # resource path
      local_var_path = '/v2/features/organization/{organizationId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2SetOrganizationFeaturesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.set_organization_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#set_organization_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set system level features
    # Configure and set features that apply to the complete system. Only fields present in the request are set or unset.
    # @param body [V2SetSystemFeaturesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [V2SetSystemFeaturesResponse]
    def set_system_features(body, opts = {})
      data, _status_code, _headers = set_system_features_with_http_info(body, opts)
      data
    end

    # Set system level features
    # Configure and set features that apply to the complete system. Only fields present in the request are set or unset.
    # @param body [V2SetSystemFeaturesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2SetSystemFeaturesResponse, Integer, Hash)>] V2SetSystemFeaturesResponse data, response status code and response headers
    def set_system_features_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.set_system_features ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FeatureServiceApi.set_system_features"
      end
      # resource path
      local_var_path = '/v2/features/system'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'V2SetSystemFeaturesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.set_system_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#set_system_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set user level features
    # Configure and set features that apply to an user. Only fields present in the request are set or unset.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [V2SetUserFeaturesResponse]
    def set_user_features(user_id, opts = {})
      data, _status_code, _headers = set_user_features_with_http_info(user_id, opts)
      data
    end

    # Set user level features
    # Configure and set features that apply to an user. Only fields present in the request are set or unset.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V2SetUserFeaturesResponse, Integer, Hash)>] V2SetUserFeaturesResponse data, response status code and response headers
    def set_user_features_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeatureServiceApi.set_user_features ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling FeatureServiceApi.set_user_features"
      end
      # resource path
      local_var_path = '/v2/features/user/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'V2SetUserFeaturesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['zitadelAccessToken']

      new_options = opts.merge(
        :operation => :"FeatureServiceApi.set_user_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeatureServiceApi#set_user_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
