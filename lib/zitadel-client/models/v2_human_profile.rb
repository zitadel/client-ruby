=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module ZitadelClient
  class V2HumanProfile
    attr_accessor :given_name

    attr_accessor :family_name

    attr_accessor :nick_name

    attr_accessor :display_name

    attr_accessor :preferred_language

    attr_accessor :gender

    # avatar URL of the user
    attr_accessor :avatar_url

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'given_name' => :'givenName',
        :'family_name' => :'familyName',
        :'nick_name' => :'nickName',
        :'display_name' => :'displayName',
        :'preferred_language' => :'preferredLanguage',
        :'gender' => :'gender',
        :'avatar_url' => :'avatarUrl'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'given_name' => :'String',
        :'family_name' => :'String',
        :'nick_name' => :'String',
        :'display_name' => :'String',
        :'preferred_language' => :'String',
        :'gender' => :'V2Gender',
        :'avatar_url' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ZitadelClient::V2HumanProfile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ZitadelClient::V2HumanProfile`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'given_name')
        self.given_name = attributes[:'given_name']
      end

      if attributes.key?(:'family_name')
        self.family_name = attributes[:'family_name']
      end

      if attributes.key?(:'nick_name')
        self.nick_name = attributes[:'nick_name']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'preferred_language')
        self.preferred_language = attributes[:'preferred_language']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      else
        self.gender = 'GENDER_UNSPECIFIED'
      end

      if attributes.key?(:'avatar_url')
        self.avatar_url = attributes[:'avatar_url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@given_name.nil? && @given_name.to_s.length > 200
        invalid_properties.push('invalid value for "given_name", the character length must be smaller than or equal to 200.')
      end

      if !@given_name.nil? && @given_name.to_s.length < 1
        invalid_properties.push('invalid value for "given_name", the character length must be great than or equal to 1.')
      end

      if !@family_name.nil? && @family_name.to_s.length > 200
        invalid_properties.push('invalid value for "family_name", the character length must be smaller than or equal to 200.')
      end

      if !@family_name.nil? && @family_name.to_s.length < 1
        invalid_properties.push('invalid value for "family_name", the character length must be great than or equal to 1.')
      end

      if !@nick_name.nil? && @nick_name.to_s.length > 200
        invalid_properties.push('invalid value for "nick_name", the character length must be smaller than or equal to 200.')
      end

      if !@display_name.nil? && @display_name.to_s.length > 200
        invalid_properties.push('invalid value for "display_name", the character length must be smaller than or equal to 200.')
      end

      if !@preferred_language.nil? && @preferred_language.to_s.length > 10
        invalid_properties.push('invalid value for "preferred_language", the character length must be smaller than or equal to 10.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@given_name.nil? && @given_name.to_s.length > 200
      return false if !@given_name.nil? && @given_name.to_s.length < 1
      return false if !@family_name.nil? && @family_name.to_s.length > 200
      return false if !@family_name.nil? && @family_name.to_s.length < 1
      return false if !@nick_name.nil? && @nick_name.to_s.length > 200
      return false if !@display_name.nil? && @display_name.to_s.length > 200
      return false if !@preferred_language.nil? && @preferred_language.to_s.length > 10
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] given_name Value to be assigned
    def given_name=(given_name)
      if given_name.nil?
        fail ArgumentError, 'given_name cannot be nil'
      end

      if given_name.to_s.length > 200
        fail ArgumentError, 'invalid value for "given_name", the character length must be smaller than or equal to 200.'
      end

      if given_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "given_name", the character length must be great than or equal to 1.'
      end

      @given_name = given_name
    end

    # Custom attribute writer method with validation
    # @param [Object] family_name Value to be assigned
    def family_name=(family_name)
      if family_name.nil?
        fail ArgumentError, 'family_name cannot be nil'
      end

      if family_name.to_s.length > 200
        fail ArgumentError, 'invalid value for "family_name", the character length must be smaller than or equal to 200.'
      end

      if family_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "family_name", the character length must be great than or equal to 1.'
      end

      @family_name = family_name
    end

    # Custom attribute writer method with validation
    # @param [Object] nick_name Value to be assigned
    def nick_name=(nick_name)
      if nick_name.nil?
        fail ArgumentError, 'nick_name cannot be nil'
      end

      if nick_name.to_s.length > 200
        fail ArgumentError, 'invalid value for "nick_name", the character length must be smaller than or equal to 200.'
      end

      @nick_name = nick_name
    end

    # Custom attribute writer method with validation
    # @param [Object] display_name Value to be assigned
    def display_name=(display_name)
      if display_name.nil?
        fail ArgumentError, 'display_name cannot be nil'
      end

      if display_name.to_s.length > 200
        fail ArgumentError, 'invalid value for "display_name", the character length must be smaller than or equal to 200.'
      end

      @display_name = display_name
    end

    # Custom attribute writer method with validation
    # @param [Object] preferred_language Value to be assigned
    def preferred_language=(preferred_language)
      if preferred_language.nil?
        fail ArgumentError, 'preferred_language cannot be nil'
      end

      if preferred_language.to_s.length > 10
        fail ArgumentError, 'invalid value for "preferred_language", the character length must be smaller than or equal to 10.'
      end

      @preferred_language = preferred_language
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          given_name == o.given_name &&
          family_name == o.family_name &&
          nick_name == o.nick_name &&
          display_name == o.display_name &&
          preferred_language == o.preferred_language &&
          gender == o.gender &&
          avatar_url == o.avatar_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [given_name, family_name, nick_name, display_name, preferred_language, gender, avatar_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ZitadelClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
