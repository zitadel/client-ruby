=begin
#Zitadel SDK

#The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module ZitadelClient::Models
  class FeatureServiceSetInstanceFeaturesRequest
    # The login UI will use the settings of the default org (and not from the instance) if no organization context is set
    attr_accessor :login_default_org

    # Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature.
    attr_accessor :oidc_trigger_introspection_projections

    # We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature.
    attr_accessor :oidc_legacy_introspection

    # User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.
    attr_accessor :user_schema

    # Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance.
    attr_accessor :oidc_token_exchange

    # Actions allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.
    attr_accessor :actions

    # Improves performance of specified execution paths.
    attr_accessor :improved_performance

    # Enable the webkey/v3alpha API. The first time this feature is enabled, web keys are generated and activated.
    attr_accessor :web_key

    # Return parent errors to OIDC clients for debugging purposes. Parent errors may contain sensitive data or unwanted details about the system status of zitadel. Only enable if really needed.
    attr_accessor :debug_oidc_parent_error

    # If the flag is enabled, you'll be able to terminate a single session from the login UI by providing an id_token with a `sid` claim as id_token_hint on the end_session endpoint. Note that currently all sessions from the same user agent (browser) are terminated in the login UI. Sessions managed through the Session API already allow the termination of single sessions.
    attr_accessor :oidc_single_v1_session_termination

    # Do not push user token meta-event user.token.v2.added to improve performance on many concurrent single (machine-)user logins
    attr_accessor :disable_user_token_event

    # If the flag is enabled, you'll be able to use the OIDC Back-Channel Logout to be notified in your application about terminated user sessions.
    attr_accessor :enable_back_channel_logout

    attr_accessor :login_v2

    # Enable a newer, more performant, permission check used for v2 and v3 resource based APIs.
    attr_accessor :permission_check_v2

    # If this is enabled the console web client will use the new User v2 API for certain calls
    attr_accessor :console_use_v2_user_api

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'login_default_org' => :'loginDefaultOrg',
        :'oidc_trigger_introspection_projections' => :'oidcTriggerIntrospectionProjections',
        :'oidc_legacy_introspection' => :'oidcLegacyIntrospection',
        :'user_schema' => :'userSchema',
        :'oidc_token_exchange' => :'oidcTokenExchange',
        :'actions' => :'actions',
        :'improved_performance' => :'improvedPerformance',
        :'web_key' => :'webKey',
        :'debug_oidc_parent_error' => :'debugOidcParentError',
        :'oidc_single_v1_session_termination' => :'oidcSingleV1SessionTermination',
        :'disable_user_token_event' => :'disableUserTokenEvent',
        :'enable_back_channel_logout' => :'enableBackChannelLogout',
        :'login_v2' => :'loginV2',
        :'permission_check_v2' => :'permissionCheckV2',
        :'console_use_v2_user_api' => :'consoleUseV2UserApi'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'login_default_org' => :'Boolean',
        :'oidc_trigger_introspection_projections' => :'Boolean',
        :'oidc_legacy_introspection' => :'Boolean',
        :'user_schema' => :'Boolean',
        :'oidc_token_exchange' => :'Boolean',
        :'actions' => :'Boolean',
        :'improved_performance' => :'Array<FeatureServiceImprovedPerformance>',
        :'web_key' => :'Boolean',
        :'debug_oidc_parent_error' => :'Boolean',
        :'oidc_single_v1_session_termination' => :'Boolean',
        :'disable_user_token_event' => :'Boolean',
        :'enable_back_channel_logout' => :'Boolean',
        :'login_v2' => :'FeatureServiceLoginV2',
        :'permission_check_v2' => :'Boolean',
        :'console_use_v2_user_api' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Models attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        # MODIFIED: Updated class name in error message
        fail ArgumentError, "The input argument (attributes) must be a hash in `ZitadelClient::Models::FeatureServiceSetInstanceFeaturesRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          # MODIFIED: Updated class name in error message
          fail ArgumentError, "`#{k}` is not a valid attribute in `ZitadelClient::Models::FeatureServiceSetInstanceFeaturesRequest`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'login_default_org')
        self.login_default_org = attributes[:'login_default_org']
      end

      if attributes.key?(:'oidc_trigger_introspection_projections')
        self.oidc_trigger_introspection_projections = attributes[:'oidc_trigger_introspection_projections']
      end

      if attributes.key?(:'oidc_legacy_introspection')
        self.oidc_legacy_introspection = attributes[:'oidc_legacy_introspection']
      end

      if attributes.key?(:'user_schema')
        self.user_schema = attributes[:'user_schema']
      end

      if attributes.key?(:'oidc_token_exchange')
        self.oidc_token_exchange = attributes[:'oidc_token_exchange']
      end

      if attributes.key?(:'actions')
        self.actions = attributes[:'actions']
      end

      if attributes.key?(:'improved_performance')
        if (value = attributes[:'improved_performance']).is_a?(Array)
          self.improved_performance = value
        end
      end

      if attributes.key?(:'web_key')
        self.web_key = attributes[:'web_key']
      end

      if attributes.key?(:'debug_oidc_parent_error')
        self.debug_oidc_parent_error = attributes[:'debug_oidc_parent_error']
      end

      if attributes.key?(:'oidc_single_v1_session_termination')
        self.oidc_single_v1_session_termination = attributes[:'oidc_single_v1_session_termination']
      end

      if attributes.key?(:'disable_user_token_event')
        self.disable_user_token_event = attributes[:'disable_user_token_event']
      end

      if attributes.key?(:'enable_back_channel_logout')
        self.enable_back_channel_logout = attributes[:'enable_back_channel_logout']
      end

      if attributes.key?(:'login_v2')
        self.login_v2 = attributes[:'login_v2']
      end

      if attributes.key?(:'permission_check_v2')
        self.permission_check_v2 = attributes[:'permission_check_v2']
      end

      if attributes.key?(:'console_use_v2_user_api')
        self.console_use_v2_user_api = attributes[:'console_use_v2_user_api']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          login_default_org == o.login_default_org &&
          oidc_trigger_introspection_projections == o.oidc_trigger_introspection_projections &&
          oidc_legacy_introspection == o.oidc_legacy_introspection &&
          user_schema == o.user_schema &&
          oidc_token_exchange == o.oidc_token_exchange &&
          actions == o.actions &&
          improved_performance == o.improved_performance &&
          web_key == o.web_key &&
          debug_oidc_parent_error == o.debug_oidc_parent_error &&
          oidc_single_v1_session_termination == o.oidc_single_v1_session_termination &&
          disable_user_token_event == o.disable_user_token_event &&
          enable_back_channel_logout == o.enable_back_channel_logout &&
          login_v2 == o.login_v2 &&
          permission_check_v2 == o.permission_check_v2 &&
          console_use_v2_user_api == o.console_use_v2_user_api
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [login_default_org, oidc_trigger_introspection_projections, oidc_legacy_introspection, user_schema, oidc_token_exchange, actions, improved_performance, web_key, debug_oidc_parent_error, oidc_single_v1_session_termination, disable_user_token_event, enable_back_channel_logout, login_v2, permission_check_v2, console_use_v2_user_api].hash
    end

# Builds the object from hash
# @param [Hash] attributes Models attributes in the form of hash
# @return [Object] Returns the model itself
def self.build_from_hash(attributes)
  return nil unless attributes.is_a?(Hash)
  attributes = attributes.transform_keys(&:to_sym)
  transformed_hash = {}
  openapi_types.each_pair do |key, type|
    if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
      transformed_hash["#{key}"] = nil
    elsif type =~ /\AArray<(.*)>/i
      # check to ensure the input is an array given that the attribute
      # is documented as an array but the input is not
      if attributes[attribute_map[key]].is_a?(Array)
        transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
      end
    elsif !attributes[attribute_map[key]].nil?
      transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
    end
  end
  new(transformed_hash) # `new` will call the initialize method of the specific model class.
end

# Deserializes the data based on type
# @param string type Data type
# @param string value Value to be deserialized
# @return [Object] Deserialized data
def self._deserialize(type, value)
  case type.to_sym
  when :Time
    Time.parse(value)
  when :Date
    Date.parse(value)
  when :String
    value.to_s
  when :Integer
    value.to_i
  when :Float
    value.to_f
  when :Boolean
    if value.to_s =~ /\A(true|t|yes|y|1)\z/i
      true
    else
      false
    end
  when :Object
    # generic object (usually a Hash), return directly
    value
  when /\AArray<(?<inner_type>.+)>\z/
    inner_type = Regexp.last_match[:inner_type]
    value.map { |v| _deserialize(inner_type, v) }
  when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
    k_type = Regexp.last_match[:k_type]
    v_type = Regexp.last_match[:v_type]
    {}.tap do |hash|
      value.each do |k, v|
        hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
      end
    end
  else # model
    # models (e.g. Pet) or oneOf/anyOf constructs that resolve to a model name
    # MODIFIED: Ensure model is looked up in the Models namespace
    # 'type' here is expected to be the simple class name (e.g., "User", "OrderDetails")
    klass = ZitadelClient::Models.const_get(type)
    # The `klass.build` method is for oneOf/anyOf types (defined in partial_oneof_module.mustache / partial_anyof_module.mustache)
    # The `klass.build_from_hash` is for regular model types (defined in this base_object.mustache itself)
    if klass.respond_to?(:openapi_one_of) || klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_allOf)
      klass.build(value) # For oneOf/anyOf/allOf, delegate to their specific build method
    else
      klass.build_from_hash(value) # For regular models
    end
  end
end

# Returns the string representation of the object
# @return [String] String presentation of the object
def to_s
  to_hash.to_s
end

# to_body is an alias to to_hash (backward compatibility)
# @return [Hash] Returns the object in the form of hash
def to_body
  to_hash
end

# Returns the object in the form of hash
# @return [Hash] Returns the object in the form of hash
def to_hash
  hash = {} # Calls super.to_hash if parent exists
  self.class.attribute_map.each_pair do |attr, param|
    value = self.send(attr)
    if value.nil?
      is_nullable = self.class.openapi_nullable.include?(attr)
      next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
    end

    hash[param] = _to_hash(value)
  end
  hash
end

# Outputs non-array value in the form of hash
# For object, use to_hash. Otherwise, just return the value
# @param [Object] value Any valid value
# @return [Hash] Returns the value in the form of hash
def _to_hash(value)
  if value.is_a?(Array)
    value.compact.map { |v| _to_hash(v) }
  elsif value.is_a?(Hash)
    {}.tap do |hash|
      value.each { |k, v| hash[k] = _to_hash(v) }
    end
  elsif value.respond_to? :to_hash
    value.to_hash
  else
    value
  end
end

  end

end
