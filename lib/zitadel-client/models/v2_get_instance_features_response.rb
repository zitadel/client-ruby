=begin
#merged spec

#merged spec

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module ZitadelClient
  class V2GetInstanceFeaturesResponse
    attr_accessor :details

    attr_accessor :login_default_org

    attr_accessor :oidc_trigger_introspection_projections

    attr_accessor :oidc_legacy_introspection

    attr_accessor :user_schema

    attr_accessor :oidc_token_exchange

    attr_accessor :actions

    attr_accessor :improved_performance

    attr_accessor :web_key

    attr_accessor :debug_oidc_parent_error

    attr_accessor :oidc_single_v1_session_termination

    attr_accessor :disable_user_token_event

    attr_accessor :enable_back_channel_logout

    attr_accessor :login_v2

    attr_accessor :permission_check_v2

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'details' => :'details',
        :'login_default_org' => :'loginDefaultOrg',
        :'oidc_trigger_introspection_projections' => :'oidcTriggerIntrospectionProjections',
        :'oidc_legacy_introspection' => :'oidcLegacyIntrospection',
        :'user_schema' => :'userSchema',
        :'oidc_token_exchange' => :'oidcTokenExchange',
        :'actions' => :'actions',
        :'improved_performance' => :'improvedPerformance',
        :'web_key' => :'webKey',
        :'debug_oidc_parent_error' => :'debugOidcParentError',
        :'oidc_single_v1_session_termination' => :'oidcSingleV1SessionTermination',
        :'disable_user_token_event' => :'disableUserTokenEvent',
        :'enable_back_channel_logout' => :'enableBackChannelLogout',
        :'login_v2' => :'loginV2',
        :'permission_check_v2' => :'permissionCheckV2'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'details' => :'V2Details',
        :'login_default_org' => :'V2FeatureFlag',
        :'oidc_trigger_introspection_projections' => :'V2FeatureFlag',
        :'oidc_legacy_introspection' => :'V2FeatureFlag',
        :'user_schema' => :'V2FeatureFlag',
        :'oidc_token_exchange' => :'V2FeatureFlag',
        :'actions' => :'V2FeatureFlag',
        :'improved_performance' => :'V2ImprovedPerformanceFeatureFlag',
        :'web_key' => :'V2FeatureFlag',
        :'debug_oidc_parent_error' => :'V2FeatureFlag',
        :'oidc_single_v1_session_termination' => :'V2FeatureFlag',
        :'disable_user_token_event' => :'V2FeatureFlag',
        :'enable_back_channel_logout' => :'V2FeatureFlag',
        :'login_v2' => :'V2LoginV2FeatureFlag',
        :'permission_check_v2' => :'V2FeatureFlag'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ZitadelClient::V2GetInstanceFeaturesResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ZitadelClient::V2GetInstanceFeaturesResponse`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'details')
        self.details = attributes[:'details']
      end

      if attributes.key?(:'login_default_org')
        self.login_default_org = attributes[:'login_default_org']
      end

      if attributes.key?(:'oidc_trigger_introspection_projections')
        self.oidc_trigger_introspection_projections = attributes[:'oidc_trigger_introspection_projections']
      end

      if attributes.key?(:'oidc_legacy_introspection')
        self.oidc_legacy_introspection = attributes[:'oidc_legacy_introspection']
      end

      if attributes.key?(:'user_schema')
        self.user_schema = attributes[:'user_schema']
      end

      if attributes.key?(:'oidc_token_exchange')
        self.oidc_token_exchange = attributes[:'oidc_token_exchange']
      end

      if attributes.key?(:'actions')
        self.actions = attributes[:'actions']
      end

      if attributes.key?(:'improved_performance')
        self.improved_performance = attributes[:'improved_performance']
      end

      if attributes.key?(:'web_key')
        self.web_key = attributes[:'web_key']
      end

      if attributes.key?(:'debug_oidc_parent_error')
        self.debug_oidc_parent_error = attributes[:'debug_oidc_parent_error']
      end

      if attributes.key?(:'oidc_single_v1_session_termination')
        self.oidc_single_v1_session_termination = attributes[:'oidc_single_v1_session_termination']
      end

      if attributes.key?(:'disable_user_token_event')
        self.disable_user_token_event = attributes[:'disable_user_token_event']
      end

      if attributes.key?(:'enable_back_channel_logout')
        self.enable_back_channel_logout = attributes[:'enable_back_channel_logout']
      end

      if attributes.key?(:'login_v2')
        self.login_v2 = attributes[:'login_v2']
      end

      if attributes.key?(:'permission_check_v2')
        self.permission_check_v2 = attributes[:'permission_check_v2']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          details == o.details &&
          login_default_org == o.login_default_org &&
          oidc_trigger_introspection_projections == o.oidc_trigger_introspection_projections &&
          oidc_legacy_introspection == o.oidc_legacy_introspection &&
          user_schema == o.user_schema &&
          oidc_token_exchange == o.oidc_token_exchange &&
          actions == o.actions &&
          improved_performance == o.improved_performance &&
          web_key == o.web_key &&
          debug_oidc_parent_error == o.debug_oidc_parent_error &&
          oidc_single_v1_session_termination == o.oidc_single_v1_session_termination &&
          disable_user_token_event == o.disable_user_token_event &&
          enable_back_channel_logout == o.enable_back_channel_logout &&
          login_v2 == o.login_v2 &&
          permission_check_v2 == o.permission_check_v2
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [details, login_default_org, oidc_trigger_introspection_projections, oidc_legacy_introspection, user_schema, oidc_token_exchange, actions, improved_performance, web_key, debug_oidc_parent_error, oidc_single_v1_session_termination, disable_user_token_event, enable_back_channel_logout, login_v2, permission_check_v2].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ZitadelClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
